// Code generated by goctl. DO NOT EDIT.
package types

type GetHealth struct {
	Status string `json:"status"`
}

type ExecNGQLParams struct {
	Gql   string `json:"gql"`
	Space string `json:"space,optional"`
}

type BatchExecNGQLParams struct {
	Gqls  []string `json:"gqls"`
	Space string   `json:"space,optional"`
}

type ConnectDBParams struct {
	Address       string `json:"address"`
	Port          int    `json:"port"`
	Authorization string `header:"Authorization"`
}

type AnyResponse struct {
	Data interface{} `json:"data"`
}

type FileDestroyRequest struct {
	Names []string `json:"names"`
}

type FileStat struct {
	Id         int    `json:"id"`
	Sample     string `json:"sample"`
	WithHeader bool   `json:"withHeader"`
	Delimiter  string `json:"delimiter"`
	Name       string `json:"name"`
	Size       int64  `json:"size"`
}

type FilesIndexData struct {
	List []FileStat `json:"list"`
}

type FileConfigUpdateRequest struct {
	WithHeader bool   `json:"withHeader, optional"`
	Delimiter  string `json:"delimiter"`
	Name       string `json:"name" validate:"required"`
}

type ImportTaskCSV struct {
	WithHeader *bool   `json:"withHeader,optional"`
	LazyQuotes *bool   `json:"lazyQuotes,optional"`
	Delimiter  *string `json:"delimiter,optional"`
}

type NodeId struct {
	Name        string        `json:"name,optional"`
	Type        string        `json:"type" validate:"required"`
	Index       int64         `json:"index" validate:"required"`
	ConcatItems []interface{} `json:"concatItems,optional,omitempty"`
	Function    string        `json:"function,optional,omitempty"`
}

type Tag struct {
	Name               string `json:"name" validate:"required"`
	ID                 NodeId `json:"id" validate:"required"`
	Props              []Prop `json:"props" validate:"required"`
	IgnoreExistedIndex bool   `json:"ignoreExistedIndex,optional,omitempty"`
}

type Edge struct {
	Name               string      `json:"name" validate:"required"`
	Src                EdgeNodeRef `json:"src" validate:"required"`
	Dst                EdgeNodeRef `json:"dst" validate:"required"`
	Props              []Prop      `json:"props" validate:"required"`
	Rank               *EdgeRank   `json:"rank,optional,omitempty"`
	IgnoreExistedIndex bool        `json:"ignoreExistedIndex,optional,omitempty"`
}

type EdgeNodeRef struct {
	ID NodeId `json:"id" validate:"required"`
}

type Prop struct {
	Name               string  `json:"name" validate:"required"`
	Type               string  `json:"type" validate:"required"`
	Index              int64   `json:"index,optional,omitempty"`
	Nullable           bool    `json:"nullable,optional,omitempty"`
	NullValue          string  `json:"nullValue,optional,omitempty"`
	AlternativeIndices []int64 `json:"alternativeIndices,optional,omitempty"`
	DefaultValue       string  `json:"defaultValue,optional,omitempty"`
}

type EdgeRank struct {
	Index *int64 `json:"index,optional,omitempty"`
}

type S3Config struct {
	Endpoint  string `json:"endpoint,omitempty"`
	Region    string `json:"region,omitempty"`
	AccessKey string `json:"accessKey,omitempty"`
	SecretKey string `json:"secretKey,omitempty"`
	Token     string `json:"token,omitempty"`
	Bucket    string `json:"bucket,omitempty"`
	Key       string `json:"key,omitempty"`
}

type SFTPConfig struct {
	Host       string `json:"host,omitempty"`
	Port       int    `json:"port,omitempty"`
	User       string `json:"user,omitempty"`
	Password   string `json:"password,omitempty"`
	KeyFile    string `json:"keyFile,omitempty"`
	KeyData    string `json:"keyData,omitempty"`
	Passphrase string `json:"passphrase,omitempty"`
	Path       string `json:"path,omitempty"`
}

type LocalConfig struct {
	Path string `json:"path,omitempty"`
}

type ImportTaskConfig struct {
	Client  Client    `json:"client" validate:"required"`
	Manager Manager   `json:"manager" validate:"required"`
	Sources []Sources `json:"sources" validate:"required"`
	Log     *Log      `json:"log,omitempty,optional"`
}

type Client struct {
	Version                  string  `json:"version,omitempty" validate:"required"`
	Address                  string  `json:"address,omitempty" validate:"required"`
	User                     string  `json:"user,omitempty" validate:"required"`
	Password                 string  `json:"password,omitempty" validate:"required"`
	ConcurrencyPerAddress    int     `json:"concurrencyPerAddress,optional"`
	ReconnectInitialInterval *string `json:"reconnectInitialInterval,optional,omitempty"`
	Retry                    int     `json:"retry,optional"`
	RetryInitialInterval     *string `json:"retryInitialInterval,optional,omitempty"`
}

type Manager struct {
	SpaceName           string  `json:"spaceName,omitempty" validate:"required"`
	Batch               int     `json:"batch,omitempty,optional"`
	ReaderConcurrency   int     `json:"readerConcurrency,omitempty,optional"`
	ImporterConcurrency int     `json:"importerConcurrency,omitempty,optional"`
	StatsInterval       *string `json:"statsInterval,omitempty,optional"`
}

type Sources struct {
	CSV   ImportTaskCSV `json:"csv" validate:"required"`
	Path  string        `json:"path,optional,omitempty"`
	S3    *S3Config     `json:"s3,optional,omitempty"`
	SFTP  *SFTPConfig   `json:"sftpConfig,optional,omitempty"`
	Tags  []Tag         `json:"tags,optional"`
	Edges []Edge        `json:"edges,optional"`
}

type Log struct {
	Level   *string    `json:"level,omitempty,optional"`
	Console *bool      `json:"console,omitempty,optional"`
	Files   []string   `json:"files,omitempty,optional"`
	Fields  []LogField `json:"fields,omitempty,optional"`
}

type LogField struct {
	Key   string      `json:"key"`
	Value interface{} `json:"value"`
}

type CreateImportTaskRequest struct {
	Name   string           `json:"name" validate:"required"`
	Config ImportTaskConfig `json:"config" validate:"required"`
}

type CreateImportTaskData struct {
	Id int `json:"id"`
}

type GetImportTaskRequest struct {
	Id int `path:"id" validate:"required"`
}

type GetImportTaskData struct {
	Id            int             `json:"id"`
	Name          string          `json:"name"`
	User          string          `json:"user"`
	Address       string          `json:"address"`
	ImportAddress []string        `json:"importAddress"`
	Space         string          `json:"space"`
	Status        string          `json:"status"`
	Message       string          `json:"message"`
	CreateTime    int64           `json:"createTime"`
	UpdateTime    int64           `json:"updateTime"`
	Stats         ImportTaskStats `json:"stats"`
}

type ImportTaskStats struct {
	ProcessedBytes  int64 `json:"processedBytes"`
	TotalBytes      int64 `json:"totalBytes"`
	FailedRecords   int64 `json:"failedRecords"`
	TotalRecords    int64 `json:"totalRecords"`
	FailedRequest   int64 `json:"failedRequest"`
	TotalRequest    int64 `json:"totalRequest"`
	TotalLatency    int64 `json:"totalLatency"`
	TotalRespTime   int64 `json:"totalRespTime"`
	FailedProcessed int64 `json:"failedProcessed"`
	TotalProcessed  int64 `json:"totalProcessed"`
}

type GetManyImportTaskRequest struct {
	Page     int `form:"page,default=1"`
	PageSize int `form:"pageSize,default=999"`
}

type GetManyImportTaskData struct {
	Total int64               `json:"total"`
	List  []GetImportTaskData `json:"list"`
}

type GetManyImportTaskLogRequest struct {
	Id     int    `path:"id" validate:"required"`
	File   string `form:"file" validate:"required"`
	Offset int64  `form:"offset" validate:"min=0"`
	Limit  int64  `form:"limit" validate:"min=1"`
}

type GetManyImportTaskLogData struct {
	Logs []string `json:"logs"`
}

type GetImportTaskLogNamesRequest struct {
	Id int `path:"id" validate:"required"`
}

type GetImportTaskLogNamesData struct {
	Names []string `json:"names"`
}

type DeleteImportTaskRequest struct {
	Id int `path:"id"`
}

type StopImportTaskRequest struct {
	Id int `path:"id"`
}

type DownloadLogsRequest struct {
	Id   int    `path:"id" validate:"required"`
	Name string `form:"name" validate:"required"`
}

type DownloadConfigsRequest struct {
	Id int `path:"id" validate:"required"`
}

type GetWorkingDirResult struct {
	TaskDir   string `json:"taskDir,omitempty"`
	UploadDir string `json:"uploadDir,omitempty"`
}

type GetSketchesRequest struct {
	Page     int64  `form:"page,range=[0:],optional"`
	PageSize int64  `form:"pageSize,default=10,range=[1:1000],optional"`
	Keyword  string `form:"keyword,optional"`
}

type SketchList struct {
	Items    []Sketch `json:"items"`
	Total    int64    `json:"total"`
	Page     int64    `json:"page"`
	PageSize int64    `json:"pageSize"`
}

type Sketch struct {
	ID         int    `json:"id"`
	Name       string `json:"name"`
	Schema     string `json:"schema"`
	Snapshot   string `json:"snapshot"`
	CreateTime int64  `json:"createTime"`
	UpdateTime int64  `json:"updateTime"`
}

type InitSketchRequest struct {
	Name     string `json:"name" validate:"required"`
	Schema   string `json:"schema,optional"`
	Snapshot string `json:"snapshot,optional"`
}

type UpdateSketchRequest struct {
	ID       int    `path:"id" validate:"required"`
	Name     string `json:"name" validate:"required"`
	Schema   string `json:"schema,optional"`
	Snapshot string `json:"snapshot,optional"`
}

type DeleteSketchRequest struct {
	ID string `path:"id" validate:"required"`
}

type SketchIDResult struct {
	ID int `json:"id"`
}

type GetSchemaSnapshotRequest struct {
	Space string `form:"space"`
}

type UpdateSchemaSnapshotRequest struct {
	Space    string `json:"space"`
	Snapshot string `json:"snapshot"`
}

type SchemaSnapshot struct {
	Space      string `json:"space"`
	Snapshot   string `json:"snapshot"`
	UpdateTime int64  `json:"updateTime"`
	CreateTime int64  `json:"createTime"`
}

type FavoriteList struct {
	Items []FavoriteItem `json:"items"`
	Total int64          `json:"total"`
}

type FavoriteItem struct {
	ID         int    `json:"id"`
	Content    string `json:"content"`
	CreateTime int64  `json:"createTime"`
}

type CreateFavoriteRequest struct {
	Content string `json:"content" validate:"required"`
}

type DeleteFavoriteRequest struct {
	Id string `path:"id" validate:"required"`
}

type FavoriteIDResult struct {
	ID int `json:"id"`
}

type DatasourceS3Config struct {
	Endpoint     string `json:"endpoint"`
	Region       string `json:"region"`
	Bucket       string `json:"bucket"`
	AccessKey    string `json:"accessKey"`
	AccessSecret string `json:"accessSecret"`
}

type DatasourceSFTPConfig struct {
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Username string `json:"username"`
	Password string `json:"password"`
}

type DatasourceAddRequest struct {
	Type       string                `json:"type"`
	Name       string                `json:"name"`
	S3Config   *DatasourceS3Config   `json:"s3Config,optional"`
	SFTPConfig *DatasourceSFTPConfig `json:"sftpConfig,optional"`
}

type DatasourceAddData struct {
	ID int `json:"id"`
}

type DatasourceListRequest struct {
	Type string `form:"type,optional"`
}

type DatasourceRemoveRequest struct {
	ID int `path:"id"`
}

type DatasourceBatchRemoveRequest struct {
	IDs []int `json:"ids"`
}

type DatasourceConfig struct {
	ID         int                   `json:"id"`
	Type       string                `json:"type"`
	Name       string                `json:"name"`
	S3Config   *DatasourceS3Config   `json:"s3Config,optional"`
	SFTPConfig *DatasourceSFTPConfig `json:"sftpConfig,optional"`
	CreateTime int64                 `json:"createTime,optional"`
}

type DatasourceListContentsRequest struct {
	DatasourceID int    `path:"id"`
	Path         string `form:"path,optional"`
}

type FileConfig struct {
	Size int64  `json:"size"`
	Type string `json:"type"`
	Name string `json:"name"`
}

type DatasourceListContentsData struct {
	List []FileConfig `json:"list"`
}

type DatasourceData struct {
	List []DatasourceConfig `json:"list"`
}

type DatasourcePreviewFileRequest struct {
	DatasourceID int    `path:"id"`
	Path         string `form:"path"`
}

type DatasourcePreviewFileData struct {
	Contents []string `json:"contents"`
}
