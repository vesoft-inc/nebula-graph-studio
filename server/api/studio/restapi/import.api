syntax = "v1"

type (
	ImportTaskCSV {
		WithHeader *bool   `json:"withHeader,optional"`
		LazyQuotes *bool   `json:"lazyQuotes,optional"`
		Delimiter  *string `json:"delimiter,optional"`
	}

	NodeId {
		Name        string        `json:"name,optional"`
		Type        string        `json:"type" validate:"required"`
		Index       int64         `json:"index" validate:"required"`
		ConcatItems []interface{} `json:"concatItems,optional"`
		Function    string        `json:"function,optional"`
	}

	Tag {
		Name               string `json:"name" validate:"required"`
		ID                 NodeId `json:"id" validate:"required"`
		Props              []Prop `json:"props" validate:"required"`
		IgnoreExistedIndex bool   `json:"ignoreExistedIndex,optional"`
	}
	Edge {
		Name               string   `json:"name" validate:"required"`
		Src                NodeId   `json:"src" validate:"required"`
		Dst                NodeId   `json:"dst" validate:"required"`
		Props              []Prop   `json:"props" validate:"required"`
		Rank               EdgeRank `json:"rank, optional"`
		IgnoreExistedIndex bool     `json:"ignoreExistedIndex,optional"`
	}

	Prop {
		Name               string  `json:"name" validate:"required"`
		Type               string  `json:"type" validate:"required"`
		Index              int64   `json:"index, optional"`
		Nullable           bool    `json:"nullable, optional"`
		NullValue          string  `json:"nullValue, optional"`
		AlternativeIndices []int64 `json:"alternativeIndices, optional"`
		DefaultValue       string  `json:"defaultValue, optional"`
	}

	EdgeRank {
		Index *int64 `json:"index, optional"`
	}

	S3Config {
		Endpoint  string `json:"endpoint,omitempty"`
		Region    string `json:"region,omitempty"`
		AccessKey string `json:"accessKey,omitempty"`
		SecretKey string `json:"secretKey,omitempty"`
		Token     string `json:"token,omitempty"`
		Bucket    string `json:"bucket,omitempty"`
		Key       string `json:"key,omitempty"`
	}

	SFTPConfig {
		Host       string `json:"host,omitempty"`
		Port       int    `json:"port,omitempty"`
		User       string `json:"user,omitempty"`
		Password   string `json:"password,omitempty"`
		KeyFile    string `json:"keyFile,omitempty"`
		KeyData    string `json:"keyData,omitempty"`
		Passphrase string `json:"passphrase,omitempty"`
		Path       string `json:"path,omitempty"`
	}

	LocalConfig {
		Path string `json:"path,omitempty"`
	}

	ImportTaskConfig {
		Client  Client    `json:"client" validate:"required"`
		Manager Manager   `json:"manager" validate:"required"`
		Sources []Sources `json:"sources" validate:"required"`
	}

	Client {
		Version                  string `json:"version,omitempty" validate:"required"`
		Address                  string `json:"address,omitempty" validate:"required"`
		User                     string `json:"user,omitempty" validate:"required"`
		Password                 string `json:"password,omitempty" validate:"required"`
		ConcurrencyPerAddress    int    `json:"concurrencyPerAddress,optional"`
		ReconnectInitialInterval string `json:"reconnectInitialInterval,optional"`
		Retry                    int    `json:"retry,optional"`
		RetryInitialInterval     string `json:"retryInitialInterval,optional"`
	}

	Manager {
		SpaceName           string `json:"spaceName,omitempty" validate:"required"`
		Batch               int    `json:"batch,omitempty, optional"`
		ReaderConcurrency   int    `json:"readerConcurrency,omitempty, optional"`
		ImporterConcurrency int    `json:"importerConcurrency,omitempty, optional"`
		StatsInterval       string `json:"statsInterval,omitempty, optional"`
	}

	Sources {
		CSV   ImportTaskCSV `json:"csv" validate:"required"`
		Local LocalConfig   `json:"local, optional"`
		S3    S3Config      `json:"s3, optional"`
		SFTP  SFTPConfig    `json:"sftpConfig, optional"`
		Tags  []Tag         `json:"tags, optional"`
		Edges []Edge        `json:"edges, optional"`
	}

	CreateImportTaskRequest {
		Name   string           `json:"name" validate:"required"`
		Config ImportTaskConfig `json:"config" validate:"required"`
	}

	CreateImportTaskData {
		Id string `json:"id"`
	}

	GetImportTaskRequest {
		Id string `path:"id" validate:"required"`
	}

	GetImportTaskData {
		Id            string          `json:"id"`
		Name          string          `json:"name"`
		User          string          `json:"user"`
		Address       string          `json:"address"`
		ImportAddress []string        `json:"importAddress"`
		Space         string          `json:"space"`
		Status        string          `json:"status"`
		Message       string          `json:"message"`
		CreateTime    int64           `json:"createTime"`
		UpdateTime    int64           `json:"updateTime"`
		Stats         ImportTaskStats `json:"stats"`
	}

	ImportTaskStats {
		ProcessedBytes  int64 `json:"processedBytes"`
		TotalBytes      int64 `json:"totalBytes"`
		FailedRecords   int64 `json:"failedRecords"`
		TotalRecords    int64 `json:"totalRecords"`
		FailedRequest   int64 `json:"failedRequest"`
		TotalRequest    int64 `json:"totalRequest"`
		TotalLatency    int64 `json:"totalLatency"`
		TotalRespTime   int64 `json:"totalRespTime"`
		FailedProcessed int64 `json:"failedProcessed"`
		TotalProcessed  int64 `json:"totalProcessed"`
	}

	GetManyImportTaskRequest {
		Page     int `form:"page,default=1"`
		PageSize int `form:"pageSize,default=999"`
	}

	GetManyImportTaskData {
		Total int64               `json:"total"`
		List  []GetImportTaskData `json:"list"`
	}

	GetManyImportTaskLogRequest {
		Id     string `path:"id" validate:"required"`
		File   string `form:"file" validate:"required"`
		Offset int64  `form:"offset" validate:"min=0"`
		Limit  int64  `form:"limit" validate:"min=1"`
	}

	GetManyImportTaskLogData {
		Logs []string `json:"logs"`
	}

	GetImportTaskLogNamesRequest {
		Id string `path:"id" validate:"required""`
	}

	GetImportTaskLogNamesData {
		Names []string `json:"names"`
	}

	DeleteImportTaskRequest {
		Id string `path:"id"`
	}

	StopImportTaskRequest {
		Id string `path:"id"`
	}

	DownloadLogsRequest {
		Id   string `path:"id" validate:"required"`
		Name string `form:"name" validate:"required"`
	}

	DownloadConfigsRequest {
		Id string `path:"id" validate:"required"`
	}

	GetWorkingDirResult {
		TaskDir   string `json:"taskDir,omitempty"`
		UploadDir string `json:"uploadDir,omitempty"`
	}
)

@server(
	group: importtask
)

service studio-api {
	@doc "Create Import Task"
	@handler CreateImportTask
	post /api/import-tasks(CreateImportTaskRequest) returns(CreateImportTaskData)
	
	@doc "Get Import Task"
	@handler GetImportTask
	get /api/import-tasks/:id(GetImportTaskRequest) returns(GetImportTaskData)
	
	@doc "Get Many Import Task"
	@handler GetManyImportTask
	get /api/import-tasks(GetManyImportTaskRequest) returns(GetManyImportTaskData)
	
	@doc "Get Many Import Task Log"
	@handler GetManyImportTaskLog
	get /api/import-tasks/:id/logs(GetManyImportTaskLogRequest) returns(GetManyImportTaskLogData)
	
	@doc "Get all logs file name of a Task"
	@handler GetImportTaskLogNames
	get /api/import-tasks/:id/task-log-names(GetImportTaskLogNamesRequest) returns(GetImportTaskLogNamesData)
	
	@doc "Delete Import Task"
	@handler DeleteImportTask
	delete /api/import-tasks/:id(DeleteImportTaskRequest)
	
	@doc "Stop Import Task"
	@handler StopImportTask
	get /api/import-tasks/:id/stop(StopImportTaskRequest)
	
	@doc "Download logs"
	@handler DownloadLogs
	get /api/import-tasks/:id/download-logs(DownloadLogsRequest)
	
	@doc "Download Config"
	@handler DownloadConfig
	get /api/import-tasks/:id/download-config(DownloadConfigsRequest)
	
	@doc "Get Working Dir"
	@handler GetWorkingDir
	get /api/import-tasks/working-dir returns(GetWorkingDirResult)
}