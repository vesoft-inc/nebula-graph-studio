syntax = "v1"

type (
	Connection {
		User     string `json:"user" validate:"required"`
		Password string `json:"password" validate:"required"`
		Address  string `json:"address" validate:"required"`
	}

	ClientSettings {
		Retry             int        `json:"retry,optional"`
		Concurrency       int        `json:"concurrency,optional"`
		ChannelBufferSize int        `json:"channelBufferSize,optional"`
		Space             string     `json:"space" validate:"required"`
		Connection        Connection `json:"connection" validate:"required"`
		PostStart         PostStart  `json:"postStart,optional"`
		PreStop           PreStop    `json:"preStop,optional"`
	}

	PostStart {
		Commands    string `json:"commands" validate:"required"`
		AfterPeriod string `json:"afterPeriod" validate:"required"`
	}

	PreStop {
		Commands string `json:"commands,optional"`
	}

	CSV {
		WithHeader bool   `json:"withHeader,optional"`
		WithLabel  bool   `json:"withLabel,optional"`
		Delimiter  string `json:"delimiter,optional" default:","`
	}

	VID {
		Index    int64  `json:"index" validate:"required"`
		Type     string `json:"type" validate:"required"`
		Function string `json:"function,optional"`
		Prefix   string `json:"prefix,optional"`
	}

	TagProp {
		Name  string `json:"name" validate:"required"`
		Type  string `json:"type" validate:"required"`
		Index int64  `json:"index" validate:"required"`
	}

	Tag {
		Name  string    `json:"name" validate:"required"`
		Props []TagProp `json:"props" validate:"required"`
	}

	Vertex {
		VID  VID   `json:"vid" validate:"required"`
		Tags []Tag `json:"tags" validate:"required"`
	}

	EdgeID {
		Index    int64  `json:"index" validate:"required"`
		Function string `json:"function,optional"`
		Type     string `json:"type" validate:"required"`
		Prefix   string `json:"prefix,optional"`
	}

	EdgeRank {
		Index int64 `json:"index"`
	}

	EdgeProp {
		Name  string `json:"name"`
		Type  string `json:"type"`
		Index int64  `json:"index"`
	}

	Edge {
		Name   string     `json:"name" validate:"required"`
		SrcVID EdgeID     `json:"srcVID" validate:"required"`
		DstVID EdgeID     `json:"dstVID" validate:"required"`
		Rank   EdgeRank   `json:"rank, optional"`
		Props  []EdgeProp `json:"props" validate:"required"`
	}

	Schema {
		Type   string `json:"type" validate:"required"`
		Edge   Edge   `json:"edge,optional"`
		Vertex Vertex `json:"vertex,optional"`
	}

	File {
		Path         string `json:"path" validate:"required"`
		FailDataPath string `json:"failDataPath" validate:"required"`
		BatchSize    int    `json:"batchSize,optional"`
		Limit        int    `json:"limit, optional"`
		InOrder      bool   `json:"inOrder, optional"`
		Type         string `json:"type" validate:"required"`
		CSV          CSV    `json:"csv" validate:"required"`
		Schema       Schema `json:"schema" validate:"required"`
	}

	ImportConfig {
		Version         string         `json:"version" validate:"required"`
		Description     string         `json:"description,optional"`
		RemoveTempFiles bool           `json:"removeTempFiles,optional"`
		ClientSettings  ClientSettings `json:"clientSettings" validate:"required"`
		Files           []File         `json:"files" validate:"required"`
	}

	CreateImportTaskRequest {
		Name   string       `json:"name" validate:"required"`
		Config ImportConfig `json:"config" validate:"required"`
	}

	CreateImportTaskData {
		Id string `json:"id"`
	}

	GetImportTaskRequest {
		Id       string `path:"id" validate:"required"`
		Address  string `form:"address"`
		Username string `form:"username"`
		Port     string `form:"port"`
	}

	GetImportTaskData {
		Id         string `json:"id"`
		Name       string `json:"name"`
		User       string `json:"user"`
		Address    string `json:"address"`
		Space      string `json:"space"`
		Status     string `json:"status"`
		CreateTime int64  `json:"createTime"`
		UpdateTime int64  `json:"updateTime"`
		Stats      Stats  `json:"stats"`
	}

	Stats {
		NumFailed          int64 `json:"numFailed"`
		NumReadFailed      int64 `json:"numReadFailed"`
		TotalCount         int64 `json:"totalCount"`
		TotalBatches       int64 `json:"totalBatches"`
		TotalLatency       int64 `json:"totalLatency"`
		TotalReqTime       int64 `json:"totalReqTime"`
		TotalBytes         int64 `json:"totalBytes"`
		TotalImportedBytes int64 `json:"totalImportedBytes"`
	}

	GetManyImportTaskRequest {
		Address  string `form:"address"`
		Username string `form:"username"`
		Port     string `form:"port"`
		Page     int    `form:"page,default=1"`
		PageSize int    `form:"pageSize,default=100"`
	}

	GetManyImportTaskData {
		Total int64               `json:"total"`
		List  []GetImportTaskData `json:"list"`
	}

	GetManyImportTaskLogRequest {
		Id     string `path:"id" validate:"required"`
		File   string `form:"file" validate:"required"`
		Offset int64  `form:"offset" validate:"min=0"`
		Limit  int64  `form:"limit" validate:"min=1"`
	}

	GetManyImportTaskLogData {
		Logs []string `json:"logs"`
	}

	GetImportTaskLogNamesRequest {
		Id string `path:"id" validate:"required""`
	}

	GetImportTaskLogNamesData {
		Names []string `json:"names"`
	}

	DeleteImportTaskRequest {
		Id       string `path:"id"`
		Address  string `form:"address"`
		Username string `form:"username"`
		Port     string `form:"port"`
	}

	StopImportTaskRequest {
		Id       string `path:"id"`
		Address  string `form:"address"`
		Port     string `form:"port"`
		Username string `form:"username"`
	}

	DownloadLogsRequest {
		Id   string `path:"id" validate:"required"`
		Name string `form:"name" validate:"required"`
	}

	DownloadLogsData {
		Data string `json:"data"`
	}

	DownloadConfigsRequest {
		Id string `path:"id" validate:"required"`
	}

	DownloadConfigsData {
		Data string `json:"data"`
	}
)

@server(
	group: importtask
)

service studio-api {
	@doc "Create Import Task"
	@handler CreateImportTask
	post /api/import-tasks(CreateImportTaskRequest) returns(CreateImportTaskData)
	@doc "Get Import Task"
	@handler GetImportTask
	get /api/import-tasks/:id(GetImportTaskRequest) returns(GetImportTaskData)
	@doc "Get Many Import Task"
	@handler GetManyImportTask
	get /api/import-tasks(GetManyImportTaskRequest) returns(GetManyImportTaskData)
	@doc "Get Many Import Task Log"
	@handler GetManyImportTaskLog
	get /api/import-tasks/:id/logs(GetManyImportTaskLogRequest) returns(GetManyImportTaskLogData)
	@doc "Get all logs file name of a Task"
	@handler GetImportTaskLogNames
	get /api/import-tasks/:id/task-log-names(GetImportTaskLogNamesRequest) returns(GetImportTaskLogNamesData)
	@doc "Delete Import Task"
	@handler DeleteImportTask
	delete /api/import-tasks/:id(DeleteImportTaskRequest)
	@doc "Stop Import Task"
	@handler StopImportTask
	get /api/import-tasks/stop/:id(StopImportTaskRequest)
	@doc "Download logs"
	@handler DownloadLogs
	get /api/import-tasks/download/:id(DownloadLogsRequest) returns(DownloadLogsData)
	@doc "Download Config"
	@handler DownloadConfig
	get /api/import-tasks/config/:id(DownloadConfigsRequest) returns(DownloadConfigsData)
}