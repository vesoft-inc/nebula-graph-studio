// Code generated by goctl. DO NOT EDIT.
package types

type GetHealth struct {
	Status string `json:"status"`
}

type ExecNGQLParams struct {
	Gql       string   `json:"gql"`
	ParamList []string `json:"paramList,optional"`
	NSID      string   `form:"NSID"`
}

type BatchExecNGQLParams struct {
	Gqls      []string `json:"gqls"`
	ParamList []string `json:"paramList,optional"`
	NSID      string   `form:"NSID"`
}

type ConnectDBParams struct {
	Address       string `json:"address"`
	Port          int    `json:"port"`
	NebulaVersion string `form:"nebulaVersion,optional"`
	Authorization string `header:"Authorization"`
}

type ConnectDBResult struct {
	Version string `json:"version"`
}

type DisconnectDBParams struct {
	NSID string `form:"NSID,optional"`
}

type AnyResponse struct {
	Data interface{} `json:"data"`
}

type FileDestroyRequest struct {
	Name string `path:"name" validate:"required"`
}

type FileStat struct {
	Content    [][]string `json:"content"`
	WithHeader bool       `json:"withHeader"`
	DataType   string     `json:"dataType"`
	Name       string     `json:"name"`
	Size       int64      `json:"size"`
}

type FilesIndexData struct {
	List []FileStat `json:"list"`
}

type Connection struct {
	User     string `json:"user" validate:"required"`
	Password string `json:"password" validate:"required"`
	Address  string `json:"address" validate:"required"`
}

type ClientSettings struct {
	Retry             int        `json:"retry,optional"`
	Concurrency       int        `json:"concurrency,optional"`
	ChannelBufferSize int        `json:"channelBufferSize,optional"`
	Space             string     `json:"space" validate:"required"`
	Connection        Connection `json:"connection" validate:"required"`
	PostStart         PostStart  `json:"postStart,optional"`
	PreStop           PreStop    `json:"preStop,optional"`
}

type PostStart struct {
	Commands    string `json:"commands" validate:"required"`
	AfterPeriod string `json:"afterPeriod" validate:"required"`
}

type PreStop struct {
	Commands string `json:"commands,optional"`
}

type CSV struct {
	WithHeader bool   `json:"withHeader,optional"`
	WithLabel  bool   `json:"withLabel,optional"`
	Delimiter  string `json:"delimiter,optional" default:","`
}

type VID struct {
	Index    int64  `json:"index" validate:"required"`
	Type     string `json:"type" validate:"required"`
	Function string `json:"function,optional"`
	Prefix   string `json:"prefix,optional"`
}

type TagProp struct {
	Name  string `json:"name" validate:"required"`
	Type  string `json:"type" validate:"required"`
	Index int64  `json:"index" validate:"required"`
}

type Tag struct {
	Name  string    `json:"name" validate:"required"`
	Props []TagProp `json:"props" validate:"required"`
}

type Vertex struct {
	VID  VID   `json:"vid" validate:"required"`
	Tags []Tag `json:"tags" validate:"required"`
}

type EdgeID struct {
	Index    int64  `json:"index" validate:"required"`
	Function string `json:"function,optional"`
	Type     string `json:"type" validate:"required"`
	Prefix   string `json:"prefix,optional"`
}

type EdgeRank struct {
	Index int64 `json:"index"`
}

type EdgeProp struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Index int64  `json:"index"`
}

type Edge struct {
	Name   string     `json:"name" validate:"required"`
	SrcVID EdgeID     `json:"srcVID" validate:"required"`
	DstVID EdgeID     `json:"dstVID" validate:"required"`
	Rank   EdgeRank   `json:"rank, optional"`
	Props  []EdgeProp `json:"props" validate:"required"`
}

type Schema struct {
	Type   string `json:"type" validate:"required"`
	Edge   Edge   `json:"edge,optional"`
	Vertex Vertex `json:"vertex,optional"`
}

type File struct {
	Path         string `json:"path" validate:"required"`
	FailDataPath string `json:"failDataPath" validate:"required"`
	BatchSize    int    `json:"batchSize,optional"`
	Limit        int    `json:"limit, optional"`
	InOrder      bool   `json:"inOrder, optional"`
	Type         string `json:"type" validate:"required"`
	CSV          CSV    `json:"csv" validate:"required"`
	Schema       Schema `json:"schema" validate:"required"`
}

type ImportConfig struct {
	Version         string         `json:"version" validate:"required"`
	Description     string         `json:"description,optional"`
	RemoveTempFiles bool           `json:"removeTempFiles,optional"`
	ClientSettings  ClientSettings `json:"clientSettings" validate:"required"`
	Files           []File         `json:"files" validate:"required"`
}

type CreateImportTaskRequest struct {
	Name   string       `json:"name" validate:"required"`
	Config ImportConfig `json:"config" validate:"required"`
}

type CreateImportTaskData struct {
	Id string `json:"id"`
}

type GetImportTaskRequest struct {
	Id       string `path:"id" validate:"required"`
	Address  string `form:"address"`
	Username string `form:"username"`
	Port     string `form:"port"`
}

type GetImportTaskData struct {
	Id         string `json:"id"`
	Name       string `json:"name"`
	User       string `json:"user"`
	Address    string `json:"address"`
	Space      string `json:"space"`
	Status     string `json:"status"`
	CreateTime int64  `json:"createTime"`
	UpdateTime int64  `json:"updateTime"`
	Stats      Stats  `json:"stats"`
}

type Stats struct {
	NumFailed          int64 `json:"numFailed"`
	NumReadFailed      int64 `json:"numReadFailed"`
	TotalCount         int64 `json:"totalCount"`
	TotalBatches       int64 `json:"totalBatches"`
	TotalLatency       int64 `json:"totalLatency"`
	TotalReqTime       int64 `json:"totalReqTime"`
	TotalBytes         int64 `json:"totalBytes"`
	TotalImportedBytes int64 `json:"totalImportedBytes"`
}

type GetManyImportTaskRequest struct {
	Address  string `form:"address"`
	Username string `form:"username"`
	Port     string `form:"port"`
	Page     int    `form:"page,default=1"`
	PageSize int    `form:"pageSize,default=100"`
}

type GetManyImportTaskData struct {
	Total int64               `json:"total"`
	List  []GetImportTaskData `json:"list"`
}

type GetManyImportTaskLogRequest struct {
	Id     string `path:"id" validate:"required"`
	File   string `form:"file" validate:"required"`
	Offset int64  `form:"offset" validate:"min=0"`
	Limit  int64  `form:"limit" validate:"min=1"`
}

type GetManyImportTaskLogData struct {
	Logs []string `json:"logs"`
}

type GetImportTaskLogNamesRequest struct {
	Id string `path:"id" validate:"required""`
}

type GetImportTaskLogNamesData struct {
	Names []string `json:"names"`
}

type DeleteImportTaskRequest struct {
	Id       string `path:"id"`
	Address  string `form:"address"`
	Username string `form:"username"`
	Port     string `form:"port"`
}

type StopImportTaskRequest struct {
	Id       string `path:"id"`
	Address  string `form:"address"`
	Port     string `form:"port"`
	Username string `form:"username"`
}

type DownloadLogsRequest struct {
	Id   string `path:"id" validate:"required"`
	Name string `form:"name" validate:"required"`
}

type DownloadLogsData struct {
	Data string `json:"data"`
}

type DownloadConfigsRequest struct {
	Id string `path:"id" validate:"required"`
}

type DownloadConfigsData struct {
	Data string `json:"data"`
}
