[
  {
    "path": "admin",
    "file_name": "Authentication",
    "statements": [
      "CREATE USER IF NOT EXISTS user1 WITH PASSWORD 'nebula1';\nCREATE SPACE IF NOT EXISTS root_space(vid_type=int);\nUSE root_space;",
      "CREATE USER IF NOT EXISTS user1 WITH PASSWORD 'nebula1';\nCREATE USER IF NOT EXISTS user2 WITH PASSWORD 'nebula2';\nCREATE SPACE IF NOT EXISTS root_space(vid_type=int);\nUSE root_space;"
    ]
  },
  {
    "path": "admin",
    "file_name": "Hosts",
    "statements": [
      "CREATE SPACE space_specify_vid_type(partition_num=1, replica_factor=1, vid_type=FIXED_STRING(8));\nDROP SPACE space_specify_vid_type"
    ]
  },
  {
    "path": "admin",
    "file_name": "Sessions",
    "statements": [
      "CREATE USER user1 WITH PASSWORD 'nebula1';\nCREATE SPACE IF NOT EXISTS s1(vid_type=int);\nUSE s1;",
      "CREATE USER IF NOT EXISTS user1 WITH PASSWORD 'nebula1';\nCREATE USER IF NOT EXISTS user2 WITH PASSWORD 'nebula2';\nCREATE SPACE IF NOT EXISTS root_space(vid_type=int);\nUSE root_space;"
    ]
  },
  {
    "path": "aggregate",
    "file_name": "Agg",
    "statements": [
      "YIELD COUNT(*), 1+1",
      "YIELD COUNT(CASE WHEN null THEN null ELSE 1 END) AS nulls",
      "YIELD COUNT(*)+1 ,1+2 ,(INT)abs(count(2))",
      "YIELD count(null) AS v1,\n      avg(null) AS v2,\n      sum(null) AS v3,\n      std(null) AS v4,\n      min(null) AS v5,\n      max(null) AS v6,\n      bit_and(null) AS v9,\n      bit_or(null) AS v10,\n      bit_xor(null) AS v11",
      "YIELD 3 AS x | YIELD case COUNT($-.x) == 1 when true THEN 1 ELSE 0 END as a",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD COUNT(*)",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD COUNT(*)",
      "GO 1 to 3 STEPS FROM \"Tony Parker\" OVER serve BIDIRECT YIELD DISTINCT id($$) AS dst | YIELD COUNT(*)",
      "MATCH (v:player) RETURN COUNT(*)",
      "UNWIND [1,2,NULL] AS a\nRETURN COUNT(*), COUNT(a)",
      "UNWIND [1,2,NULL] AS a\nRETURN SUM(a), AVG(a), MIN(a), MAX(a), COLLECT(a)",
      "UNWIND [1,2,NULL,2] AS a\nRETURN COLLECT(a), COLLECT(DISTINCT a)",
      "UNWIND [NULL,NULL,NULL] AS a\nRETURN SUM(a), AVG(a), MIN(a), MAX(a), COLLECT(a), COLLECT(DISTINCT a)",
      "MATCH (v:player)-[e:like]-\u003e(v2) WHERE id(v) IN [\"Tony Parker\", \"Tim Duncan\", \"LaMarcus Aldridge\"]\nRETURN v, COUNT(*), COUNT(v2), COUNT(DISTINCT v2), MIN(v2.player.age), MAX(e.likeness), SUM(e.likeness), COLLECT(v2), COLLECT(DISTINCT v2)\nORDER BY v",
      "MATCH (v:player)-[e:like*1..3]-\u003e(v2)-[e2:like]-\u003e(v3) WHERE id(v) IN [\"Tony Parker\", \"Tim Duncan\", \"LaMarcus Aldridge\"]\nRETURN v, v2, COUNT(*), COUNT(id(v3)), COUNT(DISTINCT id(v3)), MIN(v3.player.age), MAX(e2.likeness), SUM(e2.likeness), COLLECT(id(v3)), COLLECT(DISTINCT id(v3))\nORDER BY v",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD count(*) AS count",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD DISTINCT count(*) AS count where $-.age \u003e 40",
      "$var=GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age;\nYIELD count($var.dst) AS count",
      "$var=GO FROM \"Tim Duncan\" OVER like YIELD DISTINCT like._dst AS dst, $$.player.age AS age;\nYIELD count($var.dst) AS count where $var.age \u003e 40",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| GROUP BY $-.dst YIELD $-.dst AS dst, avg(distinct $-.age) AS age",
      "$var=GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| GROUP BY $-.dst YIELD $-.dst AS dst, avg(distinct $-.age) AS age",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| GROUP BY $-.dst YIELD $-.dst AS dst, avg(distinct $-.age) AS age",
      "$var=GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age;\nYIELD DISTINCT $var.dst AS dst, avg(distinct $var.age) AS age",
      "GO 2 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst as dst,like._src AS src, $$.player.age AS age\n| GROUP BY $-.dst YIELD $-.dst AS dst,collect_set($-.src) AS src,collect($-.age) AS age",
      "$var=GO 2 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst as dst,like._src AS src, $$.player.age AS age;\nYIELD $var.dst AS dst,collect_set($var.src) AS src,collect($var.age) AS age",
      "GO FROM 'Aron Baynes', 'Tracy McGrady' OVER serve\n   YIELD $$.team.name AS name,\n         serve._dst AS id,\n         serve.start_year AS start_year,\n         serve.end_year AS end_year\n   | GROUP BY $-.name, $-.start_year\n     YIELD $-.name AS teamName,\n           $-.start_year AS start_year,\n           MAX($-.start_year),\n           MIN($-.end_year),\n           AVG($-.end_year) AS avg_end_year,\n           STD($-.end_year) AS std_end_year,\n           COUNT($-.id)",
      "GO FROM \"Marco Belinelli\" OVER serve\n   YIELD $$.team.name AS name,\n   serve._dst AS id,\n   serve.start_year AS start_year,\n   serve.end_year AS end_year\n| GROUP BY $-.start_year\n  YIELD COUNT($-.id),\n        $-.start_year AS start_year,\n        AVG($-.end_year) as avg",
      "GO FROM 'Carmelo Anthony', 'Dwyane Wade' OVER like\n   YIELD $$.player.name AS name,\n         $$.player.age AS dst_age,\n         $$.player.age AS src_age,\n         like.likeness AS likeness\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM($-.dst_age) AS sum_dst_age,\n           AVG($-.dst_age) AS avg_dst_age,\n           MAX($-.src_age) AS max_src_age,\n           MIN($-.src_age) AS min_src_age,\n           BIT_AND(1) AS bit_and,\n           BIT_OR(2) AS bit_or,\n           BIT_XOR(3) AS bit_xor,\n           COUNT($-.likeness),\n           COUNT(DISTINCT $-.likeness)",
      "GO FROM 'Carmelo Anthony', 'Dwyane Wade' OVER like\n   YIELD $$.player.name AS name,\n         $$.player.age AS dst_age,\n        $$.player.age AS src_age,\n        like.likeness AS likeness\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM($-.dst_age) AS sum_dst_age,\n           AVG($-.dst_age) AS avg_dst_age,\n           MAX($-.src_age) AS max_src_age,\n           MIN($-.src_age) AS min_src_age,\n           BIT_AND(1) AS bit_and,\n           BIT_OR(2) AS bit_or,\n           BIT_XOR(3) AS bit_xor,\n           COUNT($-.likeness)",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst as dst\n   | GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == 'Tim Duncan' as following\n   | GROUP BY $-.dst\n     YIELD $-.dst AS dst, BIT_OR($-.following) AS following",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst as dst\n   | GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == 'Tim Duncan' as following\n   | GROUP BY $-.dst\n     YIELD $-.dst AS dst,\n           BIT_OR(case when $-.following==true then 1 else 0 end) AS following",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst as dst\n   | GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == 'Tim Duncan' as following\n   | GROUP BY $-.dst\n     YIELD $-.dst AS dst,\n           BIT_AND($-.following) AS following",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst as dst\n   | GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == 'Tim Duncan' as following\n   | GROUP BY $-.dst\n     YIELD $-.dst AS dst,\n           BIT_AND(case when $-.following==true then 1 else 0 end) AS following",
      "GO FROM 'Carmelo Anthony', 'Dwyane Wade' OVER like\n   YIELD $$.player.name AS name\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM(1.5) AS sum,\n           COUNT(*) AS count,\n           1+1 AS cal",
      "GO FROM 'Paul Gasol' OVER like\n   YIELD $$.player.age AS age,\n         like._dst AS id\n   | GROUP BY $-.id\n     YIELD $-.id AS id,\n           SUM($-.age) AS age\n     | GO FROM $-.id OVER serve\n       YIELD $$.team.name AS name,\n             $-.age AS sumAge",
      "$var=GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age;\nGROUP BY $var.age YIELD $var.age AS age, count($var.dst) AS count",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD $-.dst AS dst, 1+avg(distinct $-.age) AS age, abs(5) as abs",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| YIELD $-.dst AS dst, 1+avg(distinct $-.age) AS age where $-.age \u003e 40",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| GROUP BY $-.age+1 YIELD (INT)($-.age+1) AS age, 1+count(distinct $-.dst) AS count",
      "$var=GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age;\nYIELD $var.dst AS dst, (INT)abs(1+avg(distinct $var.age)) AS age",
      "$var1=GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst;\n$var2=GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst AS dst;\nYIELD $var1.dst AS dst, count($var1.dst) AS count",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst, $$.player.age AS age\n| GROUP BY $-.dst\nYIELD\n  $-.dst AS dst,\n  (INT)(sum($-.age)/count($-.age))+avg(distinct $-.age+1)+1 AS statistics",
      "MATCH (v:player)-[:like]-(m:player)\nWITH m.player.age AS age, count(m.player.age) AS count\nRETURN age, count\nORDER BY age, count",
      "MATCH (v:player{name:\"Tim Duncan\"})-[:like]-\u003e(m)\nRETURN\n  m.player.name as dst,\n  (INT)(sum(m.player.age)/count(m.player.age))+avg(distinct m.player.age+1)+1 AS statistics",
      "MATCH (v:player {name:\"noexist\"})-[:like]-(m:player)\nWITH m.player.age AS age, count(m.player.age) AS count\nRETURN age, count\nORDER BY age, count",
      "MATCH (v:player {name:\"noexist\"})-[:like]-(m:player)\nRETURN count(m.player.age) AS count,\n       sum(m.player.age) AS sum,\n       avg(m.player.age) AS avg,\n       min(m.player.age) AS min,\n       max(m.player.age) AS max,\n       std(m.player.age) AS std,\n       bit_and(m.player.age) AS b1,\n       bit_or(m.player.age) AS b2,\n       bit_xor(m.player.age) AS b3",
      "UNWIND [1,2,3] AS d RETURN  1 IN COLLECT(d) AS b",
      "UNWIND [1,2,3] AS d RETURN ANY(l IN COLLECT(d) WHERE l==1) AS b",
      "match (m:player) where id(m) == 'Tim Duncan'\nreturn {name1:m.player.name, name2:collect({name:m.player.name})};",
      "match (m:player) where id(m) == 'Tim Duncan'\nmatch (m)\u003c--(e)\nreturn {name:m.player.name, start:collect({name:e.player.age})};",
      "match (v:player{name:\"Tim Duncan\"})--(n:team) return [n in collect(v.player.age) where n\u003e40| n] as a",
      "GO FROM 'noexist' OVER like\n   YIELD $$.player.name AS name\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM(1.5) AS sum,\n           COUNT(*) AS count\n          | ORDER BY $-.sum\n          | LIMIT 2",
      "GO FROM 'noexist' OVER serve\n    YIELD $^.player.name as name,\n          serve.start_year as start,\n          $$.team.name as team\n    | YIELD $-.name as name\n      WHERE $-.start \u003e 20000\n      | GROUP BY $-.name\n        YIELD $-.name AS name",
      "GO FROM 'noexist' OVER serve\n    YIELD $^.player.name as name,\n          serve.start_year as start,\n          $$.team.name as team\n    | YIELD $-.name as name\n      WHERE $-.start \u003e 20000\n      | Limit 1",
      "GO FROM 'Carmelo Anthony', 'Dwyane Wade' OVER like\n   YIELD $$.player.name AS name\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM(1.5) AS sum,\n           COUNT(*) AS count\n      | ORDER BY $-.sum, $-.name",
      "GO FROM 'Carmelo Anthony', 'Dwyane Wade' OVER like\n   YIELD $$.player.name AS name\n   | GROUP BY $-.name\n     YIELD $-.name AS name,\n           SUM(1.5) AS sum,\n           COUNT(*) AS count\n      | ORDER BY $-.sum, $-.name  DESC\n      | LIMIT 2",
      "UNWIND [1,2,3,3] AS d RETURN sum(distinct d) AS sum",
      "GO FROM \"Tim Duncan\" OVER * YIELD dst(edge) as dst, $$.player.age as age\n  | GROUP BY $-.dst YIELD (sum($-.age)+3) as age\n  | ORDER BY $-.age"
    ]
  },
  {
    "path": "basic",
    "file_name": "Parser",
    "statements": [
      "SHOW  SPACES",
      "RETURN  1"
    ]
  },
  {
    "path": "basic",
    "file_name": "data",
    "statements": [
      "RETURN size(LIST[]) AS a, size(SET{}) AS b, size(MAP{}) AS c",
      "RETURN 1 IN LIST[] AS a, \"Tony\" IN SET{} AS b, \"a\" IN MAP{} AS c",
      "RETURN LIST[1, 2] AS a, SET{1, 2, 1} AS b, MAP{a:1, b:2} AS c, MAP{a: LIST[1,2], b: SET{1,2,1}, c: \"hee\"} AS d",
      "RETURN 1 IN LIST[1, 2] AS a, 2 IN SET{1, 2, 1} AS b, \"a\" IN MAP{a:1, b:2} AS c, MAP{a: LIST[1,2], b: SET{1,2,1}, c: \"hee\"}[\"b\"] AS d",
      "RETURN [1, 2] AS a, {1, 2, 1} AS b, {a:1, b:2} AS c",
      "RETURN 2 IN [1, 2] AS a, 2 IN {1, 2, 1} AS b, \"b\" IN MAP{a:1, b:2} AS c"
    ]
  },
  {
    "path": "ddl",
    "file_name": "Ddl",
    "statements": [
      "CREATE TAG A();",
      "CREATE TAG IF NOT EXISTS A(id int, name string);",
      "CREATE TAG  B(\n  id int NOT NULL DEFAULT 0+0 COMMENT \"primary key\",\n  name string NOT NULL,\n  createDate DATETIME, location geography(polygon),\n  isVisited bool COMMENT \"kHop search flag\",\n  nickName TIME DEFAULT time()\n  )\n  TTL_DURATION = 100, TTL_COL = \"id\", COMMENT = \"TAG B\";",
      "DESC TAG A;",
      "DESC TAG B;",
      "ALTER TAG B DROP (name)",
      "CREATE TAG INDEX idx_A_1 on A();",
      "CREATE TAG INDEX IF NOT EXISTS idx_A_3 on A();",
      "ALTER TAG B ADD (namex string)",
      "ALTER TAG B CHANGE (isVisited bool)",
      "CREATE TAG INDEX  idx_B_2 on B(id);",
      "DROP TAG INDEX IF EXISTS idx_B_4;",
      "CREATE TAG INDEX  idx_B_5 on B(createDate);",
      "CREATE TAG INDEX  idx_B_6 on B(location);",
      "CREATE TAG INDEX  idx_B_7 on B(isVisited);",
      "CREATE TAG INDEX idx_B_8 on B(nickName);",
      "CREATE TAG INDEX idx_B_9 on B(id, nickName, namex(1), createDate);",
      "CREATE TAG INDEX idx_B_10 on B(id, nickName, namex(1));",
      "CREATE TAG INDEX  idx_B_1 on B(isVisited, id, nickName, namex(1), createDate);",
      "CREATE EDGE E1();",
      "CREATE EDGE IF NOT EXISTS E1(id int, name string);",
      "CREATE EDGE  E2(\n  id int NOT NULL DEFAULT 0+0 COMMENT \"primary key\",\n  name string NOT NULL,\n  createDate DATETIME, location geography(polygon),\n  isVisited bool COMMENT \"kHop search flag\",\n  nickName TIME DEFAULT time()\n  )\n  TTL_DURATION = 100, TTL_COL = \"id\", COMMENT = \"EDGE E2\";",
      "DESC EDGE E1;",
      "DESC EDGE E2;",
      "ALTER EDGE E2 DROP (name)",
      "CREATE EDGE INDEX idx_E1_1 on E1();",
      "CREATE EDGE INDEX IF NOT EXISTS idx_E1_3 on E1();",
      "ALTER EDGE E2 ADD (namex string)",
      "ALTER EDGE E2 CHANGE (isVisited bool)",
      "CREATE EDGE INDEX  idx_E2_2 on E2(id);",
      "DROP EDGE INDEX IF EXISTS idx_E2_4;",
      "CREATE EDGE INDEX  idx_E2_5 on E2(createDate);",
      "CREATE EDGE INDEX  idx_E2_6 on E2(location);",
      "CREATE EDGE INDEX  idx_E2_7 on E2(isVisited);",
      "CREATE EDGE INDEX idx_E2_8 on E2(nickName);",
      "CREATE EDGE INDEX idx_E2_9 on E2(id, nickName, namex(1), createDate);",
      "CREATE EDGE INDEX idx_E2_10 on E2(id, nickName, namex(1));",
      "CREATE EDGE INDEX  idx_E2_1 on E2(isVisited, id, nickName, namex(1), createDate);"
    ]
  },
  {
    "path": "delete",
    "file_name": "DeleteEdge.IntVid",
    "statements": [
      "GO FROM hash(\"Zhangsan\"), hash(\"Jack\") OVER friend\nYIELD $^.person.name, friend.intimacy, friend._dst",
      "GO FROM hash(\"Zhangsan\"), hash(\"Lisi\") OVER schoolmate\nYIELD $^.person.name, schoolmate.likeness, schoolmate._dst",
      "GO FROM hash(\"Zhangsan\") OVER transfer\nYIELD $^.person.name,transfer._rank, transfer.money, transfer._dst",
      "DELETE EDGE friend hash(\"Zhangsan\")-\u003ehash(\"Lisi\")@15, hash(\"Jack\")-\u003ehash(\"Rose\")@13;",
      "DELETE EDGE schoolmate hash(\"Lisi\")-\u003ehash(\"Rose\")",
      "DELETE EDGE transfer hash(\"Zhangsan\")-\u003ehash(\"Lisi\")@1561013237",
      "GO FROM hash(\"Zhangsan\"), hash(\"Jack\") OVER friend\nYIELD $^.person.name, friend.intimacy, friend._dst",
      "GO FROM hash(\"Zhangsan\"), hash(\"Lisi\") OVER schoolmate\nYIELD $^.person.name, schoolmate.likeness, schoolmate._dst",
      "GO FROM hash(\"Zhangsan\") OVER transfer\nYIELD $^.person.name,transfer._rank, transfer.money, transfer._dst",
      "DELETE EDGE friend hash(\"Zhangsan\")-\u003ehash(\"Rose\"), hash(\"1008\")-\u003ehash(\"1009\")@17,hash(\"Zhangsan\")-\u003ehash(\"Lisi\")@15",
      "GO FROM hash(\"Zhangsan\"),hash(\"Jack\") OVER friend\nYIELD $^.person.name, friend.intimacy, friend._dst",
      "GO FROM hash(\"Zhangsan\") OVER friend\nYIELD $^.person.name, friend.intimacy, friend._rank, friend._dst",
      "DELETE EDGE friend hash(\"Zhangsan\")-\u003ehash(\"Lisi\");",
      "GO FROM hash(\"Zhangsan\") OVER friend\nYIELD $^.person.name, friend.intimacy, friend._rank, friend._dst",
      "GO FROM hash(\"Zhangsan\") OVER friend YIELD id($^) AS src, friend._rank AS rank, friend._dst AS dst\n| DELETE EDGE friend $-.src -\u003e $-.dst @ $-.rank;",
      "GO FROM hash(\"Zhangsan\") OVER friend\nYIELD $^.person.name, friend.intimacy, friend._rank, friend._dst",
      "GO FROM hash(\"Boris Diaw\") OVER like YIELD like._dst",
      "GO FROM hash(\"Boris Diaw\") OVER like\nYIELD like._src as src, like._dst as dst, like._rank as rank\n| DELETE EDGE like $-.src-\u003e$-.dst @ $-.rank",
      "GO FROM hash(\"Boris Diaw\") OVER like YIELD like._dst",
      "GO FROM hash(\"Russell Westbrook\") OVER like YIELD like._dst",
      "$var = GO FROM hash(\"Russell Westbrook\") OVER like YIELD\nlike._src as src, like._dst as dst, like._rank as rank;\nDELETE EDGE like $var.src -\u003e $var.dst @ $var.rank",
      "GO FROM hash(\"Russell Westbrook\") OVER like YIELD like._dst"
    ]
  },
  {
    "path": "delete",
    "file_name": "DeleteEdge",
    "statements": [
      "GO FROM \"Zhangsan\", \"Jack\" OVER friend\nYIELD $^.person.name, friend.intimacy, friend._dst",
      "GO FROM \"Zhangsan\", \"Lisi\" OVER schoolmate\nYIELD $^.person.name, schoolmate.likeness, schoolmate._dst",
      "GO FROM \"Zhangsan\" OVER transfer\nYIELD $^.person.name,transfer._rank, transfer.money, transfer._dst",
      "DELETE EDGE friend \"Zhangsan\"-\u003e\"Lisi\"@15, \"Jack\"-\u003e\"Rose\"@13;",
      "DELETE EDGE schoolmate \"Lisi\"-\u003e\"Rose\"",
      "DELETE EDGE transfer \"Zhangsan\"-\u003e\"Lisi\"@1561013237",
      "GO FROM \"Zhangsan\", \"Jack\" OVER friend\nYIELD $^.person.name, friend.intimacy, friend._dst",
      "GO FROM \"Zhangsan\", \"Lisi\" OVER schoolmate\nYIELD $^.person.name, schoolmate.likeness, schoolmate._dst",
      "GO FROM \"Zhangsan\" OVER transfer\nYIELD $^.person.name,transfer._rank, transfer.money, transfer._dst",
      "DELETE EDGE friend \"Zhangsan\"-\u003e\"Rose\", \"1008\"-\u003e\"1009\"@17,\"Zhangsan\"-\u003e\"Lisi\"@15",
      "GO FROM \"Zhangsan\", \"Jack\" OVER friend\nYIELD $^.person.name, friend.intimacy, friend._dst",
      "GO FROM \"Zhangsan\" OVER friend\nYIELD $^.person.name, friend.intimacy, friend._rank, friend._dst",
      "DELETE EDGE friend \"Zhangsan\"-\u003e\"Lisi\";",
      "GO FROM \"Zhangsan\" OVER friend\nYIELD $^.person.name, friend.intimacy, friend._rank, friend._dst",
      "GO FROM \"Zhangsan\" OVER friend YIELD id($^) AS src, friend._rank AS rank, friend._dst AS dst\n| DELETE EDGE friend $-.src -\u003e $-.dst @ $-.rank;",
      "GO FROM \"Zhangsan\" OVER friend\nYIELD $^.person.name, friend.intimacy, friend._rank, friend._dst",
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst",
      "GO FROM \"Boris Diaw\" OVER like\nYIELD like._src as src, like._dst as dst, like._rank as rank\n| DELETE EDGE like $-.src-\u003e$-.dst @ $-.rank",
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst",
      "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst",
      "$var = GO FROM \"Russell Westbrook\" OVER like YIELD\nlike._src as src, like._dst as dst, like._rank as rank;\nDELETE EDGE like $var.src -\u003e $var.dst @ $var.rank",
      "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    ]
  },
  {
    "path": "delete",
    "file_name": "DeleteTag.IntVid",
    "statements": [
      "FETCH PROP ON player hash(\"Tim Duncan\") YIELD player.name, player.age",
      "FETCH PROP ON bachelor hash(\"Tim Duncan\") YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "DELETE TAG player FROM hash(\"Tim Duncan\");",
      "FETCH PROP ON player hash(\"Tim Duncan\") YIELD player.name, player.age",
      "FETCH PROP ON bachelor hash(\"Tim Duncan\") YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\"  YIELD id(vertex) as id",
      "FETCH PROP ON player hash(\"Tim Duncan\") YIELD player.name, player.age",
      "FETCH PROP ON bachelor hash(\"Tim Duncan\") YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "DELETE TAG player, bachelor FROM hash(\"Tim Duncan\");",
      "FETCH PROP ON player hash(\"Tim Duncan\") YIELD player.name, player.age",
      "FETCH PROP ON bachelor hash(\"Tim Duncan\") YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "FETCH PROP ON player hash(\"Tim Duncan\") YIELD player.name, player.age",
      "FETCH PROP ON bachelor hash(\"Tim Duncan\") YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "DELETE TAG * FROM hash(\"Tim Duncan\");",
      "FETCH PROP ON player hash(\"Tim Duncan\") YIELD player.name, player.age",
      "FETCH PROP ON bachelor hash(\"Tim Duncan\") YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "FETCH PROP ON player hash(\"Tim Duncan\") YIELD player.name, player.age",
      "FETCH PROP ON player hash(\"Tony Parker\") YIELD player.name, player.age",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id",
      "DELETE TAG player FROM hash(\"Tim Duncan\"), hash(\"Tony Parker\");",
      "FETCH PROP ON player hash(\"Tim Duncan\") YIELD player.name, player.age",
      "FETCH PROP ON player hash(\"Tony Parker\") YIELD player.name, player.age",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id",
      "GO FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst as id",
      "FETCH PROP ON team hash(\"Spurs\") YIELD team.name",
      "GO FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id",
      "FETCH PROP ON team hash(\"Spurs\") YIELD team.name",
      "GO FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst as id",
      "FETCH PROP ON team hash(\"Spurs\") YIELD team.name",
      "$var = GO FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst as id; DELETE TAG team FROM $var.id",
      "FETCH PROP ON team hash(\"Spurs\") YIELD team.name"
    ]
  },
  {
    "path": "delete",
    "file_name": "DeleteTag",
    "statements": [
      "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age",
      "FETCH PROP ON bachelor \"Tim Duncan\" YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "DELETE TAG player FROm \"Tim Duncan\";",
      "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age",
      "FETCH PROP ON bachelor \"Tim Duncan\" YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age",
      "FETCH PROP ON bachelor \"Tim Duncan\" YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "DELETE TAG player, bachelor FROM \"Tim Duncan\";",
      "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age",
      "FETCH PROP ON bachelor \"Tim Duncan\" YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age",
      "FETCH PROP ON bachelor \"Tim Duncan\" YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "DELETE TAG * FROM \"Tim Duncan\";",
      "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age",
      "FETCH PROP ON bachelor \"Tim Duncan\" YIELD bachelor.name, bachelor.speciality",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age",
      "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id",
      "DELETE TAG player FROM \"Tim Duncan\", \"Tony Parker\";",
      "FETCH PROP ON player \"Tim Duncan\" YIELD player.name, player.age",
      "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age",
      "LOOKUP ON player WHERE player.name == \"Tim Duncan\" YIELD id(vertex) as id",
      "LOOKUP ON player WHERE player.name == \"Tony Parker\" YIELD id(vertex) as id",
      "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id",
      "FETCH PROP ON team \"Spurs\" YIELD team.name",
      "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id | DELETE TAG team FROM $-.id",
      "FETCH PROP ON team \"Spurs\" YIELD team.name",
      "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id",
      "FETCH PROP ON team \"Spurs\" YIELD team.name",
      "$var = GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst as id; DELETE TAG team FROM $var.id",
      "FETCH PROP ON team \"Spurs\" YIELD team.name"
    ]
  },
  {
    "path": "delete",
    "file_name": "DeleteVertex.IntVid",
    "statements": [
      "GO FROM hash(\"Boris Diaw\") OVER like YIELD like._dst",
      "GO FROM hash(\"Tony Parker\") OVER like REVERSELY YIELD like._dst",
      "FETCH PROP ON player hash(\"Tony Parker\") YIELD player.name, player.age",
      "FETCH PROP ON serve hash(\"Tony Parker\")-\u003ehash(\"Spurs\") YIELD serve.start_year, serve.end_year",
      "DELETE VERTEX hash(\"Tony Parker\") WITH EDGE;",
      "FETCH PROP ON player hash(\"Tony Parker\") YIELD player.name, player.age",
      "FETCH PROP ON serve hash(\"Tony Parker\")-\u003ehash(\"Spurs\") YIELD serve.start_year, serve.end_year",
      "GO FROM hash(\"Boris Diaw\") OVER like YIELD like._dst",
      "GO FROM hash(\"Tony Parker\") OVER like REVERSELY YIELD like._dst",
      "GO FROM hash(\"Chris Paul\") OVER like YIELD like._dst",
      "DELETE VERTEX hash(\"LeBron James\"), hash(\"Dwyane Wade\"), hash(\"Carmelo Anthony\") WITH EDGE;",
      "FETCH PROP ON player hash(\"Tony Parker\") YIELD player.name, player.age",
      "GO FROM hash(\"Tracy McGrady\") OVER like YIELD like._dst",
      "GO FROM hash(\"Grant Hill\") OVER like REVERSELY YIELD like._dst",
      "FETCH PROP ON player hash(\"Grant Hill\") YIELD player.name, player.age",
      "FETCH PROP ON serve hash(\"Grant Hill\")-\u003ehash(\"Pistons\") YIELD serve.start_year, serve.end_year",
      "DELETE VERTEX hash(\"Grant Hill\") WITH EDGE",
      "GO FROM hash(\"Tracy McGrady\") OVER like YIELD like._dst",
      "GO FROM hash(\"Grant Hill\") OVER like REVERSELY YIELD like._dst",
      "FETCH PROP ON player hash(\"Grant Hill\") YIELD player.name, player.age",
      "DELETE VERTEX hash(\"Non-existing Vertex\") WITH EDGE",
      "INSERT VERTEX player(name, age) VALUES hash(\"A Loner\"): (\"A Loner\", 0);\nDELETE VERTEX hash(\"A Loner\") WITH EDGE;",
      "FETCH PROP ON player hash(\"A Loner\") YIELD player.name, player.age",
      "DELETE VERTEX hash(\"Nobody\") WITH EDGE",
      "FETCH PROP ON player hash(\"Nobody\") YIELD player.name, player.age",
      "GO FROM hash(\"Boris Diaw\") OVER like YIELD like._dst",
      "GO FROM hash(\"Tony Parker\") OVER like YIELD like._dst",
      "GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst",
      "GO FROM hash(\"Boris Diaw\") OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE",
      "GO FROM hash(\"Boris Diaw\") OVER like YIELD like._dst",
      "GO FROM hash(\"Tony Parker\") OVER like YIELD like._dst",
      "GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst",
      "GO FROM hash(\"Russell Westbrook\") OVER like YIELD like._dst",
      "GO FROM hash(\"Paul George\") OVER like YIELD like._dst",
      "GO FROM hash(\"James Harden\") OVER like YIELD like._dst",
      "$var = GO FROM hash(\"Russell Westbrook\") OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE",
      "GO FROM hash(\"Russell Westbrook\") OVER like YIELD like._dst",
      "GO FROM hash(\"Paul George\") OVER like YIELD like._dst",
      "GO FROM hash(\"Russell Westbrook\") OVER like YIELD like._dst"
    ]
  },
  {
    "path": "delete",
    "file_name": "DeleteVertex",
    "statements": [
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst",
      "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst",
      "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age",
      "FETCH PROP ON serve \"Tony Parker\"-\u003e\"Spurs\" YIELD serve.start_year, serve.end_year",
      "DELETE VERTEX \"Tony Parker\" WITH EDGE;",
      "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age",
      "FETCH PROP ON serve \"Tony Parker\"-\u003e\"Spurs\" YIELD serve.start_year, serve.end_year",
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst",
      "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst",
      "GO FROM \"Chris Paul\" OVER like YIELD like._dst",
      "DELETE VERTEX \"LeBron James\", \"Dwyane Wade\", \"Carmelo Anthony\" WITH EDGE;",
      "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age",
      "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst",
      "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst",
      "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age",
      "FETCH PROP ON serve \"Grant Hill\"-\u003e\"Pistons\" YIELD serve.start_year, serve.end_year",
      "DELETE VERTEX \"Grant Hill\" WITH EDGE",
      "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst",
      "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst",
      "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age",
      "DELETE VERTEX \"Non-existing Vertex\" WITH EDGE",
      "INSERT VERTEX player(name, age) VALUES \"A Loner\": (\"A Loner\", 0);\nDELETE VERTEX \"A Loner\" WITH EDGE;",
      "FETCH PROP ON player \"A Loner\" YIELD player.name, player.age",
      "DELETE VERTEX \"Nobody\" WITH EDGE",
      "FETCH PROP ON player \"Nobody\" YIELD player.name, player.age",
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst",
      "GO FROM \"Tony Parker\" OVER like YIELD like._dst",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst",
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | DELETE VERTEX $-.id WITH EDGE",
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst",
      "GO FROM \"Tony Parker\" OVER like YIELD like._dst",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst",
      "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst",
      "GO FROM \"Paul George\" OVER like YIELD like._dst",
      "GO FROM \"James Harden\" OVER like YIELD like._dst",
      "$var = GO FROM \"Russell Westbrook\" OVER like YIELD like._dst as id; DELETE VERTEX $var.id WITH EDGE",
      "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst",
      "GO FROM \"Paul George\" OVER like YIELD like._dst",
      "GO FROM \"Russell Westbrook\" OVER like YIELD like._dst"
    ]
  },
  {
    "path": "delete",
    "file_name": "DeleteVertexWithoutEdge",
    "statements": [
      "GO 1 STEP FROM 1 OVER e YIELD e._dst AS dst, $^.t.id as id;",
      "DELETE VERTEX 1 WITH EDGE;",
      "FETCH PROP ON t 1 yield vertex as v;",
      "FETCH PROP ON e 1-\u003e2 yield edge as e;",
      "GO 1 STEP FROM 1 OVER e YIELD e._dst AS dst, $^.t.id as id",
      "INSERT VERTEX t(id) VALUES 1:(1)",
      "GO 1 STEP FROM 1 OVER e YIELD e._dst AS dst, $^.t.id as id;",
      "GO 1 STEP FROM 1 OVER e YIELD e._dst AS a, $^.t.id AS id;",
      "DELETE VERTEX 1;",
      "FETCH PROP ON t 1 yield vertex as v;",
      "FETCH PROP ON e 1-\u003e2 yield edge as e;",
      "GO 1 STEP FROM 1 OVER e YIELD e._dst AS b, $^.t.id as id;",
      "INSERT VERTEX t(id) VALUES 1:(1)",
      "GO 1 STEP FROM 1 OVER e YIELD e._dst AS c, $^.t.id as id;"
    ]
  },
  {
    "path": "explain",
    "file_name": "ExplainAndProfile",
    "statements": [
      "\u003cexplain\u003e FORMAT=\"\u003cformat\u003e\" YIELD 1",
      "\u003cexplain\u003e FORMAT=\"\u003cformat\u003e\" {\n  $var=YIELD 1 AS a;\n  YIELD $var.*;\n}",
      "\u003cexplain\u003e FORMAT=\"\u003cformat\u003e\" {\n  YIELD 1 AS a;\n}"
    ]
  },
  {
    "path": "expression",
    "file_name": "Attribute",
    "statements": [
      "RETURN date(\"2021-07-19\").month AS month",
      "RETURN date(\"2021-07-19\").MoNth AS month",
      "RETURN time(\"02:59:40\").minute AS minute",
      "RETURN time(\"02:59:40\").MinUte AS minute",
      "RETURN datetime(\"2021-07-19T02:59:40\").minute AS minute",
      "RETURN datetime(\"2021-07-19T02:59:40\").mInutE AS minute",
      "RETURN {k1 : 1, k2: true}.k1 AS k",
      "RETURN {k1 : 1, k2: true}.K1 AS k",
      "MATCH (v) WHERE id(v) == 'Tim Duncan' RETURN v.player.name",
      "MATCH (v) WHERE id(v) == 'Tim Duncan' RETURN v.player.Name",
      "MATCH (v)-[e:like]-\u003e() WHERE id(v) == 'Tim Duncan' RETURN e.likeness",
      "MATCH (v)-[e:like]-\u003e() WHERE id(v) == 'Tim Duncan' RETURN e.Likeness",
      "RETURN date(\"2021-07-19\").not_exists_attr AS not_exists_attr",
      "RETURN time(\"02:59:40\").not_exists_attr AS not_exists_attr",
      "RETURN datetime(\"2021-07-19T02:59:40\").not_exists_attr AS not_exists_attr",
      "RETURN {k1 : 1, k2: true}.not_exists_attr AS not_exists_attr",
      "MATCH (v) WHERE id(v) == 'Tim Duncan' RETURN v.player.not_exists_attr",
      "MATCH (v)-[e:like]-\u003e() WHERE id(v) == 'Tim Duncan' RETURN e.not_exists_attr",
      "MATCH (v) WHERE id(v) == 'Tim Duncan' RETURN v.name.not_exists_attr",
      "MATCH (v) WHERE id(v) == 'Tim Duncan' RETURN v.player.name.test"
    ]
  },
  {
    "path": "expression",
    "file_name": "Attribute1",
    "statements": [
      "MATCH p0 = (v0)-[e0]-\u003e()\nWHERE id(v0) in [1,2,3,4,5,6,7,8,9,10]\nUNWIND nodes(p0) AS ua0\nwith ua0\nwhere ua0.Label_5.Label_5_7_Bool\nreturn count(*)",
      "MATCH p0 = (v0)-[e0]-\u003e()\nWHERE id(v0) in [1,2,3,4,5,6,7,8,9,10]\nUNWIND nodes(p0) AS ua0\nwith ua0\nwhere ua0.Label_5.Label_5_7_Bool == true\nreturn count(*)"
    ]
  },
  {
    "path": "expression",
    "file_name": "BugFixWithngdata",
    "statements": [
      "MATCH (v0:Label_0)-[e0]-\u003e()-[e1*1..1]-\u003e(v1)\nWHERE (id(v0) == 11) AND (v1.Label_6.Label_6_400_Int == v1.Label_6.Label_6_500_Int)\nRETURN count(*)"
    ]
  },
  {
    "path": "expression",
    "file_name": "Case",
    "statements": [
      "YIELD CASE 2 + 3 WHEN 4 THEN 0 WHEN 5 THEN 1 ELSE 2 END AS r",
      "YIELD CASE true WHEN false THEN 0 END AS r",
      "YIELD CASE WHEN 4 \u003e 5 THEN 0 WHEN 3+4==7 THEN 1 ELSE 2 END AS r",
      "YIELD CASE WHEN false THEN 0 ELSE 1 END AS r",
      "YIELD CASE WHEN null THEN 0 ELSE 1 END AS r",
      "YIELD 3 \u003e 5 ? 0 : 1 AS r",
      "YIELD true ? \"yes\" : \"no\" AS r",
      "GO FROM \"Jonathon Simmons\" OVER serve\nYIELD $$.team.name AS name,\n      CASE serve.end_year \u003e 2017 WHEN true THEN \"ok\" ELSE \"no\" END AS b",
      "GO FROM \"Boris Diaw\" OVER serve\nYIELD $^.player.name AS player_name,\n      serve.start_year AS start_year,\n      serve.end_year AS end_year,\n      CASE serve.start_year \u003e 2006 WHEN true THEN \"new\" ELSE \"old\" END AS b,\n      $$.team.name AS team_name",
      "GO FROM \"Rajon Rondo\" OVER serve\nWHERE CASE serve.start_year WHEN 2016 THEN true ELSE false END\nYIELD $^.player.name AS player_name,\n      serve.start_year AS start_year,\n      serve.end_year AS end_year,\n      $$.team.name AS team_name",
      "GO FROM \"Tim Duncan\" OVER serve\nYIELD $$.team.name AS name,\n      CASE WHEN serve.start_year \u003c 1998 THEN \"old\" ELSE \"young\" END AS b",
      "GO FROM \"Rajon Rondo\" OVER serve\nWHERE CASE WHEN serve.start_year \u003e 2016 THEN true ELSE false END\nYIELD $^.player.name AS player_name,\n      serve.start_year AS start_year,\n      serve.end_year AS end_year,\n      $$.team.name AS team_name",
      "GO FROM \"Tim Duncan\" OVER serve\nYIELD $$.team.name AS name,\n      serve.start_year \u003c 1998 ? \"old\" : \"young\" AS b",
      "GO FROM \"Rajon Rondo\" OVER serve\nWHERE serve.start_year \u003e 2016 ? true : false\nYIELD $^.player.name AS player_name,\n      serve.start_year AS start_year,\n      serve.end_year AS end_year,\n      $$.team.name AS team_name",
      "MATCH (v:player) WHERE CASE v.player.age \u003e 45 WHEN false THEN false ELSE true END\nRETURN v.player.name, v.player.age",
      "MATCH (v:player)\nWHERE v.player.age \u003e 43\nRETURN CASE WHEN v.player.age \u003e 46 THEN v.player.name WHEN v.player.age \u003e 45 THEN v.player.age ELSE \"nothing\" END AS r",
      "YIELD CASE 2 + 3\n      WHEN CASE 1 WHEN 1 THEN 5 ELSE 4 END THEN 0\n      WHEN 5 THEN 1\n      ELSE 2\n      END AS r",
      "YIELD CASE 2 + 3\n      WHEN 5 THEN CASE 1 WHEN 1 THEN 7 ELSE 4 END\n      ELSE 2\n      END AS r",
      "YIELD CASE 2 + 3\n      WHEN 3 THEN 7\n      ELSE CASE 9 WHEN 8 THEN 10 ELSE 11 END\n      END AS r",
      "YIELD CASE 3 \u003e 2 ? 1 : 0 WHEN 1 THEN 5 ELSE 4 END AS r",
      "YIELD CASE 1 WHEN true ? 1 : 0 THEN 5 ELSE 4 END AS r",
      "YIELD CASE 1 WHEN 1 THEN 7 \u003e 0 ? 6 : 9 ELSE 4 END AS r",
      "YIELD CASE 1 WHEN 2 THEN 6 ELSE false ? 4 : 9 END AS r",
      "YIELD CASE WHEN 2 \u003e 7\n      THEN false ? 3 : 8\n      ELSE CASE true WHEN false THEN 9 ELSE 11 END\n      END AS r",
      "YIELD CASE 3 WHEN 4 THEN 5 ELSE 6 END \u003e 11 ? 7 : CASE WHEN true THEN 8 ELSE 9 END AS r",
      "YIELD 8 \u003e 11 ? CASE WHEN true THEN 8 ELSE 9 END : CASE 14 WHEN 8+6 THEN 0 ELSE 1 END AS r",
      "YIELD CASE 3 WHEN 4 THEN 5 ELSE 6 END \u003e (3 \u003e 2 ? 8 : 9) ?\n      CASE WHEN true THEN 8 ELSE 9 END :\n      CASE 14 WHEN 8+6 THEN 0 ELSE 1 END AS r",
      "GO FROM \"Jonathon Simmons\" OVER serve\nYIELD $$.team.name AS name,\n      CASE serve.end_year \u003e 2017\n      WHEN true THEN 2017 \u003c 2020 ? \"ok\" : \"no\"\n      ELSE CASE WHEN false THEN \"good\" ELSE \"bad\" END\n      END AS b",
      "GO FROM \"Boris Diaw\" OVER serve\nYIELD $^.player.name AS player_name,\n      serve.start_year AS start_year,\n      serve.end_year AS end_year,\n      CASE serve.start_year \u003e 2006 ? false : true\n      WHEN true THEN \"new\" ELSE CASE WHEN serve.start_year != 2012 THEN \"old\"\n      WHEN serve.start_year \u003e 2009 THEN \"bad\" ELSE \"good\" END END AS b,\n      $$.team.name AS team_name",
      "YIELD CASE WHEN true THEN \"Tim Duncan\" ELSE \"ABC\" END AS a | GO FROM $-.a OVER like YIELD like._dst;",
      "match (a:player)-[e:like]-\u003e(b) with case when e.likeness \u003e 90 then e else {likeness:13} end as n return n.likeness;",
      "match (a:player)-[e:like]-\u003e(b) with properties(case when e.likeness \u003e 90 then e else {likeness:13} end) as n return n.likeness;"
    ]
  },
  {
    "path": "expression",
    "file_name": "Depth",
    "statements": [
      "YIELD 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +\n1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +\n1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +\n1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +\n1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +\n1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 AS result"
    ]
  },
  {
    "path": "expression",
    "file_name": "EndsWith",
    "statements": [
      "YIELD 'apple' ENDS WITH 'le'",
      "YIELD 'apple' ENDS WITH 'app'",
      "YIELD 'apple' ENDS WITH 'a'",
      "YIELD 'apple' ENDS WITH 'e'",
      "YIELD 'apple' ENDS WITH 'E'",
      "YIELD 'apple' ENDS WITH 'b'",
      "YIELD '123' ENDS WITH '3'",
      "YIELD 'apple' NOT ENDS WITH 'le'",
      "YIELD 'apple' NOT ENDS WITH 'app'",
      "YIELD 'apple' NOT ENDS WITH 'a'",
      "YIELD 'apple' NOT ENDS WITH 'e'",
      "YIELD 'apple' NOT ENDS WITH 'E'",
      "YIELD 'apple' NOT ENDS WITH 'b'",
      "YIELD '123' NOT ENDS WITH '3'",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst ENDS WITH 'Ginobili'\nYIELD $^.player.name",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT ENDS WITH 'Ginobili'\nYIELD $^.player.name"
    ]
  },
  {
    "path": "expression",
    "file_name": "FixedString",
    "statements": [
      "INSERT EDGE fixed_string_edge_1(c1) VALUES 1-\u003e2:(\"row\"), 1-\u003e3:(\"row\")",
      "GO from 1 over fixed_string_edge_1 where $$.fixed_string_tag_1.c1 == \"row\" yield $$.fixed_string_tag_1.c1 as c1",
      "GO from 1 over fixed_string_edge_1 where $^.fixed_string_tag_1.c1 == \"row\" yield $$.fixed_string_tag_1.c1 as c1",
      "GO from 1 over fixed_string_edge_1 where fixed_string_edge_1.c1 == \"row\" yield $$.fixed_string_tag_1.c1 as c1"
    ]
  },
  {
    "path": "expression",
    "file_name": "FunctionCall",
    "statements": [
      "YIELD sign(38) AS a, sign(-2) AS b, sign(0.421) AS c,\n      sign(-1.0) AS d, sign(0) AS e, sign(abs(-3)) AS f",
      "YIELD timestamp(\"2000-10-10T10:00:00\") AS a, date() AS b, time() AS c, datetime() AS d",
      "YIELD datetime('2019-03-02T22:00:30') as dt",
      "YIELD datetime('2019-03-02 22:00:30') as dt",
      "GO FROM \"Tim Duncan\" over like YIELD concat(like._src, $^.player.age, $$.player.name, like.likeness) AS A",
      "GO FROM \"Tim Duncan\" over like YIELD concat(like._src, $^.player.age, null, like.likeness) AS A",
      "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age \u003e 45\nRETURN  concat(a.player.name, c.team.name)",
      "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age \u003e 45\nRETURN  concat(a.player.name, \"hello\")",
      "GO FROM \"Tim Duncan\" over like YIELD concat_ws(\"-\",like._src, $^.player.age, $$.player.name, like.likeness) AS A",
      "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age \u003e 45\nRETURN concat_ws(\"@\",a.player.name, \"hello\", b.likeness, c.team.name) as result",
      "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age \u003e 45\nRETURN concat_ws(\"@\",a.player.name, NULL, \"hello\", b.likeness, c.team.name) as result",
      "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age \u003e 45\nRETURN concat_ws(1,a.player.name, NULL, \"hello\", b.likeness, c.team.name) as result",
      "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age \u003e 45\nRETURN concat_ws(NULL ,a.player.name, NULL, \"hello\", b.likeness, c.team.name) as result",
      "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age \u003e 45\nRETURN extract(a.player.name, \"\\\\w+\") as result",
      "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age \u003e 45\nRETURN extract(a.player.name, \"hello\") as result",
      "YIELD round(3.1415926, 9) as result",
      "YIELD round(3.1415926, 2) as result",
      "YIELD round(3.1415926, 3) as result",
      "YIELD round(3.14159265359, 0) as result",
      "YIELD round(35543.14159265359, -3) as result",
      "YIELD round(35543.14159265359, -5) as result"
    ]
  },
  {
    "path": "expression",
    "file_name": "In",
    "statements": [
      "YIELD 1 IN [1, 2, 3] AS r",
      "YIELD 0 IN [1, 2, 3] AS r",
      "YIELD 'hello' IN ['hello', 'world', 3, NULL] AS r",
      "YIELD 2 IN range(1, 3) AS r",
      "YIELD 2 IN [n IN range(1, 5) WHERE n \u003e 3 | n - 2] AS r",
      "YIELD 1 IN {1, 2, 3} AS r",
      "YIELD 0 IN {1, 2, 3, 1, 2} AS r",
      "YIELD 'hello' IN {'hello', 'world', 3} AS r",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst IN ['Tim Duncan', 'Danny Green']\nYIELD $$.player.name",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst IN ['Danny Green']\nYIELD like._dst",
      "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness IN [95,56,21]\nYIELD like._dst",
      "GO FROM 'Tony Parker' OVER like YIELD like._dst AS ID |\nGO FROM $-.ID OVER like WHERE like.likeness IN [95,56,21] YIELD like._dst",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst IN {'Tim Duncan', 'Danny Green'}\nYIELD $$.player.name",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst IN {'Danny Green'} YIELD like._dst",
      "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness IN {95,56,21,95,90}\nYIELD $$.player.name, like.likeness",
      "MATCH (v:player)\nWHERE \"Parker\" IN split(v.player.name, \" \")\nRETURN v.player.name",
      "MATCH (v:player)\nWHERE \"ing\" IN [n IN split(v.player.name, \"M\") WHERE true]\nRETURN v.player.name"
    ]
  },
  {
    "path": "expression",
    "file_name": "ListComprehension",
    "statements": [
      "YIELD [n IN range(1, 5) WHERE n \u003e 2 | n + 10] AS a",
      "YIELD [n IN [1, 2, 3, 4, 5] WHERE n \u003e 2] AS a",
      "YIELD tail([n IN range(1, 5) | 2 * n - 10]) AS a",
      "YIELD [n IN range(1, 3) WHERE true | n] AS r",
      "GO FROM \"Tony Parker\" OVER like\nWHERE like.likeness NOT IN [x IN [95, 100] | x + $$.player.age]\nYIELD like._dst AS id, like.likeness AS likeness",
      "MATCH p = (n:player{name:\"LeBron James\"})\u003c-[:like]-(m)\nRETURN [n IN nodes(p) WHERE n.player.name\nNOT STARTS WITH \"LeBron\" | n.player.age + 100] AS r",
      "MATCH p = (n:player{name:\"LeBron James\"})-[:like]-\u003e(m)\nRETURN [n IN nodes(p) | n.player.age + 100] AS r",
      "WITH [1, 2, 3, 4, 5, NULL] AS a, 1.3 AS b\nRETURN [n IN a WHERE n \u003e 2 + b | n + a[0]] AS r1",
      "YIELD [n IN NULL WHERE n \u003e 2 | n + 10] AS a",
      "UNWIND [1, 2, 3, 4, 5] AS a WITH a * 2 AS x\nRETURN [n in collect(x) WHERE n \u003e 5 | n + 1] AS l"
    ]
  },
  {
    "path": "expression",
    "file_name": "ListRangeSubscript",
    "statements": [
      "$var = YIELD 1 AS f, 3 AS t;\nYIELD [1, 2, 3][$var.f..$var.t] AS r;",
      "$var = YIELD 3 AS f, 1 AS t;\nYIELD [1, 2, 3][$var.f..$var.t] AS r;"
    ]
  },
  {
    "path": "expression",
    "file_name": "LogicalExpression",
    "statements": [
      "match (v0:player)-[e:serve]-\u003e(v1) where not ((e.start_year == 1997 xor e.end_year != 2016) or (e.start_year \u003e 1000 and e.end_year \u003c 3000)) return count(*)",
      "match (v0:player)-[e:serve]-\u003e(v1) where not ((e.start_year == 1997 xor e.end_year != 2016) and (e.start_year \u003e 1000 and e.end_year \u003c 3000)) return count(*)",
      "match (v0:player)-[e:serve]-\u003e(v1) with not ((e.start_year == 1997 xor e.end_year != 2016) and (e.start_year \u003e 1000 and e.end_year \u003c 3000)) AS a where a return count(*)",
      "WITH 1 AS a WHERE NOT((NOT TRUE) XOR TRUE) RETURN COUNT(*)",
      "WITH 1 AS a RETURN NOT((NOT TRUE) XOR TRUE) AS b"
    ]
  },
  {
    "path": "expression",
    "file_name": "NotIn",
    "statements": [
      "YIELD 1 NOT IN [1, 2, 3] AS r",
      "YIELD 0 NOT IN [1, 2, 3] AS r",
      "YIELD 'hello' NOT IN ['hello', 'world', 3] AS r",
      "YIELD 1 NOT IN {1, 2, 3} AS r",
      "YIELD 0 NOT IN {1, 2, 3} AS r",
      "YIELD 'hello' NOT IN {'hello', 'world', 3} AS r",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN ['Danny Green']\nYIELD $$.player.name",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN ['Danny Green']\nYIELD like._dst",
      "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN [95,56,21]\nYIELD $$.player.name, like.likeness",
      "$A = GO FROM 'Tony Parker' OVER like YIELD like._dst AS ID;\nGO FROM $A.ID OVER like WHERE like.likeness NOT IN [95,56,21]\nYIELD $^.player.name, $$.player.name, like.likeness",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN {'Danny Green'}\nYIELD $$.player.name",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT IN {'Danny Green'}\nYIELD like._dst",
      "GO FROM 'Tony Parker' OVER like\nWHERE like.likeness NOT IN {95,56,21}\nYIELD $$.player.name, like.likeness"
    ]
  },
  {
    "path": "expression",
    "file_name": "Null",
    "statements": [
      "RETURN NULL IS NULL AS value1, NULL == NULL AS value2, NULL != NULL AS value3, NULL \u003e= NULL AS value4,  NULL \u003c= NULL AS value5",
      "RETURN abs(NULL) AS value1, floor(NULL) AS value2, ceil(NULL) AS value3, round(NULL) AS value4, sqrt(NULL) AS value5",
      "RETURN cbrt(NULL) AS value1, exp(NULL) AS value4, exp2(NULL) AS value5",
      "RETURN log(NULL) AS value1, log2(NULL) AS value2, log10(NULL) AS value3, sin(NULL) AS value4, asin(NULL) AS value5",
      "RETURN cos(NULL) AS value1, acos(NULL) AS value2, tan(NULL) AS value3, atan(NULL) AS value4",
      "RETURN collect(NULL) AS value1, avg(NULL) AS value2, count(NULL) AS value3, max(NULL) AS value4",
      "RETURN min(NULL) AS value1, std(NULL) AS value2, sum(NULL) AS value3, bit_and(NULL) AS value4, bit_or(NULL,NULL) AS value5",
      "RETURN bit_xor(NULL) AS value1, size(NULL) AS value2, sign(NULL) AS value4, radians(NULL) AS value5"
    ]
  },
  {
    "path": "expression",
    "file_name": "Predicate",
    "statements": [
      "YIELD all(n IN range(1, 5) WHERE n \u003e 2) AS r",
      "YIELD any(n IN [1, 2, 3, 4, 5] WHERE n \u003e 2) AS r",
      "YIELD single(n IN range(1, 5) WHERE n == 3) AS r",
      "YIELD none(n IN range(1, 3) WHERE n == 0) AS r",
      "YIELD ALL(n in null WHERE TRUE) AS a, ANY(n in null WHERE TRUE) AS b, SINGLE(n in null WHERE TRUE) AS c, NONE(n in null WHERE TRUE) AS d",
      "WITH 1 AS a\nRETURN ALL(a IN [2, 3] WHERE a \u003e 1) AS r",
      "RETURN ALL(a IN [2, 3] WHERE a \u003e 2) AS r",
      "RETURN ALL(a IN [2, 3, NULL] WHERE a \u003e 0) AS r",
      "RETURN Any(a IN [2, 3] WHERE a \u003e 1) AS r",
      "RETURN Any(a IN [2, 3] WHERE a \u003e 3) AS r",
      "RETURN Any(a IN [2, 3, NULL] WHERE a \u003e 3) AS r",
      "RETURN Single(a IN [2, 3] WHERE a \u003e 4) AS r",
      "RETURN Single(a IN [2, 3, 4] WHERE a \u003e= 2) AS r",
      "RETURN Single(a IN [2, 3, 4] WHERE a == 3) AS r",
      "RETURN Single(a IN [2, 3, NULL] WHERE a == 3) AS r",
      "RETURN None(a IN [2, 3, NULL] WHERE a \u003e 1) AS r",
      "RETURN None(a IN [2, 3, 4] WHERE a \u003e 100) AS r",
      "RETURN None(a IN [2, 3, NULL] WHERE a \u003e 3) AS r",
      "GO FROM \"Tony Parker\" OVER like\nWHERE any(x IN [5,  10] WHERE like.likeness + $$.player.age + x \u003e 100)\nYIELD like._dst AS id, like.likeness AS likeness",
      "MATCH (n:bachelor) WHERE EXISTS(n['name']) return n AS bachelor",
      "MATCH(n:player) WHERE EXISTS(n['name'])\nRETURN n.player.name AS name ORDER BY name LIMIT 10",
      "MATCH(v:player)-[e:like|serve]-(v2) WHERE EXISTS(e['likeness']) RETURN DISTINCT v2",
      "MATCH (v:player) WHERE not exists(v.player.name) RETURN id(v)",
      "WITH {a : NULL, b : 1, c : false} AS m RETURN exists(m.a)",
      "MATCH(v:player{name:\"Tim Duncan\"})-[e:like|serve*2]-\u003e(v2)\nRETURN DISTINCT e, ALL(e IN e WHERE EXISTS(e['likeness']))",
      "MATCH p = (n:player{name:\"LeBron James\"})\u003c-[:like]-(m)\nRETURN\n  nodes(p)[0].player.name AS n1,\n  nodes(p)[1].player.name AS n2,\n  all(n IN nodes(p) WHERE n.player.name NOT STARTS WITH \"D\") AS b",
      "MATCH p = (n:player{name:\"LeBron James\"})-[:like]-\u003e(m)\nRETURN single(n IN nodes(p) WHERE n.player.age \u003e 40) AS b",
      "WITH [1, 2, 3, 4, 5, NULL] AS a, 1.3 AS b\nRETURN any(n IN a WHERE n \u003e 2 + b) AS r1",
      "YIELD single(n IN NULL WHERE n == 3) AS r",
      "UNWIND [1, 2, 3, 4, 5] AS a WITH a * 2 AS x  RETURN any(n in collect(x) WHERE n \u003e 5) AS myboo",
      "UNWIND [1, 2, 3, 4, 5] AS a WITH a * 2 AS x  RETURN All(n in collect(x) WHERE n \u003e 5) AS myboo",
      "UNWIND [1, 2, 3, 4, 5] AS a WITH a * 2 AS x RETURN single(n in collect(x) WHERE n \u003e 5) AS myboo",
      "UNWIND [1, 2, 3, 4, 5] AS a WITH a * 2 AS x RETURN None(n in collect(x) WHERE n \u003e 5) AS myboo"
    ]
  },
  {
    "path": "expression",
    "file_name": "Reduce",
    "statements": [
      "YIELD reduce(totalNum = 10, n IN range(1, 3) | totalNum + n) AS r",
      "YIELD reduce(totalNum = -4 * 5, n IN [1, 2] | totalNum + n * 2) AS r",
      "GO FROM \"Tony Parker\" OVER like\nWHERE like.likeness != reduce(totalNum = 5, n IN range(1, 3) | $$.player.age + totalNum + n)\nYIELD like._dst AS id, $$.player.age AS age, like.likeness AS likeness",
      "MATCH p = (n:player{name:\"LeBron James\"})\u003c-[:like]-(m)\nRETURN\n  nodes(p)[0].player.age AS age1,\n  nodes(p)[1].player.age AS age2,\n  reduce(totalAge = 100, n IN nodes(p) | totalAge + n.player.age) AS r",
      "MATCH p = (n:player{name:\"LeBron James\"})-[:like]-\u003e(m)\nRETURN nodes(p)[0].player.age AS age1,\n       nodes(p)[1].player.age AS age2,\n       reduce(x = 10, n IN nodes(p) | n.player.age - x) AS x",
      "WITH [1, 2, NULL] AS a\nRETURN reduce(x = 10, n IN a | n - x) AS x",
      "WITH [1, 2, 3] AS a, 2 AS b\nRETURN reduce(x = 10, n IN a | b*(n+x)) AS r1",
      "YIELD reduce(totalNum = 10, n IN NULL | totalNum + n) AS r",
      "UNWIND [1, 2, 3, 4, 5] AS a WITH a * 2 AS x\nRETURN reduce(totalNum = 10, n in collect(x) | totalNum + n * 2) AS total"
    ]
  },
  {
    "path": "expression",
    "file_name": "Regex",
    "statements": [
      "YIELD \"abcd\\xA3g1234efgh\\x49ijkl\" =~ \"\\\\w{4}\\xA3g12\\\\d*e\\\\w+\\x49\\\\w+\" AS r",
      "YIELD \"Tony Parker\" =~ \"T\\\\w+\\\\s\\\\w+\" AS r",
      "YIELD \"010-12345\" =~ \"\\\\d{3}\\\\-\\\\d{3,8}\" AS r",
      "YIELD \"test_space_128\" =~ \"[a-zA-Z_][0-9a-zA-Z_]{0,19}\" AS r",
      "YIELD \"2001-09-01 08:00:00\" =~ \"\\\\d+\\\\-0\\\\d?\\\\-\\\\d+\\\\s\\\\d+:00:\\\\d+\" AS r",
      "YIELD \"2019\" =~ \"\\\\d+\" AS r",
      "YIELD \"jack138tom发abc数据库烫烫烫\" =~ \"j\\\\w*\\\\d+\\\\w+\\u53d1[a-c]+\\u6570\\u636e\\u5e93[\\x70EB]+\" AS r",
      "YIELD \"a good person\" =~ \"a\\\\s\\\\w+\" AS r",
      "YIELD \"Trail Blazers\" =~ \"\\\\w+\" AS r",
      "YIELD \"Tony No.1\" =~ \"\\\\w+No\\\\.\\\\d+\" AS r",
      "GO FROM \"Tracy McGrady\" OVER like\nWHERE $$.player.name =~ \"\\\\w+\\\\s?.*\"\nYIELD $$.player.name AS name",
      "GO FROM \"Marco Belinelli\" OVER serve\nWHERE $$.team.name =~ \"\\\\d+\\\\w+\"\nYIELD $$.team.name AS name",
      "MATCH (v:player)\nWHERE v.player.name =~ \"T\\\\w+\\\\s?.*\"\nRETURN v.player.name AS name",
      "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"Tony\"\nRETURN v.player.name, v.player.name =~ \"T\\\\w+\\\\s?.*\" AS b"
    ]
  },
  {
    "path": "expression",
    "file_name": "RelationalExpr",
    "statements": [
      "YIELD [1\u003c2, 1\u003c=1, 3\u003e2, 2\u003e=2, 2==2, 3!=2, 4\u003c\u003e3] AS int_test",
      "YIELD [1.2\u003c2.4, 1.3\u003c=1.300000001, 3.1\u003e2.9, 2.3\u003e=2.11, 2.0==2.000000009,\n      3.3!=2.1, 4.2\u003c\u003e3.001] AS float_test",
      "YIELD [\"1\"\u003c'2', \"abc\"\u003c=\"Azz\", \"true\"\u003e'x', \"null\"\u003e=\"NULL\", \"abcd\"\u003c=\"abcde\",\n       \"aaa\"!=\"aaa\", \"\\nx\"\u003c\u003e\"\\nx\"] AS str_test",
      "YIELD [[1]\u003c[2,3,4.5], [1,\"a\"]\u003c=[1], [2,3,\"s\",true]\u003e[3], [2.0000000001,3,\"s\",true]\u003e=[2],\n       [1.9999999999,3,\"s\",true]\u003c\u003e[2,3,\"s\",true]] AS list_test",
      "YIELD [1\u003c2.4, 1\u003c=1.300000001, 3\u003e2.9, 2.3\u003e=2, 2==2.000000009, 3.3!=2, 4\u003c\u003e3.001, 4\u003c=[4],\n       true\u003c\u003e[true,true], 2.0==[1.9999999999999]] AS mixed_test",
      "YIELD [\"10\"\u003c2.4, '1'\u003c=1.300000001, 3\u003e\"2.9\", \"2.3\"\u003e=true, true==2.000000009, false!=2,\n       [1,3]\u003c\u003e3.001] AS non_numeric_test",
      "YIELD [\"10\"\u003cnull, null\u003c=1.300000001, 3\u003enull, null\u003e=true, null==null, null!=null, null\u003c\u003efalse,\n       null\u003c[2,3,null], [2,null]==[2,null], [2,null]\u003c\u003e[2,null,1]] AS null_test",
      "YIELD [1 in [1,2], 1 in [2,3], [1] in [2,[1]],\n       null in [1,2], null in [null], null in [1,null],\n       1 in [1,null], 1 in [null,2],\n       [1,null] in [1,null], [1,null] in [1], [1,null] in [null,[1,null]]] AS in_test",
      "YIELD [1 not in [1,2], 1 not in [2,3], [1] not in [2,[1]],\n       null not in [1,2], null not in [null], null not in [1,null],\n       1 not in [1,null], 1 not in [null,2],\n       [1,null] not in [1,null], [1,null] not in [1], [1,null] not in [null,[1,null]]] AS not_in_test",
      "GO FROM \"Tony Parker\" OVER like\nWHERE $$.player.age \u003e= 33.000000000010 OR like.likeness \u003c\u003e 90.0000000000001\nYIELD like._dst AS id, like.likeness AS likeness, $$.player.age AS age",
      "GO FROM \"Tony Parker\" OVER like\nWHERE $$.player.age \u003e= 33.000000000010 AND like.likeness == 90.0000000000001\nYIELD like._dst AS id, like.likeness AS likeness, $$.player.age AS age",
      "GO FROM \"Tony Parker\" OVER like\nWHERE $$.player.age \u003e= true OR like.likeness \u003c\u003e null OR $$.player.name\u003c[2,3,4] OR $$.player.name \u003e 23.3\nYIELD like._dst AS id, like.likeness AS likeness, $$.player.age AS age",
      "MATCH p = (n:player)\u003c-[e:like]-(m)\nWHERE n.player.age \u003e= 33 OR n.player.start_year \u003c= 2010.0\n      OR e.likeness \u003c\u003e 90 OR n.player.nonExistTag \u003c\u003e null\n      OR e.likeness \u003e= \"12\" OR n.player.age \u003c= true\nRETURN DISTINCT m.player.name AS player, m.player.age AS age\n       ORDER BY player, age",
      "MATCH p = (n:player)\u003c-[e:like]-(m)\nWHERE n.player.age \u003e= 33 OR n.player.name \u003c= \"2010.0\"\n      AND e.likeness \u003c\u003e 90 OR n.player.nonExistTag \u003c\u003e null\n      OR e.likeness \u003e= \"12\" OR n.player.age \u003c= true\nRETURN DISTINCT m.player.name AS player, m.player.age AS age\n       ORDER BY player, age",
      "MATCH p = (n:player)\u003c-[e:like]-(m)\nWHERE n.player.age \u003e= 33 AND n.player.name \u003c\u003e \"2010.0\"\n      AND e.likeness == 90 AND n.player.nonExistTag \u003c\u003e null\n      AND e.likeness \u003e= \"12\"\nRETURN n.player.name AS player, n.player.age AS age"
    ]
  },
  {
    "path": "expression",
    "file_name": "StartsWith",
    "statements": [
      "YIELD 'apple' STARTS WITH 'app'",
      "YIELD 'apple' STARTS WITH 'a'",
      "YIELD 'apple' STARTS WITH 'A'",
      "YIELD 'apple' STARTS WITH 'b'",
      "YIELD '123' STARTS WITH '1'",
      "YIELD 'apple' NOT STARTS WITH 'app'",
      "YIELD 'apple' NOT STARTS WITH 'a'",
      "YIELD 'apple' NOT STARTS WITH 'A'",
      "YIELD 'apple' NOT STARTS WITH 'b'",
      "YIELD '123' NOT STARTS WITH '1'",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst STARTS WITH 'LaMarcus'\nYIELD $^.player.name",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst STARTS WITH 'Obama'\nYIELD $^.player.name",
      "GO FROM 'Tony Parker' OVER like\nWHERE like._dst NOT STARTS WITH 'T'\nYIELD $^.player.name",
      "$A = GO FROM 'Tony Parker' OVER like YIELD like._dst AS ID;\nGO FROM $A.ID OVER like\nWHERE like.likeness NOT IN [95,56,21] AND $$.player.name NOT STARTS WITH 'Tony'\nYIELD $^.player.name, $$.player.name, like.likeness",
      "$A = GO FROM 'Tony Parker' OVER like YIELD like._dst AS ID;\nGO FROM $A.ID OVER like\nWHERE like.likeness NOT IN [95,56,21] AND $^.player.name NOT STARTS WITH 'LaMarcus'\nYIELD $^.player.name, $$.player.name, like.likeness"
    ]
  },
  {
    "path": "expression",
    "file_name": "TimeComparison",
    "statements": [
      "WITH duration(\u003clhs\u003e) as x, duration(\u003crhs\u003e) as d\nRETURN x \u003e d AS gt, x \u003c d AS lt, x == d AS eq, x != d AS ne,\nx \u003e= d AS ge, x \u003c= d AS le"
    ]
  },
  {
    "path": "expression",
    "file_name": "TimeComputation",
    "statements": [
      "WITH date('1984-10-11') as x, duration(\u003cmap\u003e) as d\nRETURN x + d AS sum, x - d AS diff",
      "RETURN date('1984-10-11') + duration(\u003cmap\u003e) AS sum, date('1984-10-11') - duration(\u003cmap\u003e) AS diff",
      "WITH time('12:31:14') as x, duration(\u003cmap\u003e) as d\nRETURN x + d AS sum, x - d AS diff",
      "RETURN time('12:31:14') + duration(\u003cmap\u003e) AS sum, time('12:31:14') - duration(\u003cmap\u003e) AS diff",
      "WITH datetime('1984-10-11T12:31:14') as x, duration(\u003cmap\u003e) as d\nRETURN x + d AS sum, x - d AS diff",
      "WITH  as x,  as d\nRETURN datetime('1984-10-11T12:31:14') + duration(\u003cmap\u003e) AS sum, datetime('1984-10-11T12:31:14') - duration(\u003cmap\u003e) AS diff",
      "WITH datetime('1984-10-11T12:31:14') as x, duration(\u003cmap\u003e) as d\nRETURN x + d AS sum, x - d AS diff",
      "RETURN datetime('1984-10-11T12:31:14') + duration(\u003cmap\u003e) AS sum, datetime('1984-10-11T12:31:14') - duration(\u003cmap\u003e) AS diff"
    ]
  },
  {
    "path": "expression",
    "file_name": "UnaryExpr",
    "statements": [
      "YIELD [1 IS NULL, 1.2 IS NULL, true IS NULL, [1, 2] IS NULL, null IS NULL] AS isNull",
      "YIELD [1 IS NOT NULL, 1.2 IS NOT NULL, true IS NOT NULL, [1, 2] IS NOT NULL, null IS NOT NULL] AS isNotNull",
      "RETURN [1 IS NULL, 1.2 IS NULL, true IS NULL, [1, 2] IS NULL, null IS NULL] AS isNull",
      "RETURN [1 IS NOT NULL, 1.2 IS NOT NULL, true IS NOT NULL, [1, 2] IS NOT NULL, null IS NOT NULL] AS isNotNull",
      "MATCH (v:player)\nWHERE v.player.name IS NULL AND v.player.age \u003c 0\nRETURN v",
      "MATCH (v:player)\nWHERE v.player.name IS NOT NULL AND v.player.age \u003e 34\nRETURN v"
    ]
  },
  {
    "path": "expression/function",
    "file_name": "Mathematical",
    "statements": [
      "return bit_and(5,bit_xor(4,bit_or(1,2))) as basic_test",
      "return [bit_and(5,null),bit_or(5,null),bit_xor(5,null)] as null_test"
    ]
  },
  {
    "path": "expression/function",
    "file_name": "TypeConversion",
    "statements": [
      "YIELD [toBoolean(true), toBoolean(false),\ntoBoolean(\"trUe\"), toBoolean(\"3.14\"), toBoolean(null)] AS yield_toBoolean",
      "UNWIND [true, false, \"trUe\", \"3.14\", null] AS b\nRETURN toBoolean(b) AS unwind_toBoolean",
      "YIELD [toFloat(1), toFloat(3.14),\ntoFloat(\"trUe\"), toFloat(\"3.14\"), toFloat(null)] AS yield_toFloat",
      "UNWIND [1, 3.14, \"trUe\", \"3.14\", null] AS b\nRETURN toFloat(b) AS unwind_toFloat",
      "YIELD [toInteger(1), toInteger(3.14),\ntoInteger(\"trUe\"), toInteger(\"3.14\"), toInteger(null), toInteger(\"1e3\"),\ntoInteger(\"1E3\"), toInteger(\"1.5E4\")] AS yield_toInteger",
      "UNWIND [1, 3.14, \"trUe\", \"3.14\", null] AS b\nRETURN toInteger(b) AS unwind_toInteger",
      "RETURN toSet(list[1,2,3,1,2]) AS list2set",
      "RETURN toSet(set{1,2,3,1,2}) AS set2set"
    ]
  },
  {
    "path": "fetch",
    "file_name": "FetchEdges.intVid",
    "statements": [
      "FETCH PROP ON serve hash('Boris Diaw') -\u003e hash('Hawks') YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve hash('Boris Diaw')-\u003ehash('Hawks') YIELD serve.start_year \u003e 2001, serve.end_year",
      "FETCH PROP ON serve hash(\"Boris Diaw\")-\u003ehash(\"Spurs\") YIELD edge as e",
      "FETCH PROP ON serve hash(\"Boris Diaw\")-\u003ehash(\"Not Exist\") YIELD edge as e",
      "FETCH PROP ON serve hash('Boris Diaw')-\u003ehash('Hawks')@0 YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON like hash(\"Tony Parker\")-\u003ehash(\"Tim Duncan\")@0 YIELD edge as e",
      "FETCH PROP ON serve hash('Boris Diaw')-\u003ehash('Hawks'),hash('Boris Diaw')-\u003ehash('Suns') YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve hash(\"Zion Williamson\")-\u003ehash(\"Spurs\"), hash(\"Boris Diaw\")-\u003ehash(\"Hawks\") YIELD serve.start_year",
      "GO FROM hash('Boris Diaw') OVER serve YIELD serve._src AS src, serve._dst AS dst |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year, serve.end_year",
      "$var = GO FROM hash('Boris Diaw') OVER serve YIELD serve._src AS src, serve._dst AS dst;\nFETCH PROP ON serve $var.src-\u003e$var.dst YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve uuid('Boris Diaw')-\u003euuid('Hawks') YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve uuid('Boris Diaw')-\u003euuid('Hawks') YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve uuid(\"Zion Williamson\")-\u003euuid(\"Spurs\") YIELD serve.start_year",
      "FETCH PROP ON serve hash('Boris Diaw')-\u003ehash('Hawks'),hash('Boris Diaw')-\u003ehash('Hawks') YIELD DISTINCT serve.start_year, serve.end_year",
      "GO FROM hash('Boris Diaw'),hash('Boris Diaw') OVER serve YIELD serve._src AS src, serve._dst AS dst |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD DISTINCT serve.start_year, serve.end_year",
      "GO FROM hash('Tim Duncan'),hash('Tony Parker') OVER serve YIELD serve._src AS src, serve._dst AS dst |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD DISTINCT serve._dst as dst",
      "$var = GO FROM hash('Boris Diaw'),hash('Boris Diaw') OVER serve YIELD serve._src AS src, serve._dst AS dst;\nFETCH PROP ON serve $var.src-\u003e$var.dst YIELD DISTINCT serve.start_year, serve.end_year",
      "FETCH PROP ON serve hash(\"Zion Williamson\")-\u003ehash(\"Spurs\") YIELD serve.start_year",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve._src AS src, serve._dst AS dst |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year, serve.end_year",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve._src AS src, serve._dst AS dst, serve.start_year as start |\nYIELD $-.src as src, $-.dst as dst WHERE $-.start \u003e 20000 |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year, serve.end_year",
      "GO FROM hash(\"Marco Belinelli\") OVER serve YIELD serve._src AS src, serve._dst AS dst, serve.start_year as start |\nYIELD $-.src as src, $-.dst as dst WHERE $-.start \u003e 20000 |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve hash('Boris Diaw')-\u003ehash(\"Spurs\") YIELD serve.start_year, serve.start_year",
      "FETCH PROP ON serve hash('Boris Diaw')-\u003ehash(\"Spurs\") YIELD serve._src, serve._dst, serve._rank",
      "FETCH PROP ON serve hash('Boris Diaw') -\u003e hash('Hawks') YIELD serve.start_year, serve.end_year, edge as relationship",
      "FETCH PROP ON serve hash(\"Boris Diaw\")-\u003ehash(\"Spurs\") YIELD edge as relationship, src(edge) as src_edge, dst(edge) as dst_edge, type(edge) as type, rank(edge) as rank",
      "FETCH PROP ON serve hash(\"Boris Diaw\")-\u003ehash(\"Not Exist\") YIELD src(edge) as a",
      "FETCH PROP ON like hash(\"Tony Parker\")-\u003ehash(\"Tim Duncan\"), hash(\"Grant Hill\") -\u003e hash(\"Tracy McGrady\") YIELD edge as relationship |\nYIELD properties($-.relationship)",
      "FETCH PROP ON like hash(\"Tony Parker\")-\u003ehash(\"Tim Duncan\"), hash(\"Grant Hill\") -\u003e hash(\"Tracy McGrady\") YIELD properties(edge) as properties",
      "FETCH PROP ON like hash(\"Tony Parker\")-\u003ehash(\"Tim Duncan\"), hash(\"Grant Hill\") -\u003e hash(\"Tracy McGrady\") YIELD edge as relationship |\nYIELD startNode($-.relationship) AS node",
      "FETCH PROP ON like hash(\"Tony Parker\")-\u003ehash(\"Tim Duncan\"), hash(\"Grant Hill\") -\u003e hash(\"Tracy McGrady\") YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node",
      "$var = GO FROM hash('Boris Diaw'),hash('Boris Diaw') OVER serve YIELD serve._src AS src, serve._dst AS dst;\nFETCH PROP ON serve $var.src-\u003e$var.dst YIELD DISTINCT serve.start_year, serve.end_year, edge as relationship"
    ]
  },
  {
    "path": "fetch",
    "file_name": "FetchEdges.strVid",
    "statements": [
      "FETCH PROP ON serve 'Boris Diaw' -\u003e 'Hawks' YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve \"Boris Diaw\"-\u003e\"Spurs\" YIELD edge as e",
      "FETCH PROP ON serve \"Boris Diaw\"-\u003e\"Not Exist\" YIELD edge as e",
      "FETCH PROP ON serve 'Boris Diaw'-\u003e'Hawks' YIELD serve.start_year \u003e 2001, serve.end_year",
      "FETCH PROP ON serve 'Boris Diaw'-\u003e'Hawks'@0 YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve 'Boris Diaw'-\u003e'Hawks' YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve 'Boris Diaw'-\u003e'Hawks'@0 YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve 'Boris Diaw'-\u003e'Hawks','Boris Diaw'-\u003e'Suns' YIELD serve.start_year, serve.end_year",
      "GO FROM 'Boris Diaw' OVER serve YIELD serve._src AS src, serve._dst AS dst | FETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year, serve.end_year",
      "$var = GO FROM 'Boris Diaw' OVER serve YIELD serve._src AS src, serve._dst AS dst;\nFETCH PROP ON serve $var.src-\u003e$var.dst YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve 'Boris Diaw'-\u003e'Hawks','Boris Diaw'-\u003e'Hawks' YIELD DISTINCT serve.start_year, serve.end_year",
      "GO FROM 'Boris Diaw','Boris Diaw' OVER serve YIELD serve._src AS src, serve._dst AS dst |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD DISTINCT serve.start_year, serve.end_year",
      "GO FROM 'Tim Duncan','Tony Parker' OVER serve YIELD serve._src AS src, serve._dst AS dst |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD DISTINCT serve._dst as dst",
      "$var = GO FROM 'Boris Diaw','Boris Diaw' OVER serve YIELD serve._src AS src, serve._dst AS dst;\nFETCH PROP ON serve $var.src-\u003e$var.dst YIELD DISTINCT serve.start_year, serve.end_year",
      "FETCH PROP ON serve \"Zion Williamson\"-\u003e\"Spurs\" YIELD serve.start_year",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve._src AS src, serve._dst AS dst |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year, serve.end_year",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve._src AS src, serve._dst AS dst, serve.start_year as start |\nYIELD $-.src as src, $-.dst as dst WHERE $-.start \u003e 20000 |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year, serve.end_year",
      "GO FROM \"Marco Belinelli\" OVER serve YIELD serve._src AS src, serve._dst AS dst, serve.start_year as start |\nYIELD $-.src as src, $-.dst as dst WHERE $-.start \u003e 20000 |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year, serve.end_year",
      "FETCH PROP ON serve \"Zion Williamson\"-\u003e\"Spurs\", \"Boris Diaw\"-\u003e\"Hawks\" YIELD serve.start_year",
      "FETCH PROP ON serve \"Boris Diaw\"-\u003e\"Spurs\" YIELD serve.start_year, serve.start_year",
      "FETCH PROP ON serve 'Boris Diaw'-\u003e\"Spurs\" YIELD serve._src, serve._dst, serve._rank",
      "FETCH PROP ON like \"Tony Parker\"-\u003e\"Tim Duncan\", \"Grant Hill\" -\u003e \"Tracy McGrady\" YIELD edge as e |\nYIELD properties($-.e)",
      "FETCH PROP ON like \"Tony Parker\"-\u003e\"Tim Duncan\", \"Grant Hill\" -\u003e \"Tracy McGrady\" YIELD edge as e |\nYIELD startNode($-.e) AS nodes",
      "FETCH PROP ON like \"Tony Parker\"-\u003e\"Tim Duncan\", \"Grant Hill\" -\u003e \"Tracy McGrady\" YIELD edge as e |\nYIELD endNode($-.e) AS nodes",
      "FETCH PROP ON serve 'Boris Diaw' -\u003e 'Hawks' YIELD serve.start_year, serve.end_year, edge as relationship",
      "FETCH PROP ON serve \"Boris Diaw\"-\u003e\"Spurs\" YIELD edge as relationship, src(edge) as src_edge, dst(edge) as dst_edge, type(edge) as type, rank(edge) as rank",
      "FETCH PROP ON serve \"Boris Diaw\"-\u003e\"Not Exist\" YIELD src(edge) as a",
      "FETCH PROP ON like \"Tony Parker\"-\u003e\"Tim Duncan\", \"Grant Hill\" -\u003e \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)",
      "FETCH PROP ON like \"Tony Parker\"-\u003e\"Tim Duncan\", \"Grant Hill\" -\u003e \"Tracy McGrady\" YIELD properties(edge) as properties",
      "FETCH PROP ON like \"Tony Parker\"-\u003e\"Tim Duncan\", \"Grant Hill\" -\u003e \"Tracy McGrady\" YIELD edge as relationship |\nYIELD startNode($-.relationship) AS node",
      "FETCH PROP ON like \"Tony Parker\"-\u003e\"Tim Duncan\", \"Grant Hill\" -\u003e \"Tracy McGrady\" YIELD edge as relationship |\nYIELD endNode($-.relationship) AS node",
      "$var = GO FROM 'Boris Diaw','Boris Diaw' OVER serve YIELD serve._src AS src, serve._dst AS dst;\nFETCH PROP ON serve $var.src-\u003e$var.dst YIELD DISTINCT serve.start_year, serve.end_year, edge as relationship"
    ]
  },
  {
    "path": "fetch",
    "file_name": "FetchEmpty",
    "statements": [
      "FETCH PROP ON * '1' YIELD vertex as node",
      "FETCH PROP ON zero_prop_tag_0 '1' YIELD vertex as node",
      "GO FROM \"1\" OVER zero_prop_edge YIELD zero_prop_edge._dst as id |\nFETCH PROP ON zero_prop_tag_0 $-.id YIELD vertex as node",
      "FETCH PROP ON zero_prop_edge \"1\"-\u003e\"2\" YIELD edge as e",
      "FETCH PROP ON zero_prop_edge \"1\"-\u003e\"3\" YIELD edge as e",
      "FETCH PROP ON zero_prop_edge \"101\"-\u003e\"102\" YIELD edge as e",
      "GO FROM \"1\" OVER zero_prop_edge YIELD zero_prop_edge._src as src, zero_prop_edge._dst as dst |\nFETCH PROP ON zero_prop_edge $-.src-\u003e$-.dst YIELD edge as e",
      "INSERT VERTEX tag_with_fixed_string(col1)\nVALUES\n  \"1\": (\"😀😀\"),\n  \"2\": (\"😂😂\"),\n  \"3\": (\"羊羊羊\"),\n  \"4\": (\"🐏🐏🐏\");",
      "FETCH PROP on tag_with_fixed_string \"1\" yield tag_with_fixed_string.col1 as col1",
      "FETCH PROP on tag_with_fixed_string \"2\" yield tag_with_fixed_string.col1 as col1",
      "FETCH PROP on tag_with_fixed_string \"3\" yield tag_with_fixed_string.col1 as col1",
      "FETCH PROP on tag_with_fixed_string \"4\" yield tag_with_fixed_string.col1 as col1",
      "INSERT EDGE edge_with_fixed_string(col1)\nVALUES\n  \"1\" -\u003e \"1\": (\"😀😀\"),\n  \"2\" -\u003e \"2\": (\"😂😂\"),\n  \"3\" -\u003e \"3\": (\"羊羊羊\"),\n  \"4\" -\u003e \"4\": (\"🐏🐏🐏\");",
      "FETCH PROP on edge_with_fixed_string \"1\" -\u003e \"1\" yield edge_with_fixed_string.col1 as col1",
      "FETCH PROP on edge_with_fixed_string \"2\" -\u003e \"2\" yield edge_with_fixed_string.col1 as col1",
      "FETCH PROP on edge_with_fixed_string \"3\" -\u003e \"3\" yield edge_with_fixed_string.col1 as col1",
      "FETCH PROP on edge_with_fixed_string \"4\" -\u003e \"4\" yield edge_with_fixed_string.col1 as col1"
    ]
  },
  {
    "path": "fetch",
    "file_name": "FetchVerticesProps.intVid",
    "statements": [
      "FETCH PROP ON player hash('Boris Diaw') YIELD player.name, player.age",
      "FETCH PROP ON player hash('Boris Diaw') YIELD player.name, player.age, player.age \u003e 30",
      "FETCH PROP ON player hash('Boris Diaw') YIELD vertex as node",
      "FETCH PROP ON player hash('NON EXIST VERTEX ID') yield player.name",
      "$var = GO FROM hash('Boris Diaw') over like YIELD like._dst as id;\nFETCH PROP ON player $var.id YIELD player.name as name, player.age |\nORDER BY $-.name",
      "FETCH PROP ON player hash('Boris Diaw'), hash('Boris Diaw') YIELD DISTINCT player.name, player.age",
      "FETCH PROP ON player hash('Boris Diaw'), hash('Boris Diaw') YIELD DISTINCT player.age",
      "FETCH PROP ON bachelor, team, player hash(\"Tim Duncan\"), hash(\"Boris Diaw\") YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "FETCH PROP ON player, team hash(\"Tim Duncan\"),hash(\"Boris Diaw\") YIELD player.name, team.name",
      "FETCH PROP ON player, team hash(\"Boris Diaw\"),hash(\"Boris Diaw\") YIELD player.name, team.name",
      "FETCH PROP ON team, player, bachelor hash(\"Boris Diaw\") YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "FETCH PROP ON player, team, bachelor hash(\"Tim Duncan\") YIELD player.name, team.name, bachelor.name",
      "GO FROM hash('Boris Diaw') over like YIELD like._dst as id |\nFETCH PROP ON player $-.id YIELD player.name, player.age",
      "GO FROM hash('NON EXIST VERTEX ID') over like YIELD like._dst as id |\nFETCH PROP ON player $-.id yield player.name",
      "GO FROM hash('NON EXIST VERTEX ID') over serve YIELD serve._dst as id, serve.start_year as start |\nYIELD $-.id as id WHERE $-.start \u003e 20000 |\nFETCH PROP ON player $-.id yield player.name",
      "GO FROM hash(\"Boris Diaw\") over like YIELD like._dst as id |\nFETCH PROP ON player, team, bachelor $-.id YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "GO FROM hash('Boris Diaw') over like YIELD like._dst as id |\nFETCH PROP ON player, bachelor $-.id YIELD player.name, player.age, bachelor.name, bachelor.speciality",
      "$var = GO FROM hash('Boris Diaw') over like YIELD like._dst as id; FETCH PROP ON player $var.id YIELD player.name, player.age",
      "$var = GO FROM hash(\"Boris Diaw\") over like YIELD like._dst as id;\nFETCH PROP ON player, team, bachelor $var.id YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "$var = GO FROM hash(\"Boris Diaw\") over like YIELD like._dst as id; FETCH PROP ON * $var.id YIELD player.name, team.name, bachelor.name",
      "FETCH PROP ON player uuid('Boris Diaw') YIELD player.name, player.age",
      "FETCH PROP ON player uuid('Boris Diaw')",
      "FETCH PROP ON * hash('NON EXIST VERTEX ID') yield player.name",
      "FETCH PROP ON * hash('NON EXIST VERTEX ID') YIELD vertex as node",
      "FETCH PROP ON * hash('Boris Diaw') yield player.name, player.age",
      "FETCH PROP ON * hash('Boris Diaw'), hash('Boris Diaw') yield player.name, player.age",
      "FETCH PROP ON * hash('Tim Duncan'), hash('Boris Diaw') yield player.name, bachelor.name",
      "YIELD hash('Boris Diaw') as id | FETCH PROP ON * $-.id yield player.name, player.age",
      "YIELD hash('Tim Duncan') as id | FETCH PROP ON * $-.id yield player.name, player.age, bachelor.name, bachelor.speciality",
      "FETCH PROP ON * hash('Tim Duncan') YIELD vertex as node",
      "FETCH PROP ON player hash('Boris Diaw'), hash('Tony Parker') YIELD vertex as node | YIELD id($-.node) as id",
      "FETCH PROP ON player hash('Tony Parker') YIELD player.name as Name, id(vertex) as id |\nGO FROM $-.id OVER like YIELD dst(edge) as dst",
      "FETCH PROP ON * hash('Boris Diaw') YIELD id(vertex)",
      "FETCH PROP ON * hash('Boris Diaw') YIELD id(vertex), player.age",
      "FETCH PROP ON * hash('Boris Diaw') YIELD id(vertex), player.age, vertex as node",
      "FETCH PROP ON * hash('Boris Diaw') YIELD vertex as node",
      "FETCH PROP ON * hash(\"Tim Duncan\") YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality, vertex as node",
      "GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst as id |\nFETCH PROP ON * $-.id YIELD VERTEX as node",
      "FETCH PROP ON * hash('NON EXIST VERTEX ID'), hash('Boris Diaw') yield player.name, id(vertex)",
      "FETCH PROP ON player hash('Tim Duncan') YIELD  id(vertex), properties(vertex).name as name, properties(vertex)",
      "FETCH PROP ON * hash('Tim Duncan') YIELD  id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    ]
  },
  {
    "path": "fetch",
    "file_name": "FetchVerticesProps.strVid",
    "statements": [
      "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age",
      "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.name",
      "FETCH PROP ON player 'Boris Diaw' YIELD player.name, player.age, player.age \u003e 30",
      "FETCH PROP ON bachelor 'Tim Duncan' YIELD vertex as node",
      "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node",
      "$var = GO FROM 'Boris Diaw' over like YIELD like._dst as id;\nFETCH PROP ON player $var.id YIELD player.name as name, player.age |\nORDER BY $-.name",
      "FETCH PROP ON player 'Boris Diaw', 'Boris Diaw' YIELD DISTINCT player.name, player.age",
      "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age",
      "FETCH PROP ON player 'Boris Diaw', 'Boris Diaw' YIELD DISTINCT player.age",
      "FETCH PROP ON bachelor, team, player \"Tim Duncan\", \"Boris Diaw\" YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "FETCH PROP ON player, team \"Tim Duncan\",\"Boris Diaw\" YIELD player.name, team.name",
      "FETCH PROP ON player, team \"Boris Diaw\",\"Boris Diaw\" YIELD player.name, team.name",
      "FETCH PROP ON team, player, bachelor \"Boris Diaw\" YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "FETCH PROP ON player, team, bachelor \"Tim Duncan\" YIELD player.name, team.name, bachelor.name",
      "FETCH PROP ON player 'NON EXIST VERTEX ID' yield player.name",
      "FETCH PROP ON player 'NON EXIST VERTEX ID', \"Boris Diaw\" yield player.name",
      "FETCH PROP ON * 'NON EXIST VERTEX ID' YIELD vertex as node",
      "FETCH PROP ON * 'Boris Diaw' yield player.name, player.age",
      "FETCH PROP ON * 'Boris Diaw' yield player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "FETCH PROP ON * \"Tim Duncan\" YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "FETCH PROP ON * 'NON EXIST VERTEX ID' yield player.name",
      "FETCH PROP ON * 'NON EXIST VERTEX ID', 'Boris Diaw' yield player.name",
      "FETCH PROP ON * 'Boris Diaw', 'Boris Diaw' yield player.name, player.age",
      "FETCH PROP ON * 'Tim Duncan', 'Boris Diaw' YIELD player.name, bachelor.name",
      "FETCH PROP ON * \"Tim Duncan\", \"Boris Diaw\" YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "GO FROM 'Boris Diaw' over like YIELD like._dst as id | FETCH PROP ON player $-.id YIELD player.name, player.age",
      "GO FROM 'Boris Diaw' over like YIELD like._dst as id |\nFETCH PROP ON player, bachelor $-.id YIELD player.name, player.age, bachelor.name, bachelor.speciality",
      "GO FROM \"Boris Diaw\" over like YIELD like._dst as id |\nFETCH PROP ON player, team, bachelor $-.id YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "GO FROM 'Boris Diaw' over like YIELD like._dst as id |\nFETCH PROP ON player, bachelor $-.id YIELD player.name, player.age, bachelor.name, bachelor.speciality",
      "GO FROM 'NON EXIST VERTEX ID' over like YIELD like._dst as id | FETCH PROP ON player $-.id yield player.name",
      "GO FROM 'NON EXIST VERTEX ID' over serve YIELD serve._dst as id, serve.start_year as start |\nYIELD $-.id as id WHERE $-.start \u003e 20000 |\nFETCH PROP ON player $-.id yield player.name",
      "YIELD 'Tim Duncan' as id | FETCH PROP ON * $-.id yield player.name, player.age, bachelor.name, bachelor.speciality",
      "GO FROM \"Boris Diaw\" over like YIELD like._dst as id |\nFETCH PROP ON * $-.id YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "$var = GO FROM 'Boris Diaw' over like YIELD like._dst as id; FETCH PROP ON player $var.id YIELD player.name, player.age",
      "$var = GO FROM \"Boris Diaw\" over like YIELD like._dst as id; FETCH PROP ON * $var.id YIELD player.name, team.name, bachelor.name",
      "$var = GO FROM \"Boris Diaw\" over like YIELD like._dst as id;\nFETCH PROP ON player, team, bachelor $var.id YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality",
      "FETCH PROP ON player 'Boris Diaw', 'Tony Parker' YIELD vertex as node | YIELD id($-.node) as id",
      "FETCH PROP ON player 'NON EXIST VERTEX ID' YIELD vertex as node | go from id($-.node) over like yield like._dst",
      "FETCH PROP ON player \"Tim Duncan\" YIELD vertex as node | go from id($-.node) over like yield like._dst",
      "FETCH PROP ON player \"Tim Duncan\", \"Yao Ming\" YIELD vertex as node | go from id($-.node) over like yield like._dst",
      "FETCH PROP ON player \"Tim Duncan\" yield player.name as id | go from $-.id over like yield like._dst",
      "$var = FETCH PROP ON player \"Tim Duncan\", \"Yao Ming\"; go from id($var.vertices_) over like yield like._dst",
      "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst",
      "FETCH PROP ON player 'Tony Parker' YIELD id(vertex) as id, player.name as Name |\nGO FROM $-.id OVER like YIELD dst(edge) as dst",
      "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex)",
      "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex), player.age",
      "FETCH PROP ON * 'Boris Diaw' YIELD id(vertex), player.age, vertex as node",
      "FETCH PROP ON * 'Boris Diaw' YIELD vertex as node",
      "FETCH PROP ON * \"Tim Duncan\" YIELD player.name, player.age, team.name, bachelor.name, bachelor.speciality, vertex as node",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\nFETCH PROP ON * $-.id YIELD vertex as node",
      "FETCH PROP ON * 'NON EXIST VERTEX ID', 'Boris Diaw' yield player.name, id(vertex)",
      "FETCH PROP ON player 'Tim Duncan' YIELD  id(vertex), properties(vertex).name as name, properties(vertex)",
      "FETCH PROP ON * 'Tim Duncan' YIELD  id(vertex), keys(vertex) as keys, tags(vertex) as tags_, properties(vertex) as props"
    ]
  },
  {
    "path": "fulltext_index",
    "file_name": "FulltextIndexScan",
    "statements": [
      "CREATE TAG tag2(prop1 string,prop2 string);\nCREATE EDGE edge2(prop1 string);",
      "CREATE FULLTEXT TAG INDEX nebula_index_tag2_prop1 on tag2(prop1);\nCREATE FULLTEXT TAG INDEX nebula_index_tag2_props on tag2(prop1, prop2);\nCREATE FULLTEXT EDGE INDEX nebula_index_edge2_prop1 on edge2(prop1);",
      "INSERT VERTEX tag2(prop1,prop2) VALUES \"1\":(\"abc\",\"nebula graph\");\nINSERT VERTEX tag2(prop1,prop2) VALUES \"2\":(\"abcde\",\"nebula-graph\");\nINSERT VERTEX tag2(prop1,prop2) VALUES \"3\":(\"bcd\",\"nebula database\");\nINSERT VERTEX tag2(prop1,prop2) VALUES \"4\":(\"zyx\",\"Nebula\");\nINSERT VERTEX tag2(prop1,prop2) VALUES \"5\":(\"cba\",\"neBula\");\nINSERT VERTEX tag2(prop1,prop2) VALUES \"6\":(\"abcxyz\",\"nebula graph\");\nINSERT VERTEX tag2(prop1,prop2) VALUES \"7\":(\"xyz\",\"nebula graph\");\nINSERT VERTEX tag2(prop1,prop2) VALUES \"8\":(\"123456\",\"nebula graph\");",
      "INSERT EDGE edge2(prop1) VALUES \"1\"-\u003e\"2\"@1:(\"一个可靠的分布式\");\nINSERT EDGE edge2(prop1) VALUES \"2\"-\u003e\"3\"@3:(\"性能高效的图数据库\");\nINSERT EDGE edge2(prop1) VALUES \"3\"-\u003e\"4\"@5:(\"高性能\");\nINSERT EDGE edge2(prop1) VALUES \"4\"-\u003e\"5\"@7:(\"高吞吐\");\nINSERT EDGE edge2(prop1) VALUES \"5\"-\u003e\"6\"@9:(\"低延时\");\nINSERT EDGE edge2(prop1) VALUES \"6\"-\u003e\"7\"@11:(\"易扩展\");\nINSERT EDGE edge2(prop1) VALUES \"7\"-\u003e\"8\"@13:(\"线性扩缩容\");\nINSERT EDGE edge2(prop1) VALUES \"8\"-\u003e\"1\"@15:(\"安全稳定\");",
      "LOOKUP ON tag2\nWHERE ES_QUERY(nebula_index_tag2_props, \"nebula\")\nYIELD\n  id(vertex) AS id,\n  tag2.prop1 AS prop1,\n  tag2.prop2 AS prop2",
      "LOOKUP ON tag2\nWHERE ES_QUERY(nebula_index_tag2_props, \"nebula\")\nYIELD\n  id(vertex) AS id,\n  tag2.prop1 AS prop1,\n  tag2.prop2 AS prop2 |\nLIMIT 3",
      "LOOKUP ON tag2\nWHERE ES_QUERY(nebula_index_tag2_props, \"nebula\")\nYIELD\n  id(vertex) AS id,\n  tag2.prop1 AS prop1,\n  tag2.prop2 AS prop2 |\nLIMIT 1, 3",
      "LOOKUP ON tag2\nWHERE ES_QUERY(nebula_index_tag2_props, \"nebula\")\nYIELD\n  id(vertex) AS id,\n  tag2.prop1 AS prop1,\n  tag2.prop2 AS prop2,\n  score() AS sc",
      "LOOKUP ON tag2\nWHERE ES_QUERY(nebula_index_tag2_props, \"nebula\")\nYIELD\n  id(vertex) AS id,\n  tag2.prop1 AS prop1,\n  tag2.prop2 AS prop2,\n  score() AS sc |\nLIMIT 3",
      "LOOKUP ON tag2\nWHERE ES_QUERY(nebula_index_tag2_props, \"nebula\")\nYIELD\n  id(vertex) AS id,\n  tag2.prop1 AS prop1,\n  tag2.prop2 AS prop2,\n  score() AS sc |\nLIMIT 1, 3",
      "LOOKUP ON edge2\nWHERE ES_QUERY(nebula_index_edge2_prop1, \"高\")\nYIELD\n  src(edge) AS src,\n  dst(edge) AS dst,\n  rank(edge) AS rank,\n  edge2.prop1 AS prop1",
      "LOOKUP ON edge2\nWHERE ES_QUERY(nebula_index_edge2_prop1, \"高\")\nYIELD\n  src(edge) AS src,\n  dst(edge) AS dst,\n  rank(edge) AS rank,\n  edge2.prop1 AS prop1 |\nLIMIT 2",
      "LOOKUP ON edge2\nWHERE ES_QUERY(nebula_index_edge2_prop1, \"高\")\nYIELD\n  src(edge) AS src,\n  dst(edge) AS dst,\n  rank(edge) AS rank,\n  edge2.prop1 AS prop1 |\nLIMIT 1, 2",
      "LOOKUP ON edge2\nWHERE ES_QUERY(nebula_index_edge2_prop1, \"高\")\nYIELD\n  src(edge) AS src,\n  dst(edge) AS dst,\n  rank(edge) AS rank,\n  edge2.prop1 AS prop1,\n  score() AS sc",
      "LOOKUP ON edge2\nWHERE ES_QUERY(nebula_index_edge2_prop1, \"高\")\nYIELD\n  src(edge) AS src,\n  dst(edge) AS dst,\n  rank(edge) AS rank,\n  edge2.prop1 AS prop1,\n  score() AS sc |\nLIMIT 2",
      "LOOKUP ON edge2\nWHERE ES_QUERY(nebula_index_edge2_prop1, \"高\")\nYIELD\n  src(edge) AS src,\n  dst(edge) AS dst,\n  rank(edge) AS rank,\n  edge2.prop1 AS prop1,\n  score() AS sc |\nLIMIT 1,2"
    ]
  },
  {
    "path": "fulltext_index",
    "file_name": "FultextIndexDDL",
    "statements": [
      "CREATE TAG ddl_tag(prop1 string,prop2 fixed_string(20),prop3 int);\nCREATE EDGE ddl_edge(prop1 string,prop2 float);",
      "CREATE FULLTEXT TAG INDEX nebula_index_ddl_tag_prop1 on ddl_tag(prop1);",
      "CREATE FULLTEXT TAG INDEX nebula_index_ddl_tag_prop2 on ddl_tag(prop2);",
      "SHOW FULLTEXT INDEXES;",
      "DROP FULLTEXT INDEX nebula_index_ddl_tag_prop1;",
      "DROP FULLTEXT INDEX nebula_index_ddl_tag_prop2;",
      "SHOW FULLTEXT INDEXES;",
      "CREATE FULLTEXT TAG INDEX nebula_index_ddl_tag_prop1 on ddl_tag(prop2);",
      "SHOW FULLTEXT INDEXES;",
      "ALTER TAG ddl_tag DROP (prop1);",
      "ALTER TAG ddl_tag ADD (prop1_new string);",
      "DROP FULLTEXT INDEX nebula_index_ddl_tag_prop1;",
      "DROP TAG ddl_tag;\nDROP EDGE ddl_edge;"
    ]
  },
  {
    "path": "function",
    "file_name": "coalesce",
    "statements": [
      "RETURN coalesce(null,1) as result;",
      "RETURN coalesce(1,2,3) as result;",
      "RETURN coalesce(null) as result;",
      "RETURN coalesce(null,[1,2,3]) as result;",
      "RETURN coalesce(null,1.234) as result;"
    ]
  },
  {
    "path": "function",
    "file_name": "json_extract",
    "statements": [
      "YIELD JSON_EXTRACT('{\"a\": \"foo\", \"b\": 0.2, \"c\": true}') AS result;",
      "YIELD JSON_EXTRACT('{\"a\": 1, \"b\": {}, \"c\": {\"d\": true}}') AS result;",
      "YIELD JSON_EXTRACT('{}') AS result;",
      "YIELD JSON_EXTRACT('fuzz') AS result;",
      "YIELD JSON_EXTRACT('{\"a\": \"foo\", \"b\": false, \"c\": {\"d\": {\"e\": 0.1}}}') AS result;",
      "YIELD JSON_EXTRACT('{\"a\": \"foo\", \"b\": false, \"c\": [1, 2, 3]}') AS result;"
    ]
  },
  {
    "path": "geo",
    "file_name": "GeoBase",
    "statements": [
      "DESC TAG any_shape;",
      "DESC TAG only_point;",
      "DESC TAG only_linestring;",
      "DESC TAG only_polygon;",
      "DESC EDGE any_shape_edge;",
      "SHOW CREATE TAG only_point;",
      "CREATE TAG test_1(geo geography DEFAULT ST_Point(3, 8));",
      "CREATE EDGE test_2(geo geography DEFAULT ST_GeogFromText(\"LINESTRING(0 1, 2 3)\"));",
      "CREATE TAG test_3(geo geography(linestring) DEFAULT ST_GeogFromText(\"LineString(0 1, 2 3)\"));",
      "INSERT EDGE test_2() VALUES \"test_101\"-\u003e\"test_102\":()",
      "INSERT VERTEX test_3() VALUES \"test_103\":()",
      "INSERT VERTEX any_shape(geo) VALUES \"102\":(ST_GeogFromText(\"LINESTRING(3 8, 4.7 73.23)\"));",
      "INSERT VERTEX any_shape(geo) VALUES \"103\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"));",
      "INSERT VERTEX only_point(geo) VALUES \"201\":(ST_GeogFromText(\"POINT(3 8)\"));",
      "INSERT VERTEX only_linestring(geo) VALUES \"302\":(ST_GeogFromText(\"LINESTRING(3 8, 4.7 73.23)\"));",
      "INSERT VERTEX only_polygon(geo) VALUES \"403\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"));",
      "INSERT EDGE any_shape_edge(geo) VALUES \"201\"-\u003e\"302\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"));",
      "FETCH PROP ON any_shape \"101\",\"102\",\"103\" YIELD ST_ASText(any_shape.geo);",
      "FETCH PROP ON only_point \"201\",\"202\",\"203\" YIELD ST_ASText(only_point.geo);",
      "FETCH PROP ON only_linestring \"301\",\"302\",\"303\" YIELD ST_ASText(only_linestring.geo);",
      "FETCH PROP ON only_polygon \"401\",\"402\",\"403\" YIELD ST_ASText(only_polygon.geo);",
      "FETCH PROP ON any_shape_edge \"201\"-\u003e\"302\" YIELD ST_ASText(any_shape_edge.geo);",
      "CREATE TAG INDEX any_shape_geo_index ON any_shape(geo) with (s2_max_level=30, s2_max_cells=8) comment \"test\";",
      "CREATE TAG INDEX only_point_geo_index ON only_point(geo) comment \"test2\";",
      "CREATE TAG INDEX only_linestring_geo_index ON only_linestring(geo) with (s2_max_cells=12) comment \"test3\";",
      "CREATE TAG INDEX only_polygon_geo_index ON only_polygon(geo);",
      "CREATE EDGE INDEX any_shape_edge_geo_index ON any_shape_edge(geo) with (s2_max_level=23);",
      "LOOKUP ON only_point YIELD ST_ASText(only_point.geo);",
      "LOOKUP ON only_linestring YIELD ST_ASText(only_linestring.geo);",
      "LOOKUP ON only_polygon YIELD ST_ASText(only_polygon.geo);",
      "LOOKUP ON any_shape_edge YIELD ST_ASText(any_shape_edge.geo);",
      "MATCH (v:any_shape) RETURN ST_ASText(v.any_shape.geo);",
      "INSERT VERTEX only_point(geo) VALUES \"208\":(ST_GeogFromText(\"POINT(0.01 0.01)\"));",
      "INSERT VERTEX only_linestring(geo) VALUES \"308\":(ST_GeogFromText(\"LINESTRING(9 9, 8 8, 7 7, 9 9)\"));",
      "INSERT VERTEX only_polygon(geo) VALUES \"408\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"));",
      "INSERT EDGE any_shape_edge(geo) VALUES \"108\"-\u003e\"408\":(ST_GeogFromText(\"POLYGON((-20 -20, -20 20, 20 20, 20 -20, -20 -20), (1.0 1.0, 2.0 2.0, 0.0 2.0, 1.0 1.0))\"));",
      "LOOKUP ON any_shape YIELD id(vertex) as id, ST_ASText(any_shape.geo);",
      "LOOKUP ON only_point YIELD id(vertex)  as id, ST_ASText(only_point.geo);",
      "LOOKUP ON only_linestring YIELD id(vertex) as id, ST_ASText(only_linestring.geo);",
      "LOOKUP ON only_polygon YIELD id(vertex) as id, ST_ASText(only_polygon.geo);",
      "LOOKUP ON any_shape_edge YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank, ST_ASText(any_shape_edge.geo);",
      "LOOKUP ON any_shape YIELD id(vertex) as id, S2_CellIdFromPoint(any_shape.geo);",
      "LOOKUP ON any_shape YIELD id(vertex) as id, S2_CoveringCellIds(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Intersects(any_shape.geo, ST_GeogFromText('POINT(0 1)')) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Intersects(any_shape.geo, ST_GeogFromText('POINT(4.7 73.23)')) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Intersects(any_shape.geo, ST_Point(72.3, 84.6)) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Intersects(ST_Point(72.3, 84.6), any_shape.geo) YIELD ST_ASText(any_shape.geo);",
      "MATCH (v:any_shape) WHERE ST_Intersects(v.any_shape.geo, ST_GeogFromText('POINT(3 8)')) RETURN ST_ASText(v.any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Distance(any_shape.geo, ST_Point(3, 8)) \u003c 1.0 YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Distance(any_shape.geo, ST_Point(3, 8)) \u003c= 1.0 YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Distance(any_shape.geo, ST_Point(3, 8)) \u003c= 8909524.383934561 YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Distance(any_shape.geo, ST_Point(3, 8)) \u003c 8909524.383934561 YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Distance(any_shape.geo, ST_Point(3, 8)) \u003c 8909524.383934563 YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Distance(any_shape.geo, ST_Point($p4.longitude[0], $p4.latitude[1])) \u003c $p4.latitude[2] YIELD id(vertex)",
      "LOOKUP ON any_shape WHERE 8909524.383934560 \u003e ST_Distance(any_shape.geo, ST_Point(3, 8)) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE 8909524.3839345630 \u003e= ST_Distance(any_shape.geo, ST_Point(3, 8)) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_DWithin(any_shape.geo, ST_Point(3, 8), 8909524.383934561) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_DWithin(any_shape.geo, ST_Point(3, 8), 100.0) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_DWithin(any_shape.geo, ST_Point(3, 8), 100) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Covers(any_shape.geo, ST_Point(3, 8)) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Covers(any_shape.geo, ST_Point(3, 8)) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Covers(ST_GeogFromText('POLYGON((-0.7 3.8,3.6 3.2,1.8 -0.8,-3.4 2.4,-0.7 3.8))'), any_shape.geo) YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_CoveredBy(any_shape.geo, ST_GeogFromText('POLYGON((-0.7 3.8,3.6 3.2,1.8 -0.8,-3.4 2.4,-0.7 3.8))')) YIELD ST_ASText(any_shape.geo);",
      "UPDATE VERTEX ON any_shape \"101\" SET any_shape.geo = ST_GeogFromText('LINESTRING(3 8, 6 16)');",
      "FETCH PROP ON any_shape \"101\" YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_DWithin(any_shape.geo, ST_Point(3, 8), 100.0) YIELD ST_ASText(any_shape.geo);",
      "UPDATE EDGE ON any_shape_edge \"201\"-\u003e\"302\" SET any_shape_edge.geo = ST_GeogFromText('POINT(-1 -1)');",
      "FETCH PROP ON any_shape_edge \"201\"-\u003e\"302\" YIELD ST_ASText(any_shape_edge.geo);",
      "LOOKUP ON any_shape_edge YIELD ST_ASText(any_shape_edge.geo);",
      "LOOKUP ON any_shape_edge WHERE ST_Intersects(any_shape_edge.geo, ST_Point(-1, -1)) YIELD ST_ASText(any_shape_edge.geo);",
      "DELETE VERTEX \"101\" WITH EDGE;",
      "FETCH PROP ON any_shape \"101\" YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape YIELD ST_ASText(any_shape.geo);",
      "LOOKUP ON any_shape WHERE ST_Covers(any_shape.geo, ST_Point(3, 8)) YIELD ST_ASText(any_shape.geo);",
      "DELETE EDGE any_shape_edge \"201\"-\u003e\"302\";",
      "FETCH PROP ON any_shape_edge \"201\"-\u003e\"302\" YIELD ST_ASText(any_shape_edge.geo);",
      "LOOKUP ON any_shape_edge YIELD ST_ASText(any_shape_edge.geo);",
      "LOOKUP ON any_shape WHERE ST_Intersects(ST_Point(-1, -1), any_shape.geo) YIELD ST_ASText(any_shape.geo);",
      "DROP TAG INDEX any_shape_geo_index;",
      "DROP EDGE INDEX any_shape_edge_geo_index;",
      "DROP TAG any_shape;",
      "DROP EDGE any_shape_edge;"
    ]
  },
  {
    "path": "go",
    "file_name": "GO.IntVid",
    "statements": [
      "GO FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst",
      "GO FROM hash(\"Tim Duncan\") OVER like YIELD $^.player.name as name, $^.player.age as age",
      "GO FROM hash(\"Tim Duncan\"), hash(\"Tony Parker\") OVER like YIELD $^.player.name as name, $^.player.age as age",
      "GO FROM hash(\"Tim Duncan\"), hash(\"Tim Duncan\") OVER serve YIELD serve._dst",
      "YIELD hash(\"Tim Duncan\") as vid | GO FROM $-.vid OVER serve YIELD serve._dst",
      "GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM hash(\"Rajon Rondo\") OVER serve WHERE serve.start_year \u003e= 2013 AND serve.end_year \u003c= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM hash(\"Boris Diaw\") OVER like YIELD like._dst as id |\nGO FROM $-.id OVER like YIELD like._dst as id |\nGO FROM $-.id OVER serve YIELD serve._dst",
      "GO FROM hash('Thunders') OVER serve REVERSELY YIELD serve._dst",
      "GO FROM hash(\"Boris Diaw\") OVER like YIELD like._dst as id\n|(GO FROM $-.id OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst)",
      "GO FROM hash(\"No Exist Vertex Id\") OVER like YIELD like._dst as id\n|(GO FROM $-.id OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst)",
      "GO FROM hash(\"Boris Diaw\") OVER like, serve YIELD like._dst as id\n|(GO FROM $-.id OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst)",
      "$var = GO FROM hash(\"Tracy McGrady\") OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst",
      "$var = (GO FROM hash(\"Tracy McGrady\") OVER like YIELD like._dst as id | GO FROM $-.id OVER like YIELD like._dst as id);\nGO FROM $var.id OVER like YIELD like._dst",
      "GO FROM hash(\"Tracy McGrady\") OVER like YIELD like._dst as vid | GO FROM $-.vid OVER like YIELD $-.vid as id",
      "GO FROM hash(\"Tracy McGrady\") OVER like YIELD like._dst as vid | GO FROM $-.vid OVER like YIELD 3",
      "$var = GO FROM -1 OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst",
      "GO FROM hash(\"Nobody\") OVER serve YIELD DISTINCT $^.player.name as name, $$.team.name as name",
      "GO FROM hash(\"Boris Diaw\") OVER like YIELD like._dst as id\n| GO FROM $-.id OVER like YIELD like._dst as id\n| GO FROM $-.id OVER serve\nYIELD DISTINCT serve._dst, $$.team.name",
      "GO 2 STEPS FROM hash(\"Tony Parker\") OVER like YIELD DISTINCT like._dst",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve._dst",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD DISTINCT $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER like YIELD like._dst as id\n| GO FROM $-.id OVER like YIELD like._dst as id\n| GO FROM $-.id OVER serve YIELD serve._dst",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve._dst as id, serve.start_year as start\n| YIELD $-.id as id WHERE $-.start \u003e 20000\n| Go FROM $-.id over serve YIELD serve._dst",
      "GO FROM hash(\"Russell Westbrook\") OVER * REVERSELY YIELD serve._dst, like._dst",
      "GO FROM hash(\"Russell Westbrook\") OVER * REVERSELY YIELD serve._src, like._src",
      "GO FROM hash(\"Russell Westbrook\") OVER * REVERSELY YIELD like._dst, serve._dst, teammate._dst",
      "GO FROM hash(\"Dirk Nowitzki\") OVER * YIELD serve._dst, like._dst",
      "GO FROM hash(\"Paul Gasol\") OVER * YIELD like._dst, serve._dst, teammate._dst",
      "GO FROM hash(\"Manu Ginobili\") OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name",
      "GO FROM hash(\"LaMarcus Aldridge\") OVER * YIELD $$.team.name, $$.player.name",
      "GO FROM hash(\"Boris Diaw\") OVER * YIELD like._dst as id\n| ( GO FROM $-.id OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst )",
      "GO FROM hash(\"Russell Westbrook\") OVER serve, like REVERSELY\nYIELD serve._dst, like._dst, serve._type, like._type",
      "GO FROM hash(\"Russell Westbrook\") OVER serve, like  YIELD serve.start_year, like.likeness",
      "GO FROM hash(\"Shaquille O\\'Neal\") OVER serve, like YIELD serve._dst, like._dst",
      "GO FROM hash('Russell Westbrook') OVER serve, like YIELD serve._dst, like._dst",
      "GO FROM hash(\"Russell Westbrook\") OVER serve, like REVERSELY\nYIELD serve._dst, like._dst, serve.start_year, like.likeness",
      "GO FROM hash(\"Russell Westbrook\") OVER serve, like REVERSELY YIELD serve._src, like._src",
      "GO FROM hash(\"Russell Westbrook\") OVER serve, like REVERSELY YIELD serve._dst, like._dst",
      "GO FROM hash(\"Manu Ginobili\") OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name",
      "GO FROM hash(\"Russell Westbrook\") OVER serve, like WHERE serve.start_year \u003e 2000\nYIELD serve.start_year, like.likeness",
      "GO FROM hash(\"Manu Ginobili\") OVER like, teammate REVERSELY WHERE like.likeness \u003e 90\nYIELD like.likeness, teammate.start_year, $$.player.name",
      "GO FROM hash(\"Manu Ginobili\") OVER * WHERE $$.player.age \u003e 30 or $$.team.name not starts with \"Rockets\"\nYIELD DISTINCT $$.player.age, $$.player.name, $$.team.name",
      "GO FROM hash(\"Manu Ginobili\") OVER like, teammate REVERSELY WHERE $$.player.age \u003e 30 and $$.player.age \u003c 40\nYIELD DISTINCT $$.player.age, $$.player.name",
      "GO FROM hash('Tim Duncan'), hash('Chris Paul') OVER like YIELD $^.player.name AS name, like._dst AS id\n| GO FROM $-.id OVER like YIELD $-.name, $^.player.name, $$.player.name",
      "GO FROM hash('Tim Duncan'), hash('Chris Paul') OVER like YIELD $^.player.name AS name, like._dst AS id\n| GO FROM $-.id OVER like WHERE $-.name != $$.player.name YIELD $-.name, $^.player.name, $$.player.name",
      "GO FROM hash('Tim Duncan'), hash('Chris Paul') OVER like YIELD $^.player.name AS name, like._dst AS id\n| GO FROM $-.id OVER like YIELD $-.*, $^.player.name, $$.player.name",
      "$var = GO FROM hash('Tim Duncan'), hash('Chris Paul') OVER like YIELD $^.player.name AS name, like._dst AS id;\nGO FROM $var.id OVER like YIELD $var.*, $^.player.name, $$.player.name",
      "$var = GO FROM hash('Tim Duncan'), hash('Chris Paul') OVER like YIELD $^.player.name AS name, like._dst AS id;\nGO FROM $var.id OVER like YIELD $var.name, $^.player.name, $$.player.name",
      "$var = GO FROM hash('Tim Duncan'), hash('Chris Paul') OVER like YIELD $^.player.name AS name, like._dst AS id;\nGO FROM $var.id OVER like  WHERE $var.name != $$.player.name YIELD $var.name, $^.player.name, $$.player.name",
      "GO FROM hash('Boris Diaw') OVER serve WHERE $$.team.name IN ['Hawks', 'Suns']\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._dst AS id |\nGO FROM  $-.id OVER serve WHERE $-.id IN [hash('Tony Parker'), 123] YIELD serve._dst",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._dst AS id |\nGO FROM  $-.id OVER serve WHERE $-.id IN [hash('Tony Parker'), 123] AND 1 == 1 YIELD serve._dst",
      "$A = GO FROM hash('Tim Duncan') OVER like YIELD like._dst AS dst;\n$rA = YIELD $A.* WHERE $A.dst == 123;\nRETURN $rA IF $rA IS NOT NULL;\nGO FROM $A.dst OVER serve YIELD serve._dst",
      "$A = GO FROM hash('Tim Duncan') OVER like YIELD like._dst AS dst;\n$rA = YIELD $A.* WHERE 1 == 1;\nRETURN $rA IF $rA IS NOT NULL;\nGO FROM $A.dst OVER serve YIELD serve._dst",
      "$A = GO FROM hash('Tim Duncan') OVER like YIELD like._dst AS dstA;\n$rA = YIELD $A.* WHERE $A.dstA == 123;\nRETURN $rA IF $rA IS NOT NULL;\n$B = GO FROM $A.dstA OVER like YIELD like._dst AS dstB;\n$rB = YIELD $B.* WHERE $B.dstB == 456;\nRETURN $rB IF $rB IS NOT NULL;\nGO FROM $B.dstB OVER serve YIELD serve._dst",
      "$A = GO FROM hash('Tim Duncan') OVER like YIELD like._dst AS dst;\n$rA = YIELD $A.* WHERE $A.dst == 123;\nRETURN $rA IF $rA IS NOT NULL;",
      "$A = GO FROM hash('Tim Duncan') OVER like YIELD like._dst AS dst;\n$rA = YIELD $A.* WHERE 1 == 1;\nRETURN $rA IF $rA IS NOT NULL;",
      "GO FROM hash('Tim Duncan') OVER like REVERSELY YIELD like._dst",
      "GO FROM hash('Tim Duncan') OVER like REVERSELY YIELD $$.player.name",
      "GO FROM hash('Tim Duncan') OVER like REVERSELY WHERE $$.player.age \u003c 35 YIELD $$.player.name",
      "GO FROM hash('Tim Duncan') OVER * REVERSELY YIELD like._dst",
      "GO 2 STEPS FROM hash('Tony Parker') OVER like YIELD like._dst",
      "GO 3 STEPS FROM hash('Tony Parker') OVER like YIELD like._dst",
      "GO 1 STEPS FROM hash('Tony Parker') OVER like YIELD like._dst AS id\n| GO 2 STEPS FROM $-.id OVER like YIELD like._dst",
      "GO 2 STEPS FROM hash('Kobe Bryant') OVER like REVERSELY YIELD $$.player.name",
      "GO FROM hash('Manu Ginobili') OVER * REVERSELY YIELD like._dst AS id\n| GO FROM $-.id OVER serve YIELD serve._dst",
      "GO FROM hash('LeBron James') OVER serve YIELD serve._dst AS id\n| GO FROM $-.id OVER serve REVERSELY YIELD $^.team.name, $$.player.name",
      "GO FROM hash('LeBron James') OVER serve YIELD serve._dst AS id\n| GO FROM $-.id OVER serve REVERSELY WHERE $$.player.name != 'LeBron James'\nYIELD $^.team.name, $$.player.name",
      "GO FROM hash('Manu Ginobili') OVER like REVERSELY YIELD like._dst AS id\n| GO FROM $-.id OVER serve YIELD serve._dst",
      "GO FROM hash('Tim Duncan') OVER serve bidirect YIELD serve._dst",
      "GO FROM hash('Tim Duncan') OVER like bidirect YIELD like._dst",
      "GO FROM hash('Tim Duncan') OVER serve, like bidirect YIELD serve._dst, like._dst",
      "GO FROM hash('Tim Duncan') OVER serve bidirect YIELD $$.team.name",
      "GO FROM hash('Tim Duncan') OVER like bidirect YIELD $$.player.name",
      "GO FROM hash('Tim Duncan') OVER like bidirect WHERE like.likeness \u003e 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness",
      "GO FROM hash('Tim Duncan') OVER * bidirect YIELD $^.player.name, serve._dst, $$.team.name, like._dst, $$.player.name",
      "GO FROM hash('Tim Duncan') OVER * bidirect YIELD like._dst, serve._dst, teammate._dst",
      "GO FROM hash('Tim Duncan') OVER serve YIELD serve._dst, serve._dst",
      "GO FROM hash('Boris Diaw') OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM hash('Boris Diaw') OVER serve WHERE (string)serve.start_year CONTAINS \"05\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM hash('Boris Diaw') OVER serve WHERE $^.player.name CONTAINS \"Boris\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM hash('Boris Diaw') OVER serve WHERE !($^.player.name CONTAINS \"Boris\")\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM hash('Boris Diaw') OVER serve WHERE \"Leo\" CONTAINS \"Boris\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO 0 TO 0 STEPS FROM hash('Tony Parker') OVER like YIELD DISTINCT like._dst",
      "GO 1 TO 2 STEPS FROM hash('Tony Parker') OVER like YIELD DISTINCT like._dst",
      "GO 0 TO 2 STEPS FROM hash('Tony Parker') OVER like YIELD DISTINCT like._dst",
      "GO 1 TO 2 STEPS FROM hash('Tony Parker') OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name",
      "GO 0 TO 2 STEPS FROM hash('Tony Parker') OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name",
      "GO 0 TO 3 STEPS FROM hash('Tim Duncan') OVER serve YIELD serve._dst",
      "GO 2 TO 3 STEPS FROM hash('Tim Duncan') OVER serve YIELD serve._dst",
      "GO 1 TO 2 STEPS FROM hash('Tony Parker') OVER like REVERSELY YIELD DISTINCT like._dst",
      "GO 0 TO 2 STEPS FROM hash('Tony Parker') OVER like REVERSELY YIELD DISTINCT like._dst",
      "GO 2 TO 2 STEPS FROM hash('Tony Parker') OVER like REVERSELY YIELD DISTINCT like._dst",
      "GO 1 TO 3 STEPS FROM hash('Spurs') OVER serve REVERSELY YIELD serve._dst",
      "GO 0 TO 3 STEPS FROM hash('Spurs') OVER serve REVERSELY YIELD serve._dst",
      "GO 1 TO 2 STEPS FROM hash('Tony Parker') OVER like BIDIRECT YIELD DISTINCT like._dst",
      "GO 0 TO 2 STEPS FROM hash('Tony Parker') OVER like BIDIRECT YIELD DISTINCT like._dst",
      "GO 1 TO 2 STEPS FROM hash('Russell Westbrook') OVER * YIELD serve._dst, like._dst",
      "GO 0 TO 2 STEPS FROM hash('Russell Westbrook') OVER * YIELD serve._dst, like._dst",
      "GO 1 TO 2 STEPS FROM hash('Russell Westbrook') OVER *\nYIELD serve._dst, like._dst, serve.start_year, like.likeness, $$.player.name",
      "GO 0 TO 2 STEPS FROM hash('Russell Westbrook') OVER *\nYIELD serve._dst, like._dst, serve.start_year, like.likeness, $$.player.name",
      "GO 1 TO 2 STEPS FROM hash('Russell Westbrook') OVER * REVERSELY YIELD serve._dst, like._dst",
      "GO 0 TO 2 STEPS FROM hash('Russell Westbrook') OVER * REVERSELY YIELD serve._dst, like._dst",
      "go 1 to 4 steps from hash(\"Tim Duncan\") over like where like.likeness \u003e 90 yield like.likeness, edge as e",
      "go 1 to 4 steps from hash(\"Tim Duncan\") over like yield like.likeness, edge as e",
      "GO FROM hash('Tim Duncan') OVER serve YIELD $$.player.name as name",
      "GO 0 STEPS FROM hash('Tim Duncan') OVER serve BIDIRECT YIELD serve._dst",
      "GO 0 STEPS FROM hash('Tim Duncan') OVER serve YIELD serve._dst",
      "GO 0 STEPS FROM hash('Tim Duncan') OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._src as src, like._dst as dst | GO FROM $-.src OVER like\nYIELD $-.src as src, like._dst as dst, $^.player.name, $$.player.name",
      "$a = GO FROM hash('Tim Duncan') OVER like YIELD like._src as src, like._dst as dst;\nGO FROM $a.src OVER like YIELD $a.src as src, like._dst as dst",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._src as src, like._dst as dst\n| GO 1 TO 2 STEPS FROM $-.src OVER like YIELD $-.src as src, like._dst as dst",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._src as src, like._dst as dst\n| GO 1 TO 2 STEPS FROM $-.src OVER like\nYIELD $-.src as src, $-.dst, like._dst as dst, like.likeness",
      "GO FROM hash('Danny Green') OVER like YIELD like._src AS src, like._dst AS dst\n| GO FROM $-.dst OVER teammate YIELD $-.src AS src, $-.dst, teammate._dst AS dst",
      "$a = GO FROM hash('Danny Green') OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst",
      "GO FROM hash('Tony Parker') OVER like YIELD like._src as src, like._dst as dst\n| GO 2 STEPS FROM $-.src OVER like YIELD $-.src, $-.dst, like._src, like._dst",
      "$a = GO FROM hash('Tony Parker') OVER like YIELD like._src as src, like._dst as dst;\nGO 2 STEPS FROM $a.src OVER like YIELD $a.src, $a.dst, like._src, like._dst",
      "$a = GO FROM hash('Tony Parker') OVER like YIELD like._src as src, like._dst as dst;\nGO 2 STEPS FROM $a.src OVER like YIELD $a.src as src, $a.dst, like._src AS like_src, like._dst AS like_dst\n| ORDER BY $-.src,$-.like_src,$-.like_dst | OFFSET 1 LIMIT 2",
      "$a = GO FROM hash('Tony Parker') OVER like YIELD like._src as src, like._dst as dst;\nGO 2 STEPS FROM $a.src OVER like YIELD $a.src as src, $a.dst, like._src AS like_src, like._dst AS like_dst\n| ORDER BY $-.src,$-.like_src,$-.like_dst | LIMIT 2 OFFSET 1",
      "GO 1 TO 2 STEPS FROM hash(\"Tim Duncan\") OVER like WHERE like._dst != hash(\"YAO MING\") YIELD like._dst AS vid\n| GROUP BY $-.vid YIELD 1 AS id | GROUP BY $-.id YIELD COUNT($-.id);",
      "GO FROM hash(\"Tim Duncan\") OVER like WHERE like._dst == hash(\"Tony Parker\") YIELD like._dst | limit 10;",
      "GO 2 STEPS FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst;",
      "GO 10 STEPS FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst;",
      "GO 10000000000000 STEPS FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst;",
      "GO 1 TO 10 STEPS FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst;",
      "GO 2 TO 10 STEPS FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst;",
      "GO 10000000000 TO 10000000002 STEPS FROM hash(\"Tim Duncan\") OVER serve YIELD serve._dst;",
      "GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst LIMIT [1];",
      "GO 3 STEPS FROM hash(\"Tim Duncan\") OVER like YIELD like._dst LIMIT [1, 2, 2];",
      "GO FROM hash(\"Tim Duncan\") OVER like WHERE [like._dst == \"Tony Parker\"]  LIMIT [1];",
      "GO 3 STEPS FROM hash(\"Tim Duncan\") OVER like WHERE [like._dst == \"Tony Parker\", $$.player.age\u003e20, $$.player.age\u003e22] LIMIT [1, 2, 2];",
      "GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst SAMPLE [1];",
      "GO 3 STEPS FROM hash(\"Tim Duncan\") OVER like YIELD like._dst SAMPLE [1, 3, 2];",
      "GO FROM hash(\"Tim Duncan\") OVER like WHERE [like._dst == \"Tony Parker\"]  SAMPLE [1];",
      "GO 3 STEPS FROM hash(\"Tim Duncan\") OVER like WHERE [like._dst == \"Tony Parker\", $$.player.age\u003e20, $$.player.age\u003e22] SAMPLE [1, 2, 2];",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name |\nYIELD hash($-.name) AS name |\nGO 1 TO 2 STEPS FROM $-.name OVER like REVERSELY YIELD like._dst AS dst, $$.player.name AS name"
    ]
  },
  {
    "path": "go",
    "file_name": "GO",
    "statements": [
      "GO FROM \"Tim Duncan\" OVER serve YIELD serve._dst",
      "GO FROM \"Tim Duncan\" OVER serve WHERE 1 \u003e 0 YIELD serve._dst",
      "GO FROM \"Tim Duncan\" OVER serve WHERE 1 \u003c 0 YIELD serve._dst",
      "GO FROM \"Tim Duncan\" OVER serve WHERE 'Tim Duncan' \u003e 0 YIELD serve._dst",
      "GO FROM \"Tim Duncan\" OVER serve YIELD DISTINCT properties(edge) | YIELD COUNT(*)",
      "GO FROM \"Tim Duncan\" OVER like YIELD $^.player.name as name, $^.player.age as age",
      "GO FROM \"Tim Duncan\", \"Tony Parker\" OVER like YIELD $^.player.name as name, $^.player.age as age",
      "GO FROM \"Tim Duncan\", \"Tim Duncan\" OVER serve YIELD serve._dst",
      "YIELD \"Tim Duncan\" as vid | GO FROM $-.vid OVER serve YIELD serve._dst",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name, 1, 1\u003e2",
      "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year \u003e= 2013 AND serve.end_year \u003c= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id |\nGO FROM $-.id OVER like YIELD like._dst as id |\nGO FROM $-.id OVER serve YIELD serve._dst",
      "GO FROM 'Thunders' OVER serve REVERSELY YIELD serve._dst",
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id\n|(GO FROM $-.id OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst)",
      "GO FROM \"No Exist Vertex Id\" OVER like YIELD like._dst as id\n|(GO FROM $-.id OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst)",
      "GO FROM \"Boris Diaw\" OVER like, serve YIELD like._dst as id\n|(GO FROM $-.id OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst)",
      "GO FROM \"Tim Duncan\" OVER like WHERE like._rank\u003c10 YIELD like._src AS src, like._dst AS dst, like._rank AS rank\n| YIELD $-.src AS src, $-.dst AS dst, max($-.rank) AS maxRank\n| FETCH PROP ON like $-.src -\u003e $-.dst@$-.maxRank YIELD edge AS e",
      "GO FROM 'Tony Parker' OVER like WHERE like._dst IN ['Tim Duncan', 'Danny Green'] YIELD $$.player.name",
      "GO FROM 'Tony Parker' OVER like WHERE like._dst IN ['Tim Duncan', 'Danny Green'] YIELD $^.player.name",
      "GO FROM 'Tony Parker' OVER like WHERE like._dst IN ['Tim Duncan', 'Danny Green'] AND 1 \u003e 2 YIELD $^.player.name",
      "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst",
      "$var = (GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id | GO FROM $-.id OVER like YIELD like._dst as id);\nGO FROM $var.id OVER like YIELD like._dst",
      "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as vid | GO FROM $-.vid OVER like YIELD $-.vid as id",
      "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as vid | GO FROM $-.vid OVER like YIELD 3",
      "$var = GO FROM \"-1\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst",
      "GO FROM \"Nobody\" OVER serve YIELD DISTINCT $^.player.name as name, $$.team.name as name",
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id\n| GO FROM $-.id OVER like YIELD like._dst as id\n| GO FROM $-.id OVER serve\nYIELD DISTINCT serve._dst, $$.team.name",
      "GO 2 STEPS FROM \"Tony Parker\" OVER like YIELD DISTINCT like._dst",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve._dst",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD DISTINCT $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM \"NON EXIST VERTEX ID\" OVER like YIELD like._dst as id\n| GO FROM $-.id OVER like YIELD like._dst as id\n| GO FROM $-.id OVER serve YIELD serve._dst",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve._dst as id, serve.start_year as start\n| YIELD $-.id as id WHERE $-.start \u003e 20000\n| Go FROM $-.id over serve YIELD serve._dst",
      "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD serve._dst, like._dst",
      "GO FROM \"Russell Westbrook\" OVER * BIDIRECT YIELD serve._dst, like._dst",
      "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD serve._src, like._src",
      "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD like._dst, serve._dst, teammate._dst",
      "GO FROM \"Dirk Nowitzki\" OVER * YIELD serve._dst, like._dst",
      "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst",
      "GO FROM \"Paul Gasol\" OVER *\nWHERE $$.player.name IS NOT EMPTY\nYIELD like._dst",
      "GO FROM \"Paul Gasol\" OVER *\nWHERE $$.player.name IS EMPTY\nYIELD like._dst",
      "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name",
      "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name",
      "GO FROM \"Boris Diaw\" OVER * YIELD like._dst as id\n| ( GO FROM $-.id OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst)",
      "GO FROM \"Russell Westbrook\" OVER serve, like REVERSELY\nYIELD serve._dst, like._dst, serve._type, like._type",
      "GO FROM \"Russell Westbrook\" OVER serve, like  YIELD serve.start_year, like.likeness",
      "GO FROM \"Shaquille O\\'Neal\" OVER serve, like YIELD serve._dst, like._dst",
      "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst",
      "GO FROM \"Russell Westbrook\" OVER serve, like REVERSELY\nYIELD serve._dst, like._dst, serve.start_year, like.likeness",
      "GO FROM \"Russell Westbrook\" OVER serve, like REVERSELY YIELD serve._src, like._src",
      "GO FROM \"Russell Westbrook\" OVER serve, like REVERSELY YIELD serve._dst, like._dst",
      "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name",
      "GO FROM \"Russell Westbrook\" OVER serve, like WHERE serve.start_year \u003e 2000\nYIELD serve.start_year, like.likeness",
      "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness \u003e 90\nYIELD like.likeness, teammate.start_year, $$.player.name",
      "GO FROM \"Manu Ginobili\" OVER * WHERE $$.player.age \u003e 30 or $$.team.name not starts with \"Rockets\"\nYIELD DISTINCT $$.player.age, $$.player.name, $$.team.name",
      "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age \u003e 30 and $$.player.age \u003c 40\nYIELD DISTINCT $$.player.age, $$.player.name",
      "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, like._dst AS id\n| GO FROM $-.id OVER like YIELD $-.name, $^.player.name, $$.player.name",
      "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, like._dst AS id\n| GO FROM $-.id OVER like WHERE $-.name != $$.player.name YIELD $-.name, $^.player.name, $$.player.name",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE (serve.start_year\u003e2000 OR like.likeness\u003e90) AND size(labels($$)[0]) \u003e 0 AND $$.player.age\u003e40\n  yield $$ as v",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))\u003e0 AND $$.player.age\u003e40\n  yield $$ as v",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE  $$.player.age\u003e40 AND size(labels($$)[0]) \u003e 0\n  yield $$ as v",
      "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, like._dst AS id\n| GO FROM $-.id OVER like YIELD $-.*, $^.player.name, $$.player.name",
      "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, like._dst AS id;\nGO FROM $var.id OVER like YIELD $var.*, $^.player.name, $$.player.name",
      "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, like._dst AS id;\nGO FROM $var.id OVER like YIELD $var.name, $^.player.name, $$.player.name",
      "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, like._dst AS id;\nGO FROM $var.id OVER like  WHERE $var.name != $$.player.name YIELD $var.name, $^.player.name, $$.player.name",
      "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name IN ['Hawks', 'Suns']\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst AS id |\nGO FROM  $-.id OVER serve WHERE $-.id IN ['Tony Parker', 123] YIELD serve._dst",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst AS id |\nGO FROM  $-.id OVER serve WHERE $-.id IN ['Tony Parker', 123] AND 1 == 1 YIELD serve._dst",
      "$A = GO FROM 'Tim Duncan' OVER like YIELD like._dst AS dst;\n$rA = YIELD $A.* WHERE $A.dst == 123;\nRETURN $rA IF $rA IS NOT NULL;\nGO FROM $A.dst OVER serve YIELD serve._dst",
      "$A = GO FROM 'Tim Duncan' OVER like YIELD like._dst AS dst;\n$rA = YIELD $A.* WHERE 1 == 1;\nRETURN $rA IF $rA IS NOT NULL;\nGO FROM $A.dst OVER serve YIELD serve._dst",
      "$A = GO FROM 'Tim Duncan' OVER like YIELD like._dst AS dstA;\n$rA = YIELD $A.* WHERE $A.dstA == 123;\nRETURN $rA IF $rA IS NOT NULL;\n$B = GO FROM $A.dstA OVER like YIELD like._dst AS dstB;\n$rB = YIELD $B.* WHERE $B.dstB == 456;\nRETURN $rB IF $rB IS NOT NULL;\nGO FROM $B.dstB OVER serve YIELD serve._dst",
      "$A = GO FROM 'Tim Duncan' OVER like YIELD like._dst AS dst;\n$rA = YIELD $A.* WHERE $A.dst == 123;\nRETURN $rA IF $rA IS NOT NULL;",
      "$A = GO FROM 'Tim Duncan' OVER like YIELD like._dst AS dst;\n$rA = YIELD $A.* WHERE 1 == 1;\nRETURN $rA IF $rA IS NOT NULL;",
      "GO FROM 'Tim Duncan' OVER like REVERSELY YIELD like._dst",
      "GO FROM 'Tim Duncan' OVER like REVERSELY YIELD $$.player.name",
      "GO FROM 'Tim Duncan' OVER like REVERSELY WHERE $$.player.age \u003c 35 YIELD $$.player.name",
      "GO FROM 'Tim Duncan' OVER * REVERSELY YIELD like._dst",
      "GO 2 STEPS FROM 'Tony Parker' OVER like YIELD like._dst",
      "GO 3 STEPS FROM 'Tony Parker' OVER like YIELD like._dst",
      "GO 1 STEPS FROM 'Tony Parker' OVER like YIELD like._dst AS id\n| GO 2 STEPS FROM $-.id OVER like YIELD like._dst",
      "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name",
      "GO FROM 'Manu Ginobili' OVER * REVERSELY YIELD like._dst AS id\n| GO FROM $-.id OVER serve YIELD serve._dst",
      "GO FROM 'LeBron James' OVER serve YIELD serve._dst AS id\n| GO FROM $-.id OVER serve REVERSELY YIELD $^.team.name, $$.player.name",
      "GO FROM 'LeBron James' OVER serve YIELD serve._dst AS id\n| GO FROM $-.id OVER serve REVERSELY WHERE $$.player.name != 'LeBron James'\nYIELD $^.team.name, $$.player.name",
      "GO FROM 'Manu Ginobili' OVER like REVERSELY YIELD like._dst AS id\n| GO FROM $-.id OVER serve YIELD serve._dst",
      "GO FROM 'Tim Duncan' OVER serve bidirect YIELD serve._dst",
      "GO FROM 'Tim Duncan' OVER like bidirect YIELD like._dst",
      "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD serve._dst, like._dst",
      "GO FROM 'Tim Duncan' OVER serve bidirect YIELD $$.team.name",
      "GO FROM 'Tim Duncan' OVER like bidirect YIELD $$.player.name",
      "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness \u003e 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness",
      "GO FROM 'Tim Duncan' OVER * bidirect YIELD $^.player.name, serve._dst, $$.team.name, like._dst, $$.player.name",
      "GO FROM 'Tim Duncan' OVER * bidirect YIELD like._dst, serve._dst, teammate._dst",
      "GO FROM 'Tim Duncan' OVER serve YIELD serve._dst, serve._dst",
      "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM 'Boris Diaw' OVER serve WHERE (string)serve.start_year CONTAINS \"05\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM 'Boris Diaw' OVER serve WHERE $^.player.name CONTAINS \"Boris\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM 'Boris Diaw' OVER serve WHERE !($^.player.name CONTAINS \"Boris\")\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO FROM 'Boris Diaw' OVER serve WHERE \"Leo\" CONTAINS \"Boris\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name",
      "GO 0 TO 0 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst",
      "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst",
      "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst",
      "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name",
      "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name",
      "GO 0 TO 3 STEPS FROM 'Tim Duncan' OVER serve YIELD serve._dst",
      "GO 2 TO 3 STEPS FROM 'Tim Duncan' OVER serve YIELD serve._dst",
      "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like REVERSELY YIELD DISTINCT like._dst",
      "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like REVERSELY YIELD DISTINCT like._dst",
      "GO 2 TO 2 STEPS FROM 'Tony Parker' OVER like REVERSELY YIELD DISTINCT like._dst",
      "GO 1 TO 3 STEPS FROM 'Spurs' OVER serve REVERSELY YIELD serve._dst",
      "GO 0 TO 3 STEPS FROM 'Spurs' OVER serve REVERSELY YIELD serve._dst",
      "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst",
      "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst",
      "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst",
      "GO 0 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst",
      "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER *\nYIELD serve._dst, like._dst, serve.start_year, like.likeness, $$.player.name",
      "GO 0 TO 2 STEPS FROM 'Russell Westbrook' OVER *\nYIELD serve._dst, like._dst, serve.start_year, like.likeness, $$.player.name",
      "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * REVERSELY YIELD serve._dst, like._dst",
      "GO 0 TO 2 STEPS FROM 'Russell Westbrook' OVER * REVERSELY YIELD serve._dst, like._dst",
      "go 1 to 4 steps from \"Tim Duncan\" over like where like.likeness \u003e 90 yield like.likeness, edge as e",
      "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e",
      "GO FROM 'Tim Duncan' OVER serve YIELD $$.player.name as name",
      "GO 0 STEPS FROM 'Tim Duncan' OVER serve BIDIRECT YIELD serve._dst",
      "GO 0 STEPS FROM 'Tim Duncan' OVER serve YIELD serve._dst",
      "GO 0 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst",
      "GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst | GO FROM $-.src OVER like\nYIELD $-.src as src, like._dst as dst, $^.player.name, $$.player.name",
      "$a = GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst;\nGO FROM $a.src OVER like YIELD $a.src as src, like._dst as dst",
      "GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst\n| GO 1 TO 2 STEPS FROM $-.src OVER like YIELD $-.src as src, like._dst as dst",
      "GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst\n| GO 1 TO 2 STEPS FROM $-.src OVER like\nYIELD $-.src as src, $-.dst, like._dst as dst, like.likeness",
      "GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst\n| GO FROM $-.dst OVER teammate YIELD $-.src AS src, $-.dst, teammate._dst AS dst",
      "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst",
      "GO FROM 'Tony Parker' OVER like YIELD like._src as src, like._dst as dst\n| GO 2 STEPS FROM $-.src OVER like YIELD $-.src, $-.dst, like._src, like._dst",
      "$a = GO FROM 'Tony Parker' OVER like YIELD like._src as src, like._dst as dst;\nGO 2 STEPS FROM $a.src OVER like YIELD $a.src, $a.dst, like._src, like._dst",
      "$a = GO FROM 'Tony Parker' OVER like YIELD like._src as src, like._dst as dst;\nGO 2 STEPS FROM $a.src OVER like YIELD $a.src as src, $a.dst, like._src as like_src, like._dst\n| ORDER BY $-.src,$-.like_src | OFFSET 1 LIMIT 2",
      "$a = GO FROM 'Tony Parker' OVER like YIELD like._src as src, like._dst as dst;\nGO 2 STEPS FROM $a.src OVER like YIELD $a.src as src, $a.dst, like._src as like_src, like._dst\n| ORDER BY $-.src,$-.like_src | LIMIT 2 OFFSET 1",
      "GO 1 TO 2 STEPS FROM \"Tim Duncan\" OVER like WHERE like._dst != \"YAO MING\" YIELD like._dst AS vid\n| GROUP BY $-.vid YIELD 1 AS id\n| GROUP BY $-.id YIELD COUNT($-.id);",
      "GO FROM \"Tim Duncan\" OVER like WHERE like._dst == \"Tony Parker\" YIELD like._dst | limit 10;",
      "GO 2 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;",
      "GO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;",
      "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;",
      "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;",
      "GO 2 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;",
      "GO 1000000000 TO 1000000002 STEPS FROM \"Tim Duncan\" OVER serve YIELD serve._dst;",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst LIMIT [1];",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst LIMIT [1, 2, 2];",
      "GO FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\"]  LIMIT [1];",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\", $$.player.age\u003e20, $$.player.age\u003e22] LIMIT [1, 2, 2];",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst SAMPLE [1];",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst SAMPLE [1, 3, 2];",
      "GO FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\"]  SAMPLE [1];",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\", $$.player.age\u003e20, $$.player.age\u003e22] SAMPLE [1, 2, 2];",
      "GO FROM 'Tony Parker' OVER like YIELD $$.player.name, $^.team.name",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name |\nGO 1 TO 2 STEPS FROM $-.name OVER like REVERSELY YIELD like._dst AS dst, $$.player.name AS name"
    ]
  },
  {
    "path": "go",
    "file_name": "GoYieldVertexEdge",
    "statements": [
      "GO FROM \"Tim Duncan\" OVER like YIELD edge as e, properties(edge) as props, concat(src(edge), \" like \", dst(edge), \" @ \", properties($$).name, \" # \", properties($^).age) as result",
      "GO FROM \"Tim Duncan\" OVER serve Yield src(edge) as src, dst(edge) as dst, type(edge) as type, edge as e",
      "GO FROM \"Tim Duncan\" OVER like YIELD $^.player.name as name, $^.player.age as age, $^ as src, $$ as dst, edge as e",
      "GO FROM \"Tim Duncan\", \"Tony Parker\" OVER like YIELD $^.player.name as name, $^.player.age as age, $$ as dst",
      "GO FROM \"Tim Duncan\", \"Tim Duncan\" OVER * YIELD $$ as dst, type(edge) as type",
      "YIELD \"Tim Duncan\" as vid | GO FROM $-.vid OVER serve YIELD $^ as src, $$ as dst, dst(edge) as id",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name, edge as e, properties(edge) as props",
      "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year \u003e= 2013 AND serve.end_year \u003c= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name, rank(edge) as rank, dst(edge) as dst",
      "GO FROM \"Boris Diaw\" OVER * YIELD dst(edge) as id |\nGO FROM $-.id OVER like YIELD dst(edge) as id |\nGO FROM $-.id OVER serve YIELD $$ as dstnode",
      "GO FROM 'Thunders' OVER serve REVERSELY YIELD $^ as src,tags($^), id($^), id($$), $$ as dst",
      "GO FROM \"Boris Diaw\" OVER like YIELD dst(edge) as id |\nGO FROM $-.id OVER like YIELD dst(edge) as id |\nGO FROM $-.id OVER serve YIELD distinct edge as e",
      "GO FROM \"Boris Diaw\" OVER like YIELD id($$) as id |\nGO FROM $-.id OVER like YIELD id($$) as id |\nGO FROM $-.id OVER serve YIELD distinct edge as e",
      "GO FROM \"No Exist Vertex Id\" OVER like YIELD dst(edge) as id |\nGO FROM $-.id OVER like YIELD dst(edge) as id |\nGO FROM $-.id OVER serve YIELD $$ as dst",
      "GO FROM \"Tim Duncan\" OVER like, serve\n  WHERE serve.start_year \u003e 1970 OR properties($$).age \u003c 50\n  YIELD $$ AS dst, edge AS e",
      "GO FROM 'Tony Parker' OVER like WHERE like._dst IN ['Tim Duncan', 'Danny Green'] YIELD $$ as dst, tags($$), tags($^)",
      "GO FROM 'Tony Parker' OVER like WHERE like._dst IN ['Tim Duncan', 'Danny Green'] YIELD $^ as src",
      "$var = GO FROM \"Tracy McGrady\" OVER like YIELD dst(edge) as id;\nGO FROM $var.id OVER like YIELD $$ as dst",
      "$var = (GO FROM \"Tracy McGrady\" OVER like YIELD dst(edge) as id | GO FROM $-.id OVER like YIELD dst(edge) as id);\nGO FROM $var.id OVER like YIELD dst(edge) as dst",
      "GO FROM \"Tracy McGrady\" OVER like YIELD dst(edge) as vid |\nGO FROM $-.vid OVER like YIELD src(edge) as id",
      "GO FROM \"Tracy McGrady\" OVER like YIELD dst(edge) as vid |\nGO FROM $-.vid OVER like YIELD 3",
      "$var = GO FROM \"-1\" OVER like YIELD dst(edge) as id;\nGO FROM $var.id OVER like YIELD dst(edge) as dst",
      "GO FROM \"Boris Diaw\" OVER like YIELD dst(edge) as id |\nGO FROM $-.id OVER like YIELD dst(edge) as id |\nGO FROM $-.id OVER serve YIELD DISTINCT dst(edge) as dst, edge as e, properties(edge) as props",
      "GO 2 STEPS FROM \"Tim Duncan\" OVER like YIELD dst(edge) as id |\nYIELD DISTINCT collect($-.id) as a, collect_set($-.id) as b",
      "GO 2 STEPS FROM \"Tony Parker\" OVER like YIELD DISTINCT dst(edge) as dst",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD edge as e",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD $^ as src, $$ as dst, properties(edge) as props",
      "GO FROM \"NON EXIST VERTEX ID\" OVER like YIELD dst(edge) as id |\nGO FROM $-.id OVER like YIELD dst(edge) as id |\nGO FROM $-.id OVER serve YIELD dst(edge) as id",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD dst(edge) as id, serve.start_year as start |\nYIELD $-.id as id WHERE $-.start \u003e 20000 |\nGo FROM $-.id over serve YIELD dst(edge) as dst",
      "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD src(edge) as dst",
      "GO FROM \"Russell Westbrook\" OVER * REVERSELY YIELD dst(edge) as src",
      "GO FROM \"Dirk Nowitzki\" OVER * YIELD dst(edge) as dst",
      "GO FROM \"Paul Gasol\" OVER * YIELD $$ as node",
      "GO FROM \"Paul Gasol\" OVER *\nWHERE $$.player.name IS NOT EMPTY\nYIELD edge as e",
      "GO FROM \"Paul Gasol\" OVER *\nWHERE $$.player.name IS EMPTY\nYIELD type(edge) as type",
      "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name, type(edge) as type",
      "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name, $$ as dst, edge as e",
      "GO FROM \"Boris Diaw\" OVER * YIELD like._dst as id |\nGO FROM $-.id OVER like YIELD like._dst as id |\nGO FROM $-.id OVER serve YIELD edge as e, properties(edge) as props",
      "GO FROM \"Russell Westbrook\" OVER serve, like REVERSELY YIELD dst(edge) as dst, src(edge) as src, type(edge) as type",
      "GO FROM \"Russell Westbrook\" OVER serve, like  YIELD properties(edge) as props, type(edge) as type",
      "GO FROM \"Shaquille O\\'Neal\" OVER serve, like YIELD dst(edge) as dst",
      "GO FROM 'Russell Westbrook' OVER serve, like YIELD edge as e",
      "GO FROM \"Russell Westbrook\" OVER serve, like REVERSELY YIELD edge as e",
      "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY YIELD $^ as src, edge as e, $$ as dst, $$.player.name, $^.player.age",
      "GO FROM \"Russell Westbrook\" OVER serve, like WHERE serve.start_year \u003e 2000 YIELD edge as e",
      "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness \u003e 90 YIELD $$ as dst",
      "GO FROM \"Manu Ginobili\" OVER * WHERE $$.player.age \u003e 30 or $$.team.name not starts with \"Rockets\" YIELD DISTINCT $$ as dst",
      "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age \u003e 30 and $$.player.age \u003c 40 YIELD DISTINCT $$ as dst",
      "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, dst(edge) AS id |\nGO FROM $-.id OVER like YIELD $-.name, dst(edge) as dst",
      "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, dst(edge) AS id |\nGO FROM $-.id OVER like WHERE $-.name != $$.player.name YIELD $-.name, $^.player.name, $$ as dst",
      "GO FROM 'Yao Ming' OVER * YIELD $^ as src, id($$) AS id |\nGO FROM $-.id OVER * YIELD $-.src, id($$) as id",
      "GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, like._dst AS id\n| GO FROM $-.id OVER like YIELD $-.*, $^.player.name, $$.player.name",
      "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, like._dst AS id;\nGO FROM $var.id OVER like YIELD $var.*, $^.player.name, $$.player.name",
      "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, like._dst AS id;\nGO FROM $var.id OVER like YIELD $var.name, edge as e",
      "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, like._dst AS id;\nGO FROM $var.id OVER like  WHERE $var.name != $$.player.name YIELD $var.name, properties(edge) as props",
      "$var = GO FROM 'Tim Duncan', 'Chris Paul' OVER like YIELD $^.player.name AS name, id($$) AS id;\nGO FROM $var.id OVER like  WHERE $var.name != $$.player.name YIELD $var.name, properties(edge) as props",
      "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name IN ['Hawks', 'Suns'] YIELD $^ as src, $$ as dst",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst AS id |\nGO FROM  $-.id OVER serve WHERE $-.id IN ['Tony Parker', 123] YIELD edge as e",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst AS id |\nGO FROM  $-.id OVER serve WHERE $-.id IN ['Tony Parker', 123] AND 1 == 1 YIELD $$ as dst",
      "GO FROM 'Tim Duncan' OVER like REVERSELY YIELD $$ as dst, edge as e",
      "GO FROM 'Tim Duncan' OVER like REVERSELY YIELD $$ as dst, edge as e, id($$), id($^)",
      "GO FROM 'Tim Duncan' OVER like REVERSELY WHERE $$.player.age \u003c 35 YIELD distinct $$ as dst",
      "GO FROM 'Tim Duncan' OVER * YIELD dst(edge) as dst",
      "GO 2 STEPS FROM 'Tony Parker' OVER * YIELD distinct dst(edge)",
      "GO 3 STEPS FROM 'Tony Parker' OVER like YIELD edge as e, $^ as src",
      "GO 2 STEPS FROM 'Tony Parker' OVER * YIELD dst(edge) AS id |\nGO 2 STEPS FROM $-.id OVER * YIELD distinct src(edge) as src, dst(edge) as dst, edge as e",
      "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$ as dst, edge as e",
      "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD id($$) as dst, edge as e",
      "GO FROM 'Manu Ginobili' OVER * REVERSELY YIELD src(edge) AS id |\nGO FROM $-.id OVER serve YIELD dst(edge)",
      "GO FROM 'LeBron James' OVER serve YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve REVERSELY YIELD $^ as src, $$ as dst",
      "GO FROM 'LeBron James' OVER serve YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve REVERSELY WHERE $$.player.name != 'LeBron James'\nYIELD distinct edge as e",
      "GO FROM 'Manu Ginobili' OVER like REVERSELY YIELD src(edge) AS id |\nGO FROM $-.id OVER serve YIELD distinct dst(edge) as dst",
      "GO FROM 'Tim Duncan' OVER serve bidirect YIELD edge as e",
      "GO FROM 'Tim Duncan' OVER like bidirect YIELD edge as e",
      "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst",
      "GO FROM 'Tim Duncan' OVER like bidirect YIELD $$ as dst",
      "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness \u003e 90 YIELD properties(edge) as props, edge as e",
      "GO FROM 'Tim Duncan' OVER * bidirect YIELD edge as e",
      "GO FROM 'Tim Duncan' OVER serve YIELD edge as e, edge as e",
      "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\" YIELD $^ as src, $$ as dst, edge as e",
      "GO FROM 'Boris Diaw' OVER serve WHERE (string)serve.start_year CONTAINS \"05\" YIELD edge as e, properties(edge) as props",
      "GO FROM 'Boris Diaw' OVER serve WHERE $^.player.name CONTAINS \"Boris\" YIELD $$ as dst, dst(edge) as dstvid, edge as e",
      "GO FROM 'Boris Diaw' OVER serve WHERE !($^.player.name CONTAINS \"Boris\") YIELD $$ as dst, edge as e",
      "GO FROM 'Boris Diaw' OVER serve WHERE \"Leo\" CONTAINS \"Boris\" YIELD edge as e",
      "GO 0 TO 0 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT dst(edge) as dst",
      "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT dst(edge) as dst",
      "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT dst(edge) as dst, edge as e, $$.player.name, $^.player.age, like.likeness",
      "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT $$ as dst, $^ as src",
      "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT id($$) as dst, $^ as src",
      "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name, dst(edge) as dst, src(edge) as src",
      "GO 0 TO 3 STEPS FROM 'Tim Duncan' OVER serve YIELD edge as e, $$ as dst",
      "GO 2 TO 3 STEPS FROM 'Tim Duncan' OVER serve YIELD edge as e",
      "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like REVERSELY YIELD DISTINCT src(edge) as dst",
      "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like REVERSELY YIELD DISTINCT edge as e",
      "GO 2 TO 2 STEPS FROM 'Tony Parker' OVER like REVERSELY YIELD DISTINCT $$ as name",
      "GO 1 TO 3 STEPS FROM 'Spurs' OVER serve REVERSELY YIELD type(edge) as type, rank(edge) as rank,  $$ as dst",
      "GO 0 TO 3 STEPS FROM 'Spurs' OVER serve REVERSELY YIELD edge as e",
      "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT src(edge) as src, dst(edge) as dst",
      "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD serve._dst, like._dst, edge as e",
      "GO 0 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD edge as e, $$ as dst, $^ as src",
      "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * YIELD dst(edge) as dst, serve.start_year, like.likeness, $$.player.name",
      "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * REVERSELY YIELD edge as e",
      "GO 0 TO 2 STEPS FROM 'Russell Westbrook' OVER * REVERSELY YIELD $^.player.name, $^ as src, type(edge) as type",
      "GO 1 to 3 steps FROM \"Tim Duncan\" OVER like YIELD edge as e, properties(edge) as props, concat(src(edge), \" like \", dst(edge), \" @ \", properties($$).name, \" # \", properties($^).age)  as result",
      "GO FROM 'Tim Duncan' OVER serve YIELD $$.player.name as name, edge as e, $$ as dst",
      "GO 0 STEPS FROM 'Tim Duncan' OVER serve BIDIRECT YIELD $$ as dst",
      "GO 0 STEPS FROM 'Tim Duncan' OVER serve YIELD edge as e",
      "GO 0 STEPS FROM 'Tim Duncan' OVER like YIELD dst(edge) as id |\nGO FROM $-.id OVER serve YIELD dst(edge) as id",
      "GO FROM 'Tim Duncan' OVER like YIELD src(edge) as src, dst(edge) as dst |\nGO FROM $-.src OVER like YIELD $-.src as src, like._dst as dst, $^ as a, $$ as b",
      "$a = GO FROM 'Tim Duncan' OVER like YIELD src(edge) as src, dst(edge) as dst;\nGO FROM $a.src OVER like YIELD $a.src as src, like._dst as dst, edge as e",
      "GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst |\nGO 1 TO 2 STEPS FROM $-.src OVER like YIELD $-.src as src, like._dst as dst, $^ as snode, $$ as dnode",
      "GO FROM 'Tim Duncan' OVER like YIELD like._src as src, like._dst as dst |\nGO 1 TO 2 STEPS FROM $-.src OVER like YIELD $-.src as src, $-.dst, like._dst as dst, edge as e",
      "GO FROM 'Danny Green' OVER like YIELD src(edge) AS src, dst(edge) AS dst |\nGO FROM $-.dst OVER teammate YIELD $-.src AS src, $-.dst, $$ as dst",
      "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, $$ as dst",
      "GO FROM 'Tony Parker' OVER like YIELD like._src as src, dst(edge) as dst |\nGO 2 STEPS FROM $-.src OVER like YIELD $-.src, $-.dst, properties(edge) as props, edge as e",
      "$a = GO FROM 'Tony Parker' OVER like YIELD like._src as src, like._dst as dst;\nGO 2 STEPS FROM $a.src OVER like YIELD $a.src, $a.dst, properties(edge) as props, edge as e",
      "$a = GO FROM 'Tony Parker' OVER like YIELD src(edge) as src, dst(edge) as dst;\nGO 2 STEPS FROM $a.src OVER like YIELD $a.src as src, $a.dst, src(edge) as like_src, like._dst\n| ORDER BY $-.src,$-.like_src | OFFSET 1 LIMIT 2",
      "$a = GO FROM 'Tony Parker' OVER like YIELD like._src as src, like._dst as dst;\nGO 2 STEPS FROM $a.src OVER like YIELD $a.src as src, $$ as dst, src(edge) as like_src, edge as e\n| ORDER BY $-.src,$-.like_src | LIMIT 2 OFFSET 1",
      "GO 1 TO 2 STEPS FROM \"Tim Duncan\" OVER like WHERE like._dst != \"YAO MING\" YIELD dst(edge) AS vid\n| GROUP BY $-.vid YIELD 1 AS id\n| GROUP BY $-.id YIELD COUNT($-.id);",
      "GO 1 TO 2 STEPS FROM \"Tim Duncan\" OVER * WHERE like._dst != \"YAO MING\" YIELD dst(edge) AS vid\n| GROUP BY $-.vid YIELD 1 AS id\n| GROUP BY $-.id YIELD COUNT($-.id);",
      "GO FROM \"Tim Duncan\" OVER like WHERE like._dst == \"Tony Parker\" YIELD edge as e | limit 10;",
      "GO 2 STEPS FROM \"Tim Duncan\" OVER serve YIELD edge as e",
      "GO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst",
      "GO 10000000000000 STEPS FROM \"Tim Duncan\" OVER serve YIELD dst(edge) as dst",
      "GO 1 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD $$ as dst",
      "GO 2 TO 10 STEPS FROM \"Tim Duncan\" OVER serve YIELD edge as e, $$ as dst",
      "GO 1000000000 TO 1000000002 STEPS FROM \"Tim Duncan\" OVER serve YIELD dst(edge) as dst, src(edge) as src",
      "GO FROM \"Tim Duncan\" OVER like LIMIT [1];",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like LIMIT [1, 2, 2];",
      "GO FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\"]  LIMIT [1];",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\", $$.player.age\u003e20, $$.player.age\u003e22] LIMIT [1, 2, 2];",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst  SAMPLE [1];",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst SAMPLE [1, 3, 2];",
      "GO FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\"] YIELD like._dst SAMPLE [1];",
      "GO 3 STEPS FROM \"Tim Duncan\" OVER like WHERE [like._dst == \"Tony Parker\", $$.player.age\u003e20, $$.player.age\u003e22] YIELD like._dst SAMPLE [1, 2, 2];",
      "GO FROM 'Tony Parker' OVER like YIELD $$.player.name, $^.team.name, $$ as dst",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name |\nGO 1 TO 2 STEPS FROM $-.name OVER like REVERSELY YIELD like._dst AS dst, $$.player.name AS name, edge as e, $$ as dstnode, $^ as srcnode",
      "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age \u003e 38 YIELD edge as e,  $$ as dst",
      "GO FROM 'Tim Duncan' OVER like WHERE properties(edge).age \u003e 38 YIELD edge as e,  $$ as dst",
      "GO FROM 'Tim Duncan' OVER like WHERE properties(edge).likeness \u003e 80 YIELD edge as e,  $$ as dst",
      "GO 1 TO 2 STEPS FROM 'Russell Westbrook' OVER * where properties($$).age \u003e 20 YIELD $$ as dst",
      "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT where properties($$).age \u003e 30  YIELD DISTINCT properties(edge) as props, edge as e",
      "GO FROM 'Danny Green' OVER like YIELD src(edge) AS src, dst(edge) AS dst |\nGO FROM $-.dst OVER teammate where properties($$).age \u003e 35 YIELD $-.src AS src, $-.dst, $$ as dst",
      "GO FROM 'Danny Green' OVER like YIELD src(edge) AS src, dst(edge) AS dst |\nGO FROM $-.dst OVER teammate where properties($^).age \u003e 35 YIELD $-.src AS src, $-.dst, $$ as dst",
      "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY WHERE properties(edge).likeness != 80 YIELD $$ as dst, edge as e",
      "$var = GO FROM \"Tim Duncan\", \"Chris Paul\" OVER like WHERE properties($$).age \u003e 20 YIELD id($$) as id;\nGO FROM $var.id OVER * WHERE properties(edge).likeness \u003e 80 YIELD $$ as dst"
    ]
  },
  {
    "path": "go",
    "file_name": "GroupbyLimit.IntVid",
    "statements": [
      "GO FROM hash(\"Marco Belinelli\") OVER serve YIELD $$.team.name AS name | ORDER BY $-.name | LIMIT 5",
      "GO FROM hash(\"Marco Belinelli\") OVER serve YIELD $$.team.name AS name | ORDER BY $-.name | LIMIT 2,2",
      "GO FROM hash(\"Marco Belinelli\") OVER serve YIELD $$.team.name AS name | ORDER BY $-.name | LIMIT 2 OFFSET 2",
      "GO FROM hash(\"Marco Belinelli\") OVER like YIELD $$.team.name AS name, like._dst AS id | ORDER BY $-.name | LIMIT 1\n| GO FROM $-.id OVER like YIELD $$.player.name AS name | ORDER BY $-.name | LIMIT 2",
      "GO FROM hash(\"Danny Green\") OVER serve YIELD $$.team.name AS name | LIMIT 5",
      "GO FROM hash(\"Danny Green\") OVER serve YIELD $$.team.name AS name | LIMIT 3, 2",
      "GO FROM hash(\"Danny Green\") OVER serve YIELD $$.team.name AS name | LIMIT 1 OFFSET 0",
      "GO FROM hash('Aron Baynes'), hash('Tracy McGrady') OVER serve\nYIELD $$.team.name AS name, serve._dst AS id, serve.start_year AS start_year, serve.end_year AS end_year\n| GROUP BY $-.name, $-.start_year\nYIELD $-.name AS teamName, $-.start_year AS start_year, MAX($-.start_year), MIN($-.end_year), AVG($-.end_year) AS avg_end_year,\nSTD($-.end_year) AS std_end_year, COUNT($-.id)",
      "GO FROM hash(\"Marco Belinelli\") OVER serve YIELD $$.team.name AS name, serve._dst AS id, serve.start_year AS start_year, serve.end_year AS end_year\n| GROUP BY $-.start_year YIELD COUNT($-.id), $-.start_year AS start_year, AVG($-.end_year) as avg",
      "GO FROM hash(\"Carmelo Anthony\"),hash(\"Dwyane Wade\") OVER like YIELD $$.player.name AS name | GROUP BY $-.name\nYIELD $-.name AS name, SUM(1.5) AS sum, COUNT(*) AS count, 1+1 AS cal",
      "GO FROM hash(\"Paul Gasol\") OVER like YIELD $$.player.age AS age, like._dst AS id\n| GROUP BY $-.id YIELD $-.id AS id, SUM($-.age) AS age\n| GO FROM $-.id OVER serve YIELD $$.team.name AS name, $-.age AS sumAge",
      "GO FROM hash(\"Carmelo Anthony\"), hash(\"Dwyane Wade\") OVER like\nYIELD $$.player.name AS name, $$.player.age AS dst_age, $$.player.age AS src_age, like.likeness AS likeness\n| GROUP BY $-.name YIELD $-.name AS name, SUM($-.dst_age) AS sum_dst_age, AVG($-.dst_age) AS avg_dst_age,\nMAX($-.src_age) AS max_src_age, MIN($-.src_age) AS min_src_age, BIT_AND(1) AS bit_and, BIT_OR(2) AS bit_or, BIT_XOR(3) AS bit_xor,\nCOUNT($-.likeness)",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._dst as dst\n| GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == hash('Tim Duncan') as following\n| GROUP BY $-.dst YIELD $-.dst AS dst, BIT_OR($-.following) AS following",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._dst as dst\n| GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == hash('Tim Duncan') as following\n| GROUP BY $-.dst YIELD $-.dst AS dst, BIT_OR(case when $-.following==true then 1 else 0 end) AS following",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._dst as dst\n|  GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == hash('Tim Duncan') as following\n| GROUP BY $-.dst YIELD $-.dst AS dst, BIT_AND($-.following) AS following",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._dst as dst\n| GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == hash('Tim Duncan') as following\n| GROUP BY $-.dst YIELD $-.dst AS dst, BIT_AND(case when $-.following==true then 1 else 0 end) AS following",
      "GO FROM\n  hash('Carmelo Anthony'),\n  hash('Dwyane Wade')\nOVER like\nYIELD\n  $$.player.name AS name,\n  $$.player.age AS dst_age,\n  $$.player.age AS src_age,\n  like.likeness AS likeness |\nGROUP BY $-.name\nYIELD\n  $-.name AS name,\n  SUM($-.dst_age) AS sum_dst_age,\n  AVG($-.dst_age) AS avg_dst_age,\n  MAX($-.src_age) AS max_src_age,\n  MIN($-.src_age) AS min_src_age,\n  BIT_AND(1) AS bit_and,\n  BIT_OR(2) AS bit_or,\n  BIT_XOR(3) AS bit_xor,\n  COUNT($-.likeness),\n  COUNT(DISTINCT $-.likeness)",
      "GO FROM hash(\"Carmelo Anthony\"),hash(\"Dwyane Wade\") OVER like YIELD $$.player.name AS name | GROUP BY $-.name\nYIELD $-.name AS name, SUM(1.5) AS sum, COUNT(*) AS count | ORDER BY $-.sum, $-.name",
      "GO FROM hash(\"Carmelo Anthony\"),hash(\"Dwyane Wade\") OVER like YIELD $$.player.name AS name | GROUP BY $-.name\nYIELD $-.name AS name, SUM(1.5) AS sum, COUNT(*) AS count | ORDER BY $-.sum, $-.name DESC | LIMIT 2",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER like YIELD $$.player.name AS name | GROUP BY $-.name\nYIELD $-.name AS name, SUM(1.5) AS sum, COUNT(*) AS count | ORDER BY $-.sum | LIMIT 2",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team\n| YIELD $-.name as name WHERE $-.start \u003e 20000 | GROUP BY $-.name YIELD $-.name AS name",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team\n| YIELD $-.name as name WHERE $-.start \u003e 20000 | Limit 1"
    ]
  },
  {
    "path": "go",
    "file_name": "GroupbyLimit",
    "statements": [
      "GO FROM \"Marco Belinelli\" OVER serve YIELD $$.team.name AS name | ORDER BY $-.name | LIMIT 5",
      "GO FROM \"Marco Belinelli\" OVER serve YIELD $$.team.name AS name | ORDER BY $-.name | LIMIT 2,2",
      "GO FROM \"Marco Belinelli\" OVER serve YIELD $$.team.name AS name | ORDER BY $-.name | LIMIT 2 OFFSET 2",
      "GO FROM \"Marco Belinelli\" OVER like YIELD $$.team.name AS name, like._dst AS id | ORDER BY $-.name | LIMIT 1\n| GO FROM $-.id OVER like YIELD $$.player.name AS name | ORDER BY $-.name | LIMIT 2",
      "GO FROM \"Danny Green\" OVER serve YIELD $$.team.name AS name | LIMIT 5",
      "GO FROM \"Danny Green\" OVER serve YIELD $$.team.name AS name | LIMIT 3, 2",
      "GO FROM \"Danny Green\" OVER serve YIELD $$.team.name AS name | LIMIT 1 OFFSET 0",
      "GO FROM 'Aron Baynes', 'Tracy McGrady' OVER serve\n                YIELD $$.team.name AS name,\n                serve._dst AS id,\n                serve.start_year AS start_year,\n                serve.end_year AS end_year\n                | GROUP BY $-.name, $-.start_year\n                YIELD $-.name AS teamName,\n                $-.start_year AS start_year,\n                MAX($-.start_year),\n                MIN($-.end_year),\n                AVG($-.end_year) AS avg_end_year,\n                STD($-.end_year) AS std_end_year,\n                COUNT($-.id)",
      "GO FROM \"Marco Belinelli\" OVER serve YIELD $$.team.name AS name, serve._dst AS id, serve.start_year AS start_year, serve.end_year AS end_year\n| GROUP BY $-.start_year YIELD COUNT($-.id), $-.start_year AS start_year, AVG($-.end_year) as avg",
      "GO FROM \"Carmelo Anthony\",\"Dwyane Wade\" OVER like YIELD $$.player.name AS name | GROUP BY $-.name\nYIELD $-.name AS name, SUM(1.5) AS sum, COUNT(*) AS count, 1+1 AS cal",
      "GO FROM \"Paul Gasol\" OVER like YIELD $$.player.age AS age, like._dst AS id\n| GROUP BY $-.id YIELD $-.id AS id, SUM($-.age) AS age\n| GO FROM $-.id OVER serve YIELD $$.team.name AS name, $-.age AS sumAge",
      "GO FROM \"Carmelo Anthony\",\"Dwyane Wade\" OVER like\nYIELD $$.player.name AS name, $$.player.age AS dst_age, $$.player.age AS src_age, like.likeness AS likeness\n| GROUP BY $-.name YIELD $-.name AS name, SUM($-.dst_age) AS sum_dst_age, AVG($-.dst_age) AS avg_dst_age,\nMAX($-.src_age) AS max_src_age, MIN($-.src_age) AS min_src_age, BIT_AND(1) AS bit_and, BIT_OR(2) AS bit_or, BIT_XOR(3) AS bit_xor,\nCOUNT($-.likeness)",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst as dst\n| GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == 'Tim Duncan' as following\n| GROUP BY $-.dst YIELD $-.dst AS dst, BIT_OR($-.following) AS following",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst as dst\n| GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == 'Tim Duncan' as following\n| GROUP BY $-.dst YIELD $-.dst AS dst, BIT_OR(case when $-.following==true then 1 else 0 end) AS following",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst as dst\n|  GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == 'Tim Duncan' as following\n| GROUP BY $-.dst YIELD $-.dst AS dst, BIT_AND($-.following) AS following",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst as dst\n| GO FROM $-.dst over like YIELD $-.dst as dst, like._dst == 'Tim Duncan' as following\n| GROUP BY $-.dst YIELD $-.dst AS dst, BIT_AND(case when $-.following==true then 1 else 0 end) AS following",
      "GO FROM\n  'Carmelo Anthony',\n  'Dwyane Wade'\nOVER like\nYIELD\n  $$.player.name AS name,\n  $$.player.age AS dst_age,\n  $$.player.age AS src_age,\n  like.likeness AS likeness |\nGROUP BY $-.name\nYIELD\n  $-.name AS name,\n  SUM($-.dst_age) AS sum_dst_age,\n  AVG($-.dst_age) AS avg_dst_age,\n  MAX($-.src_age) AS max_src_age,\n  MIN($-.src_age) AS min_src_age,\n  BIT_AND(1) AS bit_and,\n  BIT_OR(2) AS bit_or,\n  BIT_XOR(3) AS bit_xor,\n  COUNT($-.likeness),\n  COUNT(DISTINCT $-.likeness)",
      "GO FROM \"Carmelo Anthony\",\"Dwyane Wade\" OVER like YIELD $$.player.name AS name | GROUP BY $-.name\nYIELD $-.name AS name, SUM(1.5) AS sum, COUNT(*) AS count | ORDER BY $-.sum, $-.name",
      "GO FROM \"Carmelo Anthony\",\"Dwyane Wade\" OVER like YIELD $$.player.name AS name | GROUP BY $-.name\nYIELD $-.name AS name, SUM(1.5) AS sum, COUNT(*) AS count | ORDER BY $-.sum, $-.name DESC | LIMIT 2",
      "GO FROM \"NON EXIST VERTEX ID\" OVER like YIELD $$.player.name AS name | GROUP BY $-.name\nYIELD $-.name AS name, SUM(1.5) AS sum, COUNT(*) AS count | ORDER BY $-.sum | LIMIT 2",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team\n| YIELD $-.name as name WHERE $-.start \u003e 20000 | GROUP BY $-.name YIELD $-.name AS name",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team\n| YIELD $-.name as name WHERE $-.start \u003e 20000 | Limit 1"
    ]
  },
  {
    "path": "go",
    "file_name": "Orderby",
    "statements": [
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team| ORDER BY $-.name",
      "GO FROM \"Marco Belinelli\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team |\nYIELD $-.name as name WHERE $-.start \u003e 20000 |\nORDER BY $-.name",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | ORDER BY $-.team",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | ORDER BY $-.team ASC",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | ORDER BY $-.team DESC",
      "GO FROM \"Boris Diaw\",\"LaMarcus Aldridge\" OVER serve WHERE serve.start_year \u003e= 2012 YIELD $$.team.name as team, $^.player.name as player,\n$^.player.age as age, serve.start_year as start | ORDER BY $-.team, $-.age",
      "GO FROM \"Boris Diaw\",\"LaMarcus Aldridge\" OVER serve WHERE serve.start_year \u003e= 2012 YIELD $$.team.name as team, $^.player.name as player,\n$^.player.age as age, serve.start_year as start | ORDER BY $-.team, $-.age ASC",
      "GO FROM \"Boris Diaw\",\"LaMarcus Aldridge\" OVER serve WHERE serve.start_year \u003e= 2012 YIELD $$.team.name as team, $^.player.name as player,\n$^.player.age as age, serve.start_year as start | ORDER BY $-.team, $-.age DESC",
      "GO FROM \"Boris Diaw\",\"LaMarcus Aldridge\" OVER serve WHERE serve.start_year \u003e= 2012 YIELD $$.team.name as team, $^.player.name as player,\n$^.player.age as age, serve.start_year as start | ORDER BY $-.team DESC, $-.age ASC",
      "GO FROM \"Boris Diaw\",\"LaMarcus Aldridge\" OVER serve WHERE serve.start_year \u003e= 2012 YIELD $$.team.name as team, $^.player.name as player,\n$^.player.age as age, serve.start_year as start | ORDER BY $-.team DESC, $-.age DESC",
      "GO FROM \"Boris Diaw\", \"LaMarcus Aldridge\" OVER serve WHERE serve.start_year \u003e= 2012 YIELD $$.team.name as team, $^.player.name as player,\n$^.player.age as age, serve.start_year as start | ORDER BY $-.team ASC, $-.age ASC",
      "GO FROM \"Boris Diaw\", \"LaMarcus Aldridge\" OVER serve WHERE serve.start_year \u003e= 2012 YIELD $$.team.name as team, $^.player.name as player,\n$^.player.age as age, serve.start_year as start | ORDER BY $-.team ASC, $-.age DESC",
      "GO FROM \"Boris Diaw\" OVER like YIELD like._dst as id | ORDER BY $-.id | GO FROM $-.id over serve YIELD serve._dst",
      "$var = GO FROM \"Tony Parker\" OVER like YIELD like._dst AS dst; ORDER BY $var.dst DESC",
      "$var = GO FROM \"Tony Parker\" OVER like YIELD like._dst AS dst, like.likeness AS likeness; ORDER BY $var.dst DESC, $var.likeness",
      "$var = GO FROM \"Tony Parker\" OVER like YIELD like._dst AS dst;\nORDER BY $var.dst DESC | FETCH PROP ON * $-.dst YIELD vertex as node | ORDER by $-.node DESC",
      "UNWIND [3, NULL, 1] AS a\nUNWIND [1, 4, NULL] AS b\nRETURN a, b\nORDER BY a ASC, b DESC"
    ]
  },
  {
    "path": "go",
    "file_name": "SampleLimit",
    "statements": [
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst LIMIT [1]",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst LIMIT [3]",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst SAMPLE [1]",
      "GO FROM 'Tim Duncan' OVER like YIELD like._dst SAMPLE [3]",
      "GO 3 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst LIMIT [1, 2, 3]"
    ]
  },
  {
    "path": "go",
    "file_name": "SampleLimit.intVid",
    "statements": [
      "GO FROM hash('Tim Duncan') OVER like YIELD like._dst LIMIT [1]",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._dst LIMIT [3]",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._dst SAMPLE [1]",
      "GO FROM hash('Tim Duncan') OVER like YIELD like._dst SAMPLE [3]",
      "GO 3 STEPS FROM hash('Tim Duncan') OVER like YIELD like._dst LIMIT [1, 2, 3]"
    ]
  },
  {
    "path": "index",
    "file_name": "Index.IntVid",
    "statements": [
      "CREATE TAG INDEX single_tag_index ON tag_1(col2);",
      "CREATE TAG INDEX multi_tag_index ON tag_1(col2, col3);",
      "CREATE TAG INDEX disorder_tag_index ON tag_1(col3, col2);",
      "SHOW TAG INDEX STATUS;",
      "DESCRIBE TAG INDEX multi_tag_index;",
      "DESC TAG INDEX multi_tag_index;",
      "SHOW CREATE TAG INDEX multi_tag_index",
      "DROP TAG INDEX multi_tag_index;",
      "Show TAG INDEXES;",
      "Show TAG INDEXES BY tag_1;",
      "DROP TAG INDEX IF EXISTS not_exists_tag_index",
      "CREATE EDGE INDEX single_edge_index ON edge_1(col2);",
      "CREATE EDGE INDEX multi_edge_1_index ON edge_1(col2, col3)",
      "CREATE EDGE INDEX disorder_edge_1_index ON edge_1(col3, col2)",
      "SHOW EDGE INDEX STATUS",
      "DESCRIBE EDGE INDEX multi_edge_1_index",
      "DESC EDGE INDEX multi_edge_1_index",
      "DROP EDGE INDEX multi_edge_1_index;",
      "SHOW EDGE INDEXES",
      "SHOW EDGE INDEXES BY edge_1",
      "DROP EDGE INDEX IF EXISTS not_exists_edge_index",
      "CREATE TAG INDEX single_person_ttl_index ON person_ttl(age)",
      "DROP TAG INDEX single_person_ttl_index",
      "ALTER TAG person_ttl ttl_duration = 100, ttl_col = \"age\"",
      "ALTER TAG person_ttl ttl_duration = 100, ttl_col = \"gender\"",
      "CREATE TAG INDEX single_person_ttl_index_second_gender ON person_ttl(gender)",
      "CREATE TAG INDEX single_person_ttl_index_second_age ON person_ttl(age)",
      "DROP TAG INDEX single_person_ttl_index_second_gender",
      "DROP TAG INDEX single_person_ttl_index_second_age",
      "ALTER TAG person_ttl  ttl_col = \"\"",
      "ALTER TAG person_ttl ttl_duration = 100, ttl_col = \"age\"",
      "ALTER TAG person_ttl ttl_duration = 100, ttl_col = \"gender\"",
      "CREATE TAG person_ttl_2(number int, age int, gender string)\n                       ttl_duration = 200, ttl_col = \"age\"",
      "CREATE TAG INDEX person_ttl_2_index_number ON person_ttl_2(number)",
      "CREATE TAG INDEX person_ttl_2_index_age ON person_ttl_2(age)",
      "DROP TAG INDEX person_ttl_2_index_number",
      "DROP TAG INDEX person_ttl_2_index_age",
      "CREATE EDGE INDEX single_edge_1_ttl_index ON edge_1_ttl(start_time)",
      "DROP EDGE INDEX single_edge_1_ttl_index",
      "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"start_time\"",
      "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"degree\"",
      "CREATE EDGE INDEX edge_1_ttl_index_second_degree ON edge_1_ttl(degree)",
      "CREATE EDGE INDEX edge_1_ttl_index_second_start_time ON edge_1_ttl(start_time)",
      "DROP EDGE INDEX edge_1_ttl_index_second_degree",
      "DROP EDGE INDEX edge_1_ttl_index_second_start_time",
      "ALTER EDGE edge_1_ttl  ttl_col = \"\"",
      "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"start_time\"",
      "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"degree\"",
      "CREATE EDGE edge_1_ttl_2(degree int, start_time int) ttl_duration = 200, ttl_col = \"start_time\"",
      "CREATE EDGE INDEX edge_1_ttl_index_2_degree ON edge_1_ttl_2(degree)",
      "CREATE EDGE INDEX edge_1_ttl_index_2_start_time ON edge_1_ttl_2(start_time)",
      "DROP EDGE INDEX edge_1_ttl_index_2_degree",
      "DROP EDGE INDEX edge_1_ttl_index_2_start_time",
      "CREATE TAG INDEX single_person_index ON tag_1(col1)",
      "ALTER TAG tag_1 ADD (col5 int)",
      "CREATE TAG INDEX single_person_index2 ON tag_1(col5)",
      "LOOKUP ON tag_1 WHERE tag_1.col5 == 5 YIELD tag_1.col5, tag_1.col1",
      "LOOKUP ON tag_1 WHERE tag_1.col5 == 5 YIELD tag_1.col1, tag_1.col5",
      "CREATE TAG INDEX tag_index_status ON tag_status(col1);",
      "SHOW TAG INDEX STATUS;",
      "DROP TAG INDEX tag_index_status",
      "SHOW TAG INDEX STATUS;",
      "CREATE EDGE INDEX edge_index_status ON edge_status(col1);",
      "SHOW EDGE INDEX STATUS;",
      "DROP EDGE INDEX edge_index_status",
      "SHOW EDGE INDEX STATUS;",
      "CREATE TAG INDEX alter_index ON alter_tag(id);"
    ]
  },
  {
    "path": "index",
    "file_name": "Index",
    "statements": [
      "CREATE TAG INDEX single_tag_index ON tag_1(col2);",
      "CREATE TAG INDEX IF NOT EXISTS single_tag_index_1 ON tag_1(col2);",
      "CREATE TAG INDEX multi_tag_index ON tag_1(col2, col3);",
      "CREATE TAG INDEX disorder_tag_index ON tag_1(col3, col2);",
      "SHOW TAG INDEX STATUS;",
      "DESCRIBE TAG INDEX multi_tag_index;",
      "DESC TAG INDEX multi_tag_index;",
      "SHOW CREATE TAG INDEX multi_tag_index",
      "DROP TAG INDEX multi_tag_index;",
      "Show TAG INDEXES;",
      "Show TAG INDEXES BY tag_1;",
      "DROP TAG INDEX IF EXISTS not_exists_tag_index",
      "CREATE EDGE INDEX single_edge_index ON edge_1(col2);",
      "CREATE EDGE INDEX IF NOT EXISTS single_edge_index_1 ON edge_1(col2);",
      "CREATE EDGE INDEX multi_edge_1_index ON edge_1(col2, col3)",
      "CREATE EDGE INDEX disorder_edge_1_index ON edge_1(col3, col2)",
      "INSERT EDGE\n  edge_1(col1, col2, col3, col4)\nVALUES\n  \"Tim\"  -\u003e \"May\":  (\"Good\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\")),\n  \"Tim\"  -\u003e \"Tony\": (\"Good\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\")),\n  \"Tony\" -\u003e \"May\":  (\"Like\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\")),\n  \"May\"  -\u003e \"Tim\":  (\"Like\", 18, 11.11, `timestamp`(\"2000-10-10T10:00:00\"))",
      "SHOW EDGE INDEX STATUS",
      "DESCRIBE EDGE INDEX multi_edge_1_index",
      "DESC EDGE INDEX multi_edge_1_index",
      "DROP EDGE INDEX multi_edge_1_index;",
      "SHOW EDGE INDEXES",
      "SHOW EDGE INDEXES BY edge_1",
      "DROP EDGE INDEX IF EXISTS not_exists_edge_index",
      "CREATE TAG INDEX single_person_ttl_index ON person_ttl(age)",
      "DROP TAG INDEX single_person_ttl_index",
      "ALTER TAG person_ttl ttl_duration = 100, ttl_col = \"age\"",
      "ALTER TAG person_ttl ttl_duration = 100, ttl_col = \"gender\"",
      "CREATE TAG INDEX single_person_ttl_index_second_gender ON person_ttl(gender)",
      "CREATE TAG INDEX single_person_ttl_index_second_age ON person_ttl(age)",
      "DROP TAG INDEX single_person_ttl_index_second_gender",
      "DROP TAG INDEX single_person_ttl_index_second_age",
      "ALTER TAG person_ttl  ttl_col = \"\"",
      "ALTER TAG person_ttl ttl_duration = 100, ttl_col = \"age\"",
      "ALTER TAG person_ttl ttl_duration = 100, ttl_col = \"gender\"",
      "CREATE TAG person_ttl_2(number int, age int, gender string)\n                       ttl_duration = 200, ttl_col = \"age\"",
      "CREATE TAG INDEX person_ttl_2_index_number ON person_ttl_2(number)",
      "CREATE TAG INDEX person_ttl_2_index_age ON person_ttl_2(age)",
      "DROP TAG INDEX person_ttl_2_index_number",
      "DROP TAG INDEX person_ttl_2_index_age",
      "CREATE EDGE INDEX single_edge_1_ttl_index ON edge_1_ttl(start_time)",
      "DROP EDGE INDEX single_edge_1_ttl_index",
      "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"start_time\"",
      "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"degree\"",
      "CREATE EDGE INDEX edge_1_ttl_index_second_degree ON edge_1_ttl(degree)",
      "CREATE EDGE INDEX edge_1_ttl_index_second_start_time ON edge_1_ttl(start_time)",
      "DROP EDGE INDEX edge_1_ttl_index_second_degree",
      "DROP EDGE INDEX edge_1_ttl_index_second_start_time",
      "ALTER EDGE edge_1_ttl  ttl_col = \"\"",
      "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"start_time\"",
      "ALTER edge edge_1_ttl ttl_duration = 100, ttl_col = \"degree\"",
      "CREATE EDGE edge_1_ttl_2(degree int, start_time int) ttl_duration = 200, ttl_col = \"start_time\"",
      "CREATE EDGE INDEX edge_1_ttl_index_2_degree ON edge_1_ttl_2(degree)",
      "CREATE EDGE INDEX edge_1_ttl_index_2_start_time ON edge_1_ttl_2(start_time)",
      "DROP EDGE INDEX edge_1_ttl_index_2_degree",
      "DROP EDGE INDEX edge_1_ttl_index_2_start_time",
      "CREATE TAG INDEX single_person_index ON tag_1(col1)",
      "ALTER TAG tag_1 ADD (col5 int)",
      "CREATE TAG INDEX single_person_index2 ON tag_1(col5)",
      "LOOKUP ON tag_1 WHERE tag_1.col5 == 5 YIELD tag_1.col5, tag_1.col1",
      "LOOKUP ON tag_1 WHERE tag_1.col5 == 5 YIELD tag_1.col1, tag_1.col5",
      "CREATE TAG INDEX tag_index_status ON tag_status(col1);",
      "SHOW TAG INDEX STATUS;",
      "DROP TAG INDEX tag_index_status",
      "SHOW TAG INDEX STATUS;",
      "CREATE EDGE INDEX edge_index_status ON edge_status(col1);",
      "SHOW EDGE INDEX STATUS;",
      "DROP EDGE INDEX edge_index_status",
      "CREATE TAG INDEX alter_index ON alter_tag(id);",
      "ALTER TAG alter_tag ADD (type int)",
      "LOOKUP ON alter_tag WHERE alter_tag.id == 1 YIELD alter_tag.type",
      "CREATE TAG INDEX id_tag_index ON id_tag(id);\nCREATE TAG INDEX name_tag_index ON name_tag(name(10));",
      "LOOKUP ON id_tag WHERE id_tag.id == 100 YIELD id(vertex) as id",
      "LOOKUP ON name_tag WHERE name_tag.name == \"100\" YIELD id(vertex) as id",
      "CREATE TAG INDEX id_tag_index ON id_tag(id);\nCREATE TAG INDEX name_tag_index ON name_tag(name(10));\nCREATE TAG INDEX age_tag_index ON age_tag(age);",
      "LOOKUP ON id_tag WHERE id_tag.id == 100 YIELD id(vertex) as id",
      "LOOKUP ON name_tag WHERE name_tag.name == \"100\" YIELD id(vertex) as id",
      "LOOKUP ON age_tag WHERE age_tag.age == 8 YIELD id(vertex) as id",
      "CREATE EDGE INDEX id_edge_index ON id_edge(id);\nCREATE EDGE INDEX name_edge_index ON name_edge(name(10));",
      "LOOKUP ON id_edge WHERE id_edge.id == 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON name_edge WHERE name_edge.name == \"100\" YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "CREATE EDGE INDEX id_edge_index ON id_edge(id);\nCREATE EDGE INDEX name_edge_index ON name_edge(name(10));\nCREATE EDGE INDEX age_edge_index ON age_edge(age);",
      "LOOKUP ON id_edge WHERE id_edge.id == 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON name_edge WHERE name_edge.name == \"100\" YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON age_edge WHERE age_edge.age == 8 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "SHOW CREATE TAG INDEX `player_name_index`",
      "SHOW CREATE TAG INDEX `player_age_index`",
      "drop tag index recinfo_name_index",
      "create tag index recinfo_name_index on recinfo(name(8));",
      "drop tag index recinfo_index",
      "create tag index recinfo_index on recinfo();",
      "ALTER TAG student ADD (teacher string)",
      "ALTER TAG student ADD (alias string default \"abc\")",
      "CREATE TAG INDEX student_teacher ON student(teacher(10))",
      "CREATE TAG INDEX student_alias ON student(alias(10))",
      "CREATE TAG INDEX student_ta ON student(alias(10), teacher(10))",
      "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id",
      "LOOKUP ON student WHERE student.name \u003c \"a\" YIELD id(vertex) as id, student.name as name, student.age as age",
      "LOOKUP ON student WHERE student.teacher \u003c \"a\" YIELD id(vertex) as id",
      "LOOKUP ON student WHERE student.teacher \u003e \"a\" YIELD id(vertex) as id",
      "LOOKUP ON student WHERE student.teacher == \"a\" YIELD id(vertex) as id",
      "UPDATE VERTEX ON student \"Alen\" SET teacher = \"Bob\"",
      "INSERT VERTEX\n  student(age, alias, name, teacher)\nVALUES\n  \"Bob\" : (28, \"abc\", \"Bob\", \"Candy\")",
      "LOOKUP ON student WHERE student.teacher \u003c \"a\" YIELD id(vertex) as id",
      "LOOKUP ON student WHERE student.alias == \"abc\" YIELD id(vertex) as id",
      "LOOKUP ON student WHERE student.alias \u003c \"b\" and student.teacher \u003c \"abc\" YIELD DISTINCT id(vertex) as id, student.teacher, student.alias",
      "CREATE TAG INDEX v_index_1 ON tag_1(col1);\nCREATE EDGE INDEX e_index_1 ON edge_1(col1);",
      "LOOKUP ON tag_1 YIELD id(vertex) as vid;",
      "LOOKUP ON edge_1 YIELD src(edge) as src, dst(edge) as dst;",
      "CREATE TAG INDEX ti1 ON t1(col1(5));",
      "INSERT VERTEX t1(col1)\nVALUES\n  \"1\": (\"aaa\"),\n  \"2\": (\"aaaaa\"),\n  \"3\": (\"aaaaaaa\"),\n  \"4\": (\"abc\"),\n  \"5\": (\"abcde\"),\n  \"6\": (\"abcdefg\");",
      "LOOKUP ON t1 WHERE t1.col1 == \"aaa\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"aaaaa\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"aaaaaaa\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"abc\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"abcde\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"abcdefg\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e \"aaaaa\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= \"aaaaa\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c \"abcde\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= \"abcde\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"aaaaa\" \u003c t1.col1 AND t1.col1 \u003c \"abcde\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"aaaaa\" \u003c= t1.col1 AND t1.col1 \u003c \"abcde\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"aaaaa\" \u003c t1.col1 AND t1.col1 \u003c= \"abcde\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"aaaaa\" \u003c= t1.col1 AND t1.col1 \u003c= \"abcde\" YIELD id(vertex) as id",
      "CREATE EDGE INDEX ei1 ON e1(col1(5));",
      "INSERT EDGE e1(col1)\nVALUES\n  \"1\" -\u003e \"1\": (\"aaa\"),\n  \"2\" -\u003e \"2\": (\"aaaaa\"),\n  \"3\" -\u003e \"3\": (\"aaaaaaa\"),\n  \"4\" -\u003e \"4\": (\"abc\"),\n  \"5\" -\u003e \"5\": (\"abcde\"),\n  \"6\" -\u003e \"6\": (\"abcdefg\");",
      "LOOKUP ON e1 WHERE e1.col1 == \"aaa\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"aaaaa\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"aaaaaaa\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"abc\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"abcde\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"abcdefg\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e \"aaaaa\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= \"aaaaa\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c \"abcde\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= \"abcde\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"aaaaa\" \u003c e1.col1 AND e1.col1 \u003c \"abcde\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"aaaaa\" \u003c= e1.col1 AND e1.col1 \u003c \"abcde\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"aaaaa\" \u003c e1.col1 AND e1.col1 \u003c= \"abcde\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"aaaaa\" \u003c= e1.col1 AND e1.col1 \u003c= \"abcde\" YIELD src(edge) as src, dst(edge) as dst",
      "CREATE TAG INDEX ti1 ON t1(col1(5));",
      "INSERT VERTEX t1(col1)\nVALUES\n  \"1\": (\"羊\"),\n  \"2\": (\"羊羊\"),\n  \"3\": (\"羊羊羊\"),\n  \"4\": (\"羊羊🐏\"),\n  \"5\": (\"羊🐏\"),\n  \"6\": (\"羊🐏羊\"),\n  \"7\": (\"羊🐏🐏\"),\n  \"8\": (\"🐏\"),\n  \"9\": (\"🐏羊\"),\n  \"10\": (\"🐏羊羊\"),\n  \"11\": (\"🐏羊🐏\"),\n  \"12\": (\"🐏🐏\"),\n  \"13\": (\"🐏🐏羊\"),\n  \"14\": (\"🐏🐏🐏\");",
      "LOOKUP ON t1 WHERE t1.col1 == \"羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"羊羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"羊羊羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"羊🐏\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"🐏\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"🐏🐏羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e \"🐏羊羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= \"🐏羊羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c \"羊🐏\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= \"羊🐏\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"羊🐏羊\" \u003c t1.col1 and t1.col1 \u003c \"🐏羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"羊🐏羊\" \u003c= t1.col1 and t1.col1 \u003c \"🐏羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"羊🐏羊\" \u003c t1.col1 and t1.col1 \u003c= \"🐏羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"羊🐏羊\" \u003c= t1.col1 and t1.col1 \u003c= \"🐏羊\" YIELD id(vertex) as id",
      "CREATE TAG INDEX ti1 ON t1(col1(16));",
      "INSERT VERTEX t1(col1)\nVALUES\n  \"1\": (\"羊\"),\n  \"2\": (\"羊羊\"),\n  \"3\": (\"羊羊羊\"),\n  \"4\": (\"羊羊🐏\"),\n  \"5\": (\"羊🐏\"),\n  \"6\": (\"羊🐏羊\"),\n  \"7\": (\"羊🐏🐏\"),\n  \"8\": (\"🐏\"),\n  \"9\": (\"🐏羊\"),\n  \"10\": (\"🐏羊羊\"),\n  \"11\": (\"🐏羊🐏\"),\n  \"12\": (\"🐏🐏\"),\n  \"13\": (\"🐏🐏羊\"),\n  \"14\": (\"🐏🐏🐏\");",
      "LOOKUP ON t1 WHERE t1.col1 == \"羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"羊羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"羊羊羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"羊🐏\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"🐏\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == \"🐏🐏羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e \"🐏羊羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= \"🐏羊羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c \"羊🐏\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= \"羊🐏\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"羊🐏羊\" \u003c t1.col1 and t1.col1 \u003c \"🐏羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"羊🐏羊\" \u003c= t1.col1 and t1.col1 \u003c \"🐏羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"羊🐏羊\" \u003c t1.col1 and t1.col1 \u003c= \"🐏羊\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE \"羊🐏羊\" \u003c= t1.col1 and t1.col1 \u003c= \"🐏羊\" YIELD id(vertex) as id",
      "CREATE EDGE INDEX ei1 ON e1(col1(5));",
      "INSERT EDGE e1(col1)\nVALUES\n  \"1\" -\u003e \"1\" : (\"羊\"),\n  \"2\" -\u003e \"2\" : (\"羊羊\"),\n  \"3\" -\u003e \"3\" : (\"羊羊羊\"),\n  \"4\" -\u003e \"4\" : (\"羊羊🐏\"),\n  \"5\" -\u003e \"5\" : (\"羊🐏\"),\n  \"6\" -\u003e \"6\" : (\"羊🐏羊\"),\n  \"7\" -\u003e \"7\" : (\"羊🐏🐏\"),\n  \"8\" -\u003e \"8\" : (\"🐏\"),\n  \"9\" -\u003e \"9\" : (\"🐏羊\"),\n  \"10\" -\u003e \"10\": (\"🐏羊羊\"),\n  \"11\" -\u003e \"11\": (\"🐏羊🐏\"),\n  \"12\" -\u003e \"12\": (\"🐏🐏\"),\n  \"13\" -\u003e \"13\": (\"🐏🐏羊\"),\n  \"14\" -\u003e \"14\": (\"🐏🐏🐏\");",
      "LOOKUP ON e1 WHERE e1.col1 == \"羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"羊羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"羊羊羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"羊🐏\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"🐏\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"🐏🐏羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e \"🐏羊羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= \"🐏羊羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c \"羊🐏\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= \"羊🐏\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"羊🐏羊\" \u003c e1.col1 and e1.col1 \u003c \"🐏羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"羊🐏羊\" \u003c= e1.col1 and e1.col1 \u003c \"🐏羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"羊🐏羊\" \u003c e1.col1 and e1.col1 \u003c= \"🐏羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"羊🐏羊\" \u003c= e1.col1 and e1.col1 \u003c= \"🐏羊\" YIELD src(edge) as src, dst(edge) as dst",
      "CREATE EDGE INDEX ei1 ON e1(col1(16));",
      "INSERT EDGE e1(col1)\nVALUES\n  \"1\" -\u003e \"1\" : (\"羊\"),\n  \"2\" -\u003e \"2\" : (\"羊羊\"),\n  \"3\" -\u003e \"3\" : (\"羊羊羊\"),\n  \"4\" -\u003e \"4\" : (\"羊羊🐏\"),\n  \"5\" -\u003e \"5\" : (\"羊🐏\"),\n  \"6\" -\u003e \"6\" : (\"羊🐏羊\"),\n  \"7\" -\u003e \"7\" : (\"羊🐏🐏\"),\n  \"8\" -\u003e \"8\" : (\"🐏\"),\n  \"9\" -\u003e \"9\" : (\"🐏羊\"),\n  \"10\" -\u003e \"10\": (\"🐏羊羊\"),\n  \"11\" -\u003e \"11\": (\"🐏羊🐏\"),\n  \"12\" -\u003e \"12\": (\"🐏🐏\"),\n  \"13\" -\u003e \"13\": (\"🐏🐏羊\"),\n  \"14\" -\u003e \"14\": (\"🐏🐏🐏\");",
      "LOOKUP ON e1 WHERE e1.col1 == \"羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"羊羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"羊羊羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"羊🐏\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"🐏\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == \"🐏🐏羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e \"🐏羊羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= \"🐏羊羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c \"羊🐏\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= \"羊🐏\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"羊🐏羊\" \u003c e1.col1 and e1.col1 \u003c \"🐏羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"羊🐏羊\" \u003c= e1.col1 and e1.col1 \u003c \"🐏羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"羊🐏羊\" \u003c e1.col1 and e1.col1 \u003c= \"🐏羊\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE \"羊🐏羊\" \u003c= e1.col1 and e1.col1 \u003c= \"🐏羊\" YIELD src(edge) as src, dst(edge) as dst",
      "CREATE TAG INDEX ti1 ON t1(col1);\nCREATE TAG INDEX ti12 ON t1(col1, col2);\nCREATE TAG INDEX ti13 ON t1(col1, col3);\nCREATE TAG INDEX ti14 ON t1(col1, col4(10));\nCREATE TAG INDEX ti15 ON t1(col1, col5);\nCREATE TAG INDEX ti16 ON t1(col1, col6);\nCREATE TAG INDEX ti17 ON t1(col1, col7);\nCREATE TAG INDEX ti18 ON t1(col1, col8);",
      "INSERT VERTEX t1(col1, col2, col3, col4, col5, col6, col7, col8)\nVALUES\n  \"1\": (1, 1.0, false, \"apple\", time(\"11:11:11\"), date(\"2022-01-01\"), datetime(\"2022-01-01T11:11:11\"), \"apple\"),\n  \"2\": (2, 2.0, true, \"banana\", time(\"22:22:22\"), date(\"2022-12-31\"), datetime(\"2022-12-31T22:22:22\"), \"banana\");",
      "LOOKUP ON t1 WHERE t1.col1 == 1 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e 1 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c 2 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == 1 AND t1.col2 == 1.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col2 \u003e 1.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col2 \u003e= 1.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col2 \u003c 2.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col2 \u003c= 2.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == 1 AND t1.col3 == false YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col3 \u003e false YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col3 \u003e= false YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col3 \u003c true YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col3 \u003c= true YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == 1 AND t1.col4 == \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col4 \u003e \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col4 \u003e= \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col4 \u003c \"banana\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col4 \u003c= \"banana\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == 1 AND t1.col5 == time(\"11:11:11\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col5 \u003e time(\"11:11:11\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col5 \u003e= time(\"11:11:11\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col5 \u003c time(\"22:22:22\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col5 \u003c= time(\"22:22:22\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == 1 AND t1.col6 == date(\"2022-01-01\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col6 \u003e date(\"2022-01-01\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col6 \u003e= date(\"2022-01-01\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col6 \u003c date(\"2022-12-31\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col6 \u003c= date(\"2022-12-31\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == 1 AND t1.col7 == datetime(\"2022-01-01T11:11:11\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col7 \u003e datetime(\"2022-01-01T11:11:11\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col7 \u003e= datetime(\"2022-01-01T11:11:11\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col7 \u003c datetime(\"2022-12-31T22:22:22\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col7 \u003c= datetime(\"2022-12-31T22:22:22\") YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 == 1 AND t1.col8 == \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col8 \u003e \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003e= 1 AND t1.col8 \u003e= \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col8 \u003c \"banana\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col1 \u003c= 2 AND t1.col8 \u003c= \"banana\" YIELD id(vertex) as id",
      "CREATE TAG INDEX ti21 ON t1(col2, col1);\nCREATE TAG INDEX ti23 ON t1(col2, col3);\nCREATE TAG INDEX ti24 ON t1(col2, col4(10));\nCREATE TAG INDEX ti31 ON t1(col3, col1);\nCREATE TAG INDEX ti32 ON t1(col3, col2);\nCREATE TAG INDEX ti34 ON t1(col3, col4(10));\nCREATE TAG INDEX ti41 ON t1(col4(10), col1);\nCREATE TAG INDEX ti42 ON t1(col4(10), col2);\nCREATE TAG INDEX ti43 ON t1(col4(10), col3);",
      "INSERT VERTEX t1(col1, col2, col3, col4)\nVALUES\n  \"1\": (1, 1.0, false, \"apple\"),\n  \"2\": (2, 1.0, true, \"banana\"),\n  \"3\": (3, 2.0, false, \"carrot\"),\n  \"4\": (4, 2.0, true, \"durian\");",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col1 == 1 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col1 \u003e 1 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col1 \u003e= 1 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col1 \u003c 2 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col1 \u003c= 2 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col3 == false YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col3 \u003e false YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col3 \u003e= false YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col3 \u003c true YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col3 \u003c= true YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col4 == \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col4 \u003e \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col4 \u003e= \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col4 \u003c \"banana\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col2 == 1.0 AND t1.col4 \u003c= \"banana\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col1 == 1 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col1 \u003e 1 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col1 \u003e= 1 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col1 \u003c 3 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col1 \u003c= 3 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col2 == 1.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col2 \u003e 1.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col2 \u003e= 1.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col2 \u003c 2.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col2 \u003c= 2.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col4 == \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col4 \u003e \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col4 \u003e= \"apple\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col4 \u003c \"carrot\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col3 == false AND t1.col4 \u003c= \"carrot\" YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"carrot\" AND t1.col1 == 3 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"carrot\" AND t1.col1 \u003e 3 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"carrot\" AND t1.col1 \u003e= 3 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"carrot\" AND t1.col1 \u003c 3 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"carrot\" AND t1.col1 \u003c= 3 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"durian\" AND t1.col2 == 2.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"durian\" AND t1.col2 \u003e 2.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"durian\" AND t1.col2 \u003e= 2.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"durian\" AND t1.col2 \u003c 2.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"durian\" AND t1.col2 \u003c= 2.0 YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 == true YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 \u003e true YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 \u003e= true YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 \u003c true YIELD id(vertex) as id",
      "LOOKUP ON t1 WHERE t1.col4 == \"banana\" AND t1.col3 \u003c= true YIELD id(vertex) as id",
      "CREATE EDGE INDEX ei1 ON e1(col1);\nCREATE EDGE INDEX ei12 ON e1(col1, col2);\nCREATE EDGE INDEX ei13 ON e1(col1, col3);\nCREATE EDGE INDEX ei14 ON e1(col1, col4(10));\nCREATE EDGE INDEX ei15 ON e1(col1, col5);\nCREATE EDGE INDEX ei16 ON e1(col1, col6);\nCREATE EDGE INDEX ei17 ON e1(col1, col7);\nCREATE EDGE INDEX ei18 ON e1(col1, col8);",
      "INSERT EDGE e1(col1, col2, col3, col4, col5, col6, col7, col8)\nVALUES\n  \"1\" -\u003e \"3\": (1, 1.0, false, \"apple\", time(\"11:11:11\"), date(\"2022-01-01\"), datetime(\"2022-01-01T11:11:11\"), \"apple\"),\n  \"2\" -\u003e \"4\": (2, 2.0, true, \"banana\", time(\"22:22:22\"), date(\"2022-12-31\"), datetime(\"2022-12-31T22:22:22\"), \"banana\");",
      "LOOKUP ON e1 WHERE e1.col1 == 1 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e 1 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c 2 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col2 == 1.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col2 \u003e 1.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col2 \u003e= 1.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col2 \u003c 2.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col2 \u003c= 2.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col3 == false YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col3 \u003e false YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col3 \u003e= false YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col3 \u003c true YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col3 \u003c= true YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col4 == \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col4 \u003e \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col4 \u003e= \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col4 \u003c \"banana\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col4 \u003c= \"banana\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col5 == time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col5 \u003e time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col5 \u003e= time(\"11:11:11\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col5 \u003c time(\"22:22:22\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col5 \u003c= time(\"22:22:22\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col6 == date(\"2022-01-01\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col6 \u003e date(\"2022-01-01\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col6 \u003e= date(\"2022-01-01\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col6 \u003c date(\"2022-12-31\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col6 \u003c= date(\"2022-12-31\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col7 == datetime(\"2022-01-01T11:11:11\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col7 \u003e datetime(\"2022-01-01T11:11:11\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col7 \u003e= datetime(\"2022-01-01T11:11:11\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col7 \u003c datetime(\"2022-12-31T22:22:22\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col7 \u003c= datetime(\"2022-12-31T22:22:22\") YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 == 1 AND e1.col8 == \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col8 \u003e \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003e= 1 AND e1.col8 \u003e= \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col8 \u003c \"banana\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col1 \u003c= 2 AND e1.col8 \u003c= \"banana\" YIELD src(edge) as src, dst(edge) as dst",
      "CREATE EDGE INDEX ei21 ON e1(col2, col1);\nCREATE EDGE INDEX ei23 ON e1(col2, col3);\nCREATE EDGE INDEX ei24 ON e1(col2, col4(10));\nCREATE EDGE INDEX ei31 ON e1(col3, col1);\nCREATE EDGE INDEX ei32 ON e1(col3, col2);\nCREATE EDGE INDEX ei34 ON e1(col3, col4(10));\nCREATE EDGE INDEX ei41 ON e1(col4(10), col1);\nCREATE EDGE INDEX ei42 ON e1(col4(10), col2);\nCREATE EDGE INDEX ei43 ON e1(col4(10), col3);",
      "INSERT EDGE e1(col1, col2, col3, col4)\nVALUES\n  \"1\" -\u003e \"5\": (1, 1.0, false, \"apple\"),\n  \"2\" -\u003e \"6\": (2, 1.0, true, \"banana\"),\n  \"3\" -\u003e \"7\": (3, 2.0, false, \"carrot\"),\n  \"4\" -\u003e \"8\": (4, 2.0, true, \"durian\");",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col1 == 1 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col1 \u003e 1 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col1 \u003e= 1 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col1 \u003c 2 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col1 \u003c= 2 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col3 == false YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col3 \u003e false YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col3 \u003e= false YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col3 \u003c true YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col3 \u003c= true YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col4 == \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col4 \u003e \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col4 \u003e= \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col4 \u003c \"banana\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col2 == 1.0 AND e1.col4 \u003c= \"banana\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col1 == 1 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col1 \u003e 1 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col1 \u003e= 1 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col1 \u003c 3 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col1 \u003c= 3 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col2 == 1.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col2 \u003e 1.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col2 \u003e= 1.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col2 \u003c 2.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col2 \u003c= 2.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col4 == \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col4 \u003e \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col4 \u003e= \"apple\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col4 \u003c \"carrot\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col3 == false AND e1.col4 \u003c= \"carrot\" YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"carrot\" AND e1.col1 == 3 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"carrot\" AND e1.col1 \u003e 3 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"carrot\" AND e1.col1 \u003e= 3 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"carrot\" AND e1.col1 \u003c 3 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"carrot\" AND e1.col1 \u003c= 3 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"durian\" AND e1.col2 == 2.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"durian\" AND e1.col2 \u003e 2.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"durian\" AND e1.col2 \u003e= 2.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"durian\" AND e1.col2 \u003c 2.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"durian\" AND e1.col2 \u003c= 2.0 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"banana\" AND e1.col3 == true YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"banana\" AND e1.col3 \u003e true YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"banana\" AND e1.col3 \u003e= true YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"banana\" AND e1.col3 \u003c true YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON e1 WHERE e1.col4 == \"banana\" AND e1.col3 \u003c= true YIELD src(edge) as src, dst(edge) as dst"
    ]
  },
  {
    "path": "index",
    "file_name": "TagEdgeIndex",
    "statements": [
      "CREATE TAG INDEX single_tag_index ON tag_1(col2);",
      "CREATE TAG INDEX multi_tag_index ON tag_1(col2, col3)",
      "CREATE TAG INDEX disorder_tag_index ON tag_1(col3, col2)",
      "LOOKUP ON tag_1 WHERE tag_1.col2 == 18 YIELD tag_1.col1",
      "LOOKUP ON tag_1 WHERE tag_1.col3 \u003e 35.7 YIELD tag_1.col1",
      "LOOKUP ON tag_1 WHERE tag_1.col2 \u003e 18 AND tag_1.col3 \u003c 37.2 YIELD tag_1.col1",
      "DESC TAG INDEX single_tag_index",
      "DESC TAG INDEX multi_tag_index",
      "DESC TAG INDEX disorder_tag_index",
      "SHOW CREATE TAG INDEX single_tag_index",
      "SHOW CREATE TAG INDEX multi_tag_index",
      "DROP TAG INDEX multi_tag_index",
      "CREATE TAG INDEX `multi_tag_index` ON `tag_1` (\n `col2`,\n `col3`\n)",
      "SHOW CREATE TAG INDEX disorder_tag_index",
      "DROP TAG INDEX disorder_tag_index",
      "CREATE TAG INDEX `disorder_tag_index` ON `tag_1` (\n `col3`,\n `col2`\n)",
      "DROP TAG INDEX single_tag_index",
      "DROP TAG INDEX multi_tag_index",
      "DROP TAG INDEX disorder_tag_index",
      "CREATE EDGE INDEX single_edge_index ON edge_1(col2)",
      "CREATE EDGE INDEX multi_edge_index ON edge_1(col2, col3)",
      "CREATE EDGE INDEX disorder_edge_index ON edge_1(col3, col2)",
      "LOOKUP ON edge_1 WHERE edge_1.col2 == 22 YIELD edge_1.col2",
      "LOOKUP ON edge_1 WHERE edge_1.col3 \u003e 43.4 YIELD edge_1.col1",
      "LOOKUP ON edge_1 WHERE edge_1.col2 \u003e 45 AND edge_1.col3 \u003c 44.3 YIELD edge_1.col1",
      "DESC EDGE INDEX single_edge_index",
      "DESC EDGE INDEX multi_edge_index",
      "DESC EDGE INDEX disorder_edge_index",
      "SHOW CREATE EDGE INDEX single_edge_index",
      "SHOW CREATE EDGE INDEX multi_edge_index",
      "DROP EDGE INDEX multi_edge_index",
      "CREATE EDGE INDEX `multi_edge_index` ON `edge_1` (\n `col2`,\n `col3`\n)",
      "SHOW CREATE EDGE INDEX disorder_edge_index",
      "DROP EDGE INDEX disorder_edge_index",
      "CREATE EDGE INDEX `disorder_edge_index` ON `edge_1` (\n `col3`,\n `col2`\n)",
      "DROP EDGE INDEX single_edge_index",
      "DROP EDGE INDEX multi_edge_index",
      "DROP EDGE INDEX disorder_edge_index"
    ]
  },
  {
    "path": "insert",
    "file_name": "Insert.IntVid",
    "statements": [
      "INSERT VERTEX person(name, age), interest(name) VALUES hash(\"Tom\"):(\"Tom\", 18, \"basketball\");",
      "INSERT VERTEX person, interest(name) VALUES hash(\"Tom\"):(\"Tom\", 18, \"basketball\");",
      "INSERT VERTEX person(name, age), interest VALUES hash(\"Tom\"):(\"Tom\", 18, \"basketball\");",
      "INSERT VERTEX person(age), interest(name) VALUES hash(\"Tom\"):(18, \"basketball\");",
      "INSERT VERTEX person, interest VALUES hash(\"Tom\"):(\"Tom\", 18, \"basketball\");",
      "FETCH PROP ON * hash(\"Tom\") YIELD person.name, person.age, interest.name",
      "INSERT VERTEX person(age, name) VALUES hash(\"Conan\"):(10, \"Conan\")",
      "FETCH PROP ON person hash(\"Conan\") YIELD person.name, person.age",
      "INSERT EDGE schoolmate(nickname, likeness) VALUES hash(\"Tom\")-\u003ehash(\"Bob\"):(\"Superman\", 87)",
      "FETCH PROP ON schoolmate hash(\"Tom\")-\u003ehash(\"Bob\") YIELD schoolmate.likeness, schoolmate.nickname",
      "GO FROM hash(\"Laura\") OVER study\nYIELD $$.school.name, study._dst, $$.school.create_time, (string)study.start_time",
      "FETCH PROP ON school hash(\"sun_school\") YIELD school.name, school.create_time",
      "INSERT VERTEX person(name, age), student(grade, number)\nVALUES hash(\"Lucy\"):(\"Lucy\", 8, \"three\", 20190901001)",
      "INSERT VERTEX person(age, name),student(number, grade)\nVALUES hash(\"Bob\"):(9, \"Bob\", 20191106001, \"four\")",
      "FETCH PROP ON person hash(\"Bob\") YIELD person.name, person.age",
      "FETCH PROP ON student hash(\"Bob\") YIELD student.grade, student.number",
      "INSERT VERTEX person(name, age),student(grade, number)\nVALUES hash(\"Laura\"):(\"Laura\", 8, \"three\", 20190901008),hash(\"Amber\"):(\"Amber\", 9, \"four\", 20180901003)",
      "FETCH PROP ON person hash(\"Laura\") YIELD person.name, person.age",
      "FETCH PROP ON student hash(\"Laura\") YIELD student.grade, student.number",
      "FETCH PROP ON person hash(\"Amber\") YIELD person.name, person.age",
      "FETCH PROP ON student hash(\"Amber\") YIELD student.grade, student.number",
      "INSERT VERTEX person(name, age) VALUES hash(\"Kitty\"):(\"Kitty\", 8), hash(\"Peter\"):(\"Peter\", 9)",
      "INSERT EDGE schoolmate(likeness, nickname)\nVALUES hash(\"Tom\")-\u003ehash(\"Kitty\"):(81, \"Kitty\"), hash(\"Tom\")-\u003ehash(\"Peter\"):(83, \"Kitty\")",
      "GO FROM hash(\"Tom\") OVER schoolmate YIELD $^.person.name, schoolmate.likeness, $$.person.name",
      "INSERT EDGE schoolmate(likeness, nickname)\nVALUES hash(\"Lucy\")-\u003ehash(\"Laura\"):(90, \"Laura\"), hash(\"Lucy\")-\u003ehash(\"Amber\"):(95, \"Amber\")",
      "INSERT EDGE schoolmate(likeness, nickname) VALUES hash(\"Laura\")-\u003ehash(\"Aero\"):(90, \"Aero\")",
      "GO FROM hash(\"Lucy\") OVER schoolmate\nYIELD schoolmate.likeness, $$.person.name,$$.student.grade, $$.student.number",
      "INSERT VERTEX person(name, age) VALUES hash(\"Aero\"):(\"Aero\", 8);\nINSERT VERTEX student(grade, number) VALUES hash(\"Aero\"):(\"four\", 20190901003);\nINSERT EDGE schoolmate(likeness, nickname) VALUES hash(\"Laura\")-\u003ehash(\"Aero\"):(90, \"Aero\")",
      "GO FROM hash(\"Laura\") OVER schoolmate YIELD $$.student.number, $$.person.name",
      "GO FROM hash(\"Joy\") OVER schoolmate\nYIELD $^.person.name,schoolmate.likeness, $$.person.name, $$.person.age,$$.employee.name",
      "INSERT VERTEX person(name, age),interest(name) VALUES hash(\"Bob\"):(\"Bob\", 19, \"basketball\");\nINSERT EDGE schoolmate(likeness, nickname) VALUES hash(\"Petter\")-\u003ehash(\"Bob\"):(90, \"Bob\");",
      "GO FROM hash(\"Petter\") OVER schoolmate\nYIELD $^.person.name, $^.employee.name,schoolmate.likeness, $$.person.name,$$.interest.name, $$.person.age",
      "INSERT VERTEX personWithDefault(name) VALUES hash(\"Tom\"):(\"Tom\")",
      "INSERT VERTEX personWithDefault(name, age) VALUES hash(\"Tom\"):(\"Tom\", 20)",
      "INSERT VERTEX personWithDefault(name) VALUES hash(\"Kitty\"):(\"Kitty\"), hash(\"Peter\"):(\"Peter\")",
      "INSERT EDGE\n  schoolmateWithDefault()\nVALUES\n  hash(\"Tom\")-\u003ehash(\"Kitty\"):(),\n  hash(\"Tom\")-\u003ehash(\"Peter\"):(),\n  hash(\"Lucy\")-\u003ehash(\"Laura\"):(),\n  hash(\"Lucy\")-\u003ehash(\"Amber\"):()",
      "GO FROM hash(\"Tom\") OVER schoolmateWithDefault\nYIELD $^.person.name, schoolmateWithDefault.likeness, $$.person.name",
      "GO FROM hash(\"Lucy\") OVER schoolmateWithDefault\nYIELD schoolmateWithDefault.likeness,\n$$.personWithDefault.name,\n$$.personWithDefault.birthday,\n$$.personWithDefault.department,\n$$.studentWithDefault.grade,\n$$.studentWithDefault.number",
      "INSERT VERTEX person(name, age) VALUES hash(\"Tony\"):(\"Tony\", 18), hash(\"Mack\"):(\"Mack\", 19);\nINSERT VERTEX person(name, age) VALUES hash(\"Mack\"):(\"Mack\", 20);\nINSERT VERTEX person(name, age) VALUES hash(\"Mack\"):(\"Mack\", 21)",
      "INSERT EDGE schoolmate(likeness, nickname) VALUES hash(\"Tony\")-\u003ehash(\"Mack\")@1:(1, \"\");\nINSERT EDGE schoolmate(likeness, nickname) VALUES hash(\"Tony\")-\u003ehash(\"Mack\")@1:(2, \"\");\nINSERT EDGE schoolmate(likeness, nickname) VALUES hash(\"Tony\")-\u003ehash(\"Mack\")@1:(3, \"\");",
      "GO FROM hash(\"Tony\") OVER schoolmate YIELD $$.person.name, $$.person.age, schoolmate.likeness",
      "LOOKUP ON person WHERE person.id == 1 YIELD id(vertex) as id",
      "LOOKUP ON person WHERE person.id == 1 YIELD id(vertex) as id",
      "LOOKUP ON person WHERE person.id == 2 YIELD id(vertex) as id",
      "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON like WHERE like.grade == 888 YIELD src(edge) as src, dst(edge) as dst"
    ]
  },
  {
    "path": "insert",
    "file_name": "Insert",
    "statements": [
      "INSERT VERTEX person VALUES \"Tom\":(\"Tom\", 18);",
      "INSERT VERTEX person, interest(name) VALUES \"Tom\":(\"Tom\", 18, \"basketball\");",
      "INSERT VERTEX person(name, age), interest VALUES \"Tom\":(\"Tom\", 18, \"basketball\");",
      "INSERT VERTEX person(age), interest(name) VALUES \"Tom\":(18, \"basketball\");",
      "INSERT VERTEX person, interest VALUES \"Tom\":(\"Tom\", 18, \"basketball\");",
      "FETCH PROP ON * \"Tom\" YIELD vertex as node",
      "INSERT VERTEX person(age, name) VALUES \"Conan\":(10, \"Conan\")",
      "FETCH PROP ON person \"Conan\" YIELD vertex as node",
      "INSERT EDGE schoolmate(nickname, likeness) VALUES \"Tom\"-\u003e\"Bob\":(\"Superman\", 87)",
      "FETCH PROP ON schoolmate \"Tom\"-\u003e\"Bob\" YIELD schoolmate.likeness, schoolmate.nickname",
      "GO FROM \"Laura\" OVER study\nYIELD $$.school.name, study._dst, $$.school.create_time, (string)study.start_time",
      "FETCH PROP ON school \"sun_school\" YIELD school.name, school.create_time",
      "INSERT VERTEX person(name, age), student(grade, number) VALUES \"Lucy\":(\"Lucy\", 8, \"three\", 20190901001)",
      "INSERT VERTEX person(age, name),student(number, grade) VALUES \"Bob\":(9, \"Bob\", 20191106001, \"four\")",
      "FETCH PROP ON person \"Bob\" YIELD person.name, person.age",
      "FETCH PROP ON student \"Bob\" YIELD student.grade, student.number",
      "INSERT VERTEX\n  person(name, age),\n  student(grade, number)\nVALUES\n  \"Laura\":(\"Laura\", 8, \"three\", 20190901008),\n  \"Amber\":(\"Amber\", 9, \"four\", 20180901003);",
      "FETCH PROP ON person \"Laura\" YIELD person.name, person.age",
      "FETCH PROP ON student \"Laura\" YIELD student.grade, student.number",
      "FETCH PROP ON person \"Amber\" YIELD person.name, person.age",
      "FETCH PROP ON student \"Amber\" YIELD student.grade, student.number",
      "INSERT VERTEX person(name, age) VALUES \"Kitty\":(\"Kitty\", 8), \"Peter\":(\"Peter\", 9)",
      "INSERT EDGE\n  schoolmate(likeness, nickname)\nVALUES\n  \"Tom\"-\u003e\"Kitty\":(81, \"Kitty\"),\n  \"Tom\"-\u003e\"Peter\":(83, \"Kitty\");",
      "GO FROM \"Tom\" OVER schoolmate\nYIELD $^.person.name, schoolmate.likeness, $$.person.name",
      "INSERT EDGE schoolmate(likeness, nickname) VALUES \"Lucy\"-\u003e\"Laura\":(90, \"Laura\"), \"Lucy\"-\u003e\"Amber\":(95, \"Amber\")",
      "INSERT EDGE schoolmate(likeness, nickname) VALUES \"Laura\"-\u003e\"Aero\":(90, \"Aero\")",
      "GO FROM \"Lucy\" OVER schoolmate\nYIELD schoolmate.likeness, $$.person.name,$$.student.grade, $$.student.number",
      "INSERT VERTEX person(name, age) VALUES \"Aero\":(\"Aero\", 8);\nINSERT VERTEX student(grade, number) VALUES \"Aero\":(\"four\", 20190901003);\nINSERT EDGE schoolmate(likeness, nickname) VALUES \"Laura\"-\u003e\"Aero\":(90, \"Aero\");",
      "GO FROM \"Laura\" OVER schoolmate YIELD $$.student.number, $$.person.name",
      "GO FROM \"Joy\" OVER schoolmate\nYIELD $^.person.name,schoolmate.likeness, $$.person.name, $$.person.age,$$.employee.name",
      "INSERT VERTEX person(name, age),interest(name) VALUES \"Bob\":(\"Bob\", 19, \"basketball\");\nINSERT EDGE schoolmate(likeness, nickname) VALUES \"Petter\"-\u003e\"Bob\":(90, \"Bob\");",
      "GO FROM \"Petter\" OVER schoolmate\nYIELD $^.person.name,\n$^.employee.name,schoolmate.likeness,\n$$.person.name,\n$$.interest.name,\n$$.person.age",
      "INSERT VERTEX personWithDefault(name) VALUES \"Tom\":(\"Tom\")",
      "INSERT VERTEX personWithDefault(name, age) VALUES \"Tom\":(\"Tom\", 20)",
      "INSERT VERTEX personWithDefault(name) VALUES \"Kitty\":(\"Kitty\"), \"Peter\":(\"Peter\")",
      "INSERT EDGE schoolmateWithDefault() VALUES \"Tom\"-\u003e\"Kitty\":(), \"Tom\"-\u003e\"Peter\":(), \"Lucy\"-\u003e\"Laura\":(), \"Lucy\"-\u003e\"Amber\":()",
      "GO FROM \"Tom\" OVER schoolmateWithDefault\nYIELD $^.person.name, schoolmateWithDefault.likeness, $$.person.name",
      "GO FROM \"Lucy\" OVER schoolmateWithDefault\nYIELD schoolmateWithDefault.likeness,\n$$.personWithDefault.name,\n$$.personWithDefault.birthday,\n$$.personWithDefault.department,\n$$.studentWithDefault.grade,\n$$.studentWithDefault.number",
      "INSERT VERTEX person(name, age) VALUES \"Tony\":(\"Tony\", 18), \"Mack\":(\"Mack\", 19);\nINSERT VERTEX person(name, age) VALUES \"Mack\":(\"Mack\", 20);\nINSERT VERTEX person(name, age) VALUES \"Mack\":(\"Mack\", 21)",
      "INSERT EDGE schoolmate(likeness, nickname) VALUES \"Tony\"-\u003e\"Mack\"@1:(1, \"\");\nINSERT EDGE schoolmate(likeness, nickname) VALUES \"Tony\"-\u003e\"Mack\"@1:(2, \"\");\nINSERT EDGE schoolmate(likeness, nickname) VALUES \"Tony\"-\u003e\"Mack\"@1:(3, \"\");",
      "GO FROM \"Tony\" OVER schoolmate YIELD $$.person.name, $$.person.age, schoolmate.likeness",
      "INSERT VERTEX course(name) VALUES \"English\":(\"English\")",
      "FETCH PROP ON course \"English\" YIELD vertex as node",
      "INSERT VERTEX course(name) VALUES \"Chinese\":(\"中文字符\")",
      "FETCH PROP ON course \"Chinese\" YIELD vertex as node",
      "FETCH PROP ON student \"\" YIELD student.name, student.age",
      "LOOKUP on course YIELD course.name, course.introduce",
      "LOOKUP ON student YIELD student.name, student.age",
      "LOOKUP ON person WHERE person.id == 1 YIELD id(vertex) as id",
      "LOOKUP ON person WHERE person.id == 1 YIELD id(vertex) as id",
      "LOOKUP ON person WHERE person.id == 2 YIELD id(vertex) as id",
      "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst",
      "LOOKUP ON like WHERE like.grade == 888 YIELD src(edge) as src, dst(edge) as dst"
    ]
  },
  {
    "path": "insert",
    "file_name": "InsertEdgeOnDiffParts",
    "statements": [
      "(GO FROM \"v1\" over E yield E.rank union GO FROM \"v2\" over E REVERSELY yield E.rank) | yield count(*) AS count"
    ]
  },
  {
    "path": "insert",
    "file_name": "InsertIfNotExists",
    "statements": [
      "INSERT VERTEX IF NOT EXISTS\n  person(name, age)\nVALUES\n  \"Conan\":(\"Conan\", 10),\n  \"Yao\":(\"Yao\", 11),\n  \"Conan\":(\"Conan\", 11);",
      "FETCH PROP ON person \"Conan\" YIELD person.age as age",
      "INSERT VERTEX IF NOT EXISTS person(name, age) VALUES \"Conan\":(\"Conan\", 20)",
      "FETCH PROP ON person \"Conan\" YIELD person.age as age",
      "INSERT VERTEX person(name, age) VALUES \"Conan\":(\"Conan\", 40)",
      "FETCH PROP ON person \"Conan\" YIELD person.age as age",
      "FETCH PROP ON like \"Tom\"-\u003e\"Conan\" YIELD like.likeness",
      "INSERT EDGE IF NOT EXISTS like(likeness) VALUES \"Tom\"-\u003e\"Conan\":(10)",
      "FETCH PROP ON like \"Tom\"-\u003e\"Conan\" YIELD like.likeness",
      "INSERT EDGE like(likeness) VALUES \"Tom\"-\u003e\"Conan\":(100)",
      "FETCH PROP ON like \"Tom\"-\u003e\"Conan\" YIELD like.likeness",
      "GO FROM \"Tom\" over like YIELD like.likeness as like, like._src as src, like._dst as dst",
      "FETCH PROP ON person \"Conan\" YIELD person.age as age",
      "FETCH PROP ON student \"Conan\" YIELD student.number as number",
      "INSERT EDGE IF NOT EXISTS\n  like(likeness)\nVALUES\n  \"Tom\"-\u003e\"Conan\":(81),\n  \"Tom\"-\u003e\"Peter\":(83);",
      "FETCH PROP ON like \"Tom\"-\u003e\"Conan\" YIELD like.likeness",
      "FETCH PROP ON like \"Tom\"-\u003e\"Peter\" YIELD like.likeness",
      "INSERT VERTEX person VALUES \"Tom\":(\"Tom\", 2)",
      "INSERT VERTEX IF NOT EXISTS\n  person\nVALUES\n  \"Conan\":(\"Conan\", 10),\n  \"Yao\":(\"Yao\", 11),\n  \"Conan\":(\"Conan\", 11),\n  \"Tom\":(\"Tom\", 3);",
      "FETCH PROP ON person \"Tom\" YIELD person.age as age",
      "INSERT EDGE like VALUES \"Tom\"-\u003e\"Conan\":(200)",
      "INSERT EDGE IF NOT EXISTS like VALUES \"Tom\"-\u003e\"Conan\":(300)",
      "FETCH PROP ON like \"Tom\"-\u003e\"Conan\" YIELD like.likeness",
      "LOOKUP ON student WHERE student.age \u003c 30 YIELD student.age AS age",
      "LOOKUP ON student WHERE student.age \u003e 30 YIELD student.age AS age",
      "LOOKUP ON student WHERE student.age \u003c 30 YIELD student.name AS name, student.age AS age",
      "LOOKUP ON student WHERE student.age \u003e 30 YIELD student.name as name, student.age AS age",
      "FETCH PROP ON student \"zhang\", \"wang\", \"li\" YIELD student.name as name, student.age as age",
      "LOOKUP ON student WHERE student.age \u003c 30 YIELD student.age AS age",
      "LOOKUP ON student WHERE student.age \u003e 30 YIELD student.age AS age",
      "LOOKUP ON student WHERE student.age \u003c 30 YIELD student.name AS name, student.age AS age",
      "LOOKUP ON student WHERE student.age \u003e 30 YIELD student.name as name, student.age AS age",
      "FETCH PROP ON student \"zhao\", \"qian\", \"sun\", \"chen\" YIELD student.name as name, student.age as age",
      "LOOKUP ON like WHERE like.likeness \u003c 30 YIELD src(edge) as src, dst(edge) as dst, like.likeness as likeness",
      "LOOKUP ON like WHERE like.likeness \u003e 30 YIELD src(edge) as src, dst(edge) as dst, like.likeness as likeness",
      "LOOKUP ON like WHERE like.likeness \u003c 30 YIELD src(edge) as src, dst(edge) as dst, like.likeness as likeness, like.t1 as t1",
      "LOOKUP ON like WHERE like.likeness \u003e 30 YIELD src(edge) as src, dst(edge) as dst, like.likeness as likeness, like.t1 as t1",
      "FETCH PROP ON like \"zhang\"-\u003e\"wang\", \"zhang\"-\u003e\"li\", \"wang\"-\u003e\"li\", \"wang\"-\u003e\"zhang\" YIELD src(edge) as src, dst(edge) as dst, like.likeness as likeness",
      "LOOKUP ON like WHERE like.likeness \u003c 30 YIELD src(edge) as src, dst(edge) as dst, like.likeness as likeness",
      "LOOKUP ON like WHERE like.likeness \u003e 30 YIELD src(edge) as src, dst(edge) as dst, like.likeness as likeness",
      "LOOKUP ON like WHERE like.likeness \u003c 30 YIELD src(edge) as src, dst(edge) as dst, like.likeness as likeness, like.t1 as t1",
      "LOOKUP ON like WHERE like.likeness \u003e 30 YIELD src(edge) as src, dst(edge) as dst, like.likeness as likeness, like.t1 as t1",
      "FETCH PROP ON like \"zhang\"-\u003e\"wang\", \"zhang\"-\u003e\"li\", \"wang\"-\u003e\"li\", \"wang\"-\u003e\"zhang\" YIELD src(edge) as src, dst(edge) as dst, like.likeness as likeness"
    ]
  },
  {
    "path": "insert",
    "file_name": "insertVertexOnly",
    "statements": [
      "INSERT EDGE e() VALUES 1-\u003e2:(),2-\u003e3:();",
      "GO 2 STEP FROM 1 OVER e yield e._dst AS dst;",
      "FETCH PROP ON * 1,2 yield vertex AS v;"
    ]
  },
  {
    "path": "lookup",
    "file_name": "ByIndex",
    "statements": [
      "LOOKUP ON team YIELD id(vertex) as teamID",
      "LOOKUP ON team YIELD team.name AS Name",
      "LOOKUP ON serve YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON serve YIELD serve.start_year AS startYear",
      "LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as name, player.age AS Age",
      "LOOKUP ON player WHERE player.age \u003e 40 YIELD id(vertex) as name, player.age AS Age",
      "LOOKUP ON player WHERE player.age \u003e= 40.0 YIELD id(vertex) as name, player.age AS Age",
      "LOOKUP ON player WHERE player.age \u003e 40.5 YIELD id(vertex) as name, player.age AS Age",
      "LOOKUP ON player WHERE player.age \u003e= 40.5 YIELD id(vertex) as name, player.age AS Age",
      "LOOKUP ON player WHERE player.age \u003c 40\nYIELD player.age AS Age, player.name AS Name | order by $-.Age DESC, $-.Name| limit 10",
      "LOOKUP ON player WHERE player.age \u003c= 40\nYIELD player.age AS Age, player.name AS Name | order by $-.Age DESC, $-.Name| limit 10",
      "INSERT VERTEX weight(WEIGHT) VALUES \"Tim Duncan\" : (70.5);\nINSERT VERTEX weight(WEIGHT) VALUES \"Tony Parker\" : (80.0);",
      "LOOKUP ON weight WHERE weight.WEIGHT \u003e 70 YIELD id(vertex) as name;",
      "LOOKUP ON weight WHERE weight.WEIGHT \u003e 70.4 YIELD id(vertex) as name;",
      "LOOKUP ON weight WHERE weight.WEIGHT \u003e= 70.5 YIELD id(vertex) as name;",
      "LOOKUP ON weight WHERE weight.WEIGHT \u003e 70.5 YIELD id(vertex) as name;",
      "LOOKUP ON weight WHERE weight.WEIGHT \u003c= 80.0 YIELD id(vertex) as name;"
    ]
  },
  {
    "path": "lookup",
    "file_name": "ByIndex.intVid",
    "statements": [
      "LOOKUP ON team YIELD id(vertex) as name",
      "LOOKUP ON team YIELD id(vertex) as id, team.name AS Name",
      "LOOKUP ON serve YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON serve YIELD serve.start_year AS startYear",
      "LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as name, player.age AS Age",
      "LOOKUP ON player WHERE player.age \u003e 40 YIELD id(vertex) as name, player.age AS Age",
      "LOOKUP ON player WHERE player.age \u003e= 40.0 YIELD id(vertex) as name, player.age AS Age",
      "LOOKUP ON player WHERE player.age \u003e 40.5 YIELD id(vertex) as name, player.age AS Age",
      "LOOKUP ON player WHERE player.age \u003e= 40.5 YIELD id(vertex) as name, player.age AS Age",
      "LOOKUP ON player WHERE player.age \u003c 40\nYIELD player.age AS Age, player.name AS Name | order by $-.Age DESC, $-.Name| limit 10",
      "LOOKUP ON player WHERE player.age \u003c= 40\nYIELD player.age AS Age, player.name AS Name | order by $-.Age DESC, $-.Name| limit 10",
      "LOOKUP ON weight WHERE weight.WEIGHT \u003e 70 YIELD id(vertex) as name;",
      "LOOKUP ON weight WHERE weight.WEIGHT \u003e 70.4 YIELD id(vertex) as name;",
      "LOOKUP ON weight WHERE weight.WEIGHT \u003e= 70.5 YIELD id(vertex) as name;",
      "LOOKUP ON weight WHERE weight.WEIGHT \u003e 70.5 YIELD id(vertex) as name;",
      "LOOKUP ON weight WHERE weight.WEIGHT \u003c= 80.0 YIELD id(vertex) as name;"
    ]
  },
  {
    "path": "lookup",
    "file_name": "EdgeIndexFullScan",
    "statements": [
      "LOOKUP ON edge_1 WHERE edge_1.col1_str IN [\"non-existed-name\"] YIELD edge_1.col1_str",
      "CREATE EDGE INDEX composite_edge_index ON edge_1(col1_str(20), col2_int);",
      "DROP EDGE INDEX composite_edge_index",
      "DROP EDGE INDEX col1_str_index",
      "LOOKUP ON edge_1 WHERE edge_1.col1_str STARTS WITH \"ABC\" YIELD edge_1.col1_str"
    ]
  },
  {
    "path": "lookup",
    "file_name": "LookUp.IntVid",
    "statements": [
      "LOOKUP ON lookup_tag_1 WHERE lookup_tag_1.col2 == 200 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col1 == true YIELD id(vertex) as id",
      "LOOKUP ON lookup_edge_1 WHERE lookup_edge_1.col2 == 201 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 == 100 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 == 100 OR lookup_tag_2.col2 == 200 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e 100 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 != 100 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e=100 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e=100 AND lookup_tag_2.col4 == true YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e=100 AND lookup_tag_2.col4 != true YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e= 100 AND lookup_tag_2.col2 \u003c= 400 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col3 == 100.5 AND lookup_tag_2.col2 == 100 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col3 == 100.5 AND lookup_tag_2.col2 == 200 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2\nWHERE lookup_tag_2.col3 \u003e 100.5\nYIELD id(vertex) as id, lookup_tag_2.col3 AS col3",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col3 == 100.5 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col3 == 100.1 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2\nWHERE lookup_tag_2.col3 \u003e= 100.5 AND lookup_tag_2.col3 \u003c= 300.5\nYIELD id(vertex) as id, lookup_tag_2.col3 AS col3",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 == 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 == 100 OR lookup_edge_2.col2 == 200 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 \u003e 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 != 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 \u003e= 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 \u003e= 100 AND lookup_edge_2.col4 == true YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 \u003e= 100 AND lookup_edge_2.col4 != true YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 \u003e= 100 AND lookup_edge_2.col2 \u003c= 400 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col3 == 100.5 AND lookup_edge_2.col2 == 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col3 == 100.5 AND lookup_edge_2.col2 == 200 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2\nWHERE lookup_edge_2.col3 \u003e 100.5\nYIELD lookup_edge_2.col3 AS col3",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col3 == 100.5 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col3 == 100.1 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2\nWHERE lookup_edge_2.col3 \u003e= 100.5 AND lookup_edge_2.col3 \u003c= 300.5\nYIELD lookup_edge_2.col3 AS col3",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e abs(-5) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003c abs(-5) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e (1 + 2) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003c (1 + 2) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col4 != (true and true) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col4 == (true and true) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col4 == (true or false) YIELD id(vertex) as id",
      "CREATE TAG student(number int, age int)",
      "CREATE TAG INDEX student_index ON student(number, age)",
      "CREATE TAG teacher(number int, age int)",
      "LOOKUP ON student WHERE student.number == 1 YIELD id(vertex) as id, student.age",
      "CREATE TAG t1(c1 int, c2 int, c3 int, c4 int, c5 int)",
      "CREATE TAG INDEX i1 ON t1(c1, c2)",
      "CREATE TAG INDEX i2 ON t1(c2, c1)",
      "CREATE TAG INDEX i3 ON t1(c3)",
      "CREATE TAG INDEX i4 ON t1(c1, c2, c3, c4)",
      "LOOKUP ON t1 where t1.c1 == 1 YIELD t1.c2",
      "LOOKUP ON t1 where t1.c1 == 1 and t1.c2 \u003e 1 YIELD t1.c3",
      "LOOKUP ON t1 where t1.c1 \u003e 1 and t1.c2 == 1 YIELD t1.c2",
      "LOOKUP ON t1 where t1.c1 \u003e 1 and t1.c2 == 1 and  t1.c3 == 1 YIELD t1.c1",
      "LOOKUP ON t1 where t1.c3 \u003e 1 YIELD id(vertex)",
      "LOOKUP ON t1 where t1.c3 \u003e 1 and t1.c1 \u003e1 YIELD id(vertex)",
      "LOOKUP on t1 WHERE t1.c4 \u003e 1 YIELD t1.c4",
      "LOOKUP on t1 WHERE t1.c2 \u003e 1 and t1.c3 \u003e 1 YIELD t1.c4",
      "LOOKUP ON t1 where t1.c2 \u003e 1 and t1.c1 != 1 YIELD t1.c1",
      "LOOKUP ON t1 where t1.c2 != 1 YIELD t1.c2",
      "CREATE TAG t1_str(c1 int, c2 int, c3 string, c4 string)",
      "CREATE TAG INDEX i1_str ON t1_str(c1, c2)",
      "CREATE TAG INDEX i2_str ON t1_str(c4(30))",
      "CREATE TAG INDEX i3_str ON t1_str(c3(30), c1)",
      "CREATE TAG INDEX i4_str ON t1_str(c3(30), c4(30))",
      "LOOKUP on t1_str WHERE  t1_str.c1 == 1 YIELD id(vertex)",
      "LOOKUP on t1_str WHERE  t1_str.c1 == 1 and t1_str.c2 \u003e1 YIELD t1_str.c2",
      "LOOKUP on t1_str WHERE  t1_str.c3 == \"a\" YIELD t1_str.c3",
      "LOOKUP on t1_str WHERE  t1_str.c4 == \"a\" YIELD t1_str.c4",
      "LOOKUP on t1_str WHERE t1_str.c3 == \"a\"  and t1_str.c4 == \"a\" YIELD t1_str.c1",
      "LOOKUP on t1_str WHERE t1_str.c3 == \"a\"  and t1_str.c1 == 1 YIELD vertex as node",
      "LOOKUP on t1_str WHERE t1_str.c3 == \"a\" and t1_str.c2 == 1  and t1_str.c1 == 1 YIELD vertex as node",
      "LOOKUP on t1_str WHERE t1_str.c4 == \"a\" and t1_str.c3 == \"a\" and t1_str.c2 == 1  and t1_str.c1 == 1 YIELD id(vertex)",
      "CREATE TAG tag_with_str(c1 int, c2 string, c3 string)",
      "CREATE TAG INDEX i1_with_str ON tag_with_str(c1, c2(30))",
      "CREATE TAG INDEX i2_with_str ON tag_with_str(c2(30), c3(30))",
      "CREATE TAG INDEX i3_with_str ON tag_with_str(c1, c2(30), c3(30))",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c1 == 1 YIELD id(vertex) as id",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c1 == 1 and tag_with_str.c2 == \"ccc\" YIELD id(vertex) as id",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c1 == 1 and tag_with_str.c2 == \"c1_row1\" YIELD id(vertex) as id",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c1 == 5 and tag_with_str.c2 == \"ab\" YIELD id(vertex) as id",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c2 == \"abc\" and tag_with_str.c3 == \"abc\" YIELD id(vertex) as id",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c1 == 5 and tag_with_str.c2 == \"abca\" and tag_with_str.c3 == \"bc\" YIELD id(vertex) as id",
      "create tag identity (BIRTHDAY int, NATION string, BIRTHPLACE_CITY string)",
      "CREATE TAG INDEX\n  idx_identity_cname_birth_gender_nation_city\nON\n  identity(BIRTHDAY, NATION(30), BIRTHPLACE_CITY(30))",
      "LOOKUP ON\n  identity\nWHERE\n  identity.NATION == \"汉族\" AND\n  identity.BIRTHDAY \u003e 19620101 AND\n  identity.BIRTHDAY \u003c 20021231 AND\n  identity.BIRTHPLACE_CITY == \"bbb\"\nYIELD\n  id(vertex) as id;",
      "INSERT VERTEX player(name, age) VALUES hash('Tim'):('Tim', 20);"
    ]
  },
  {
    "path": "lookup",
    "file_name": "LookUp",
    "statements": [
      "LOOKUP ON lookup_tag_1 WHERE lookup_tag_1.col2 == 200 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_1\nWHERE lookup_tag_1.col2 == 200 AND lookup_tag_1.col3 \u003e 202\nYIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_1\nWHERE lookup_tag_1.col2 \u003e= 202 OR lookup_tag_1.col1 \u003c 201\nYIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col1 == true YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 == 0 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col3 \u003e= 0 YIELD id(vertex) as id",
      "LOOKUP ON lookup_edge_1 WHERE lookup_edge_1.col2 == 201 YIELD src(edge) as src, dst(Edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_1\nWHERE lookup_edge_1.col2 == 201 AND lookup_edge_1.col3 == 200\nYIELD src(edge) as src, dst(Edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_1\nWHERE lookup_edge_1.col2 == 201 OR lookup_edge_1.col3 == 200\nYIELD src(edge) as src, dst(Edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_1 WHERE lookup_edge_1.col2 IN [201] and lookup_edge_1.col2\u003e3 YIELD src(edge) as src, dst(Edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col1 == false YIELD edge as e",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 == 100 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 == 100 OR lookup_tag_2.col2 == 200 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e 100 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 != 100 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e=100 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e=100 AND lookup_tag_2.col4 == true YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e=100 AND lookup_tag_2.col4 != true YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e= 100 AND lookup_tag_2.col2 \u003c= 400 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col3 == 100.5 AND lookup_tag_2.col2 == 100 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col3 == 100.5 AND lookup_tag_2.col2 == 200 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2\nWHERE lookup_tag_2.col3 \u003e 100.5\nYIELD id(vertex) as id, lookup_tag_2.col3 AS col3",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col3 == 100.5 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col3 == 100.1 YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2\nWHERE lookup_tag_2.col3 \u003e= 100.5 AND lookup_tag_2.col3 \u003c= 300.5\nYIELD id(vertex) as id, lookup_tag_2.col3 AS col3",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 == 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 == 100 OR lookup_edge_2.col2 == 200 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 \u003e 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 != 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 \u003e= 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 \u003e= 100 AND lookup_edge_2.col4 == true YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 \u003e= 100 AND lookup_edge_2.col4 != true YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col2 \u003e= 100 AND lookup_edge_2.col2 \u003c= 400 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col3 == 100.5 AND lookup_edge_2.col2 == 100 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col3 == 100.5 AND lookup_edge_2.col2 == 200 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2\nWHERE lookup_edge_2.col3 \u003e 100.5\nYIELD lookup_edge_2.col3 AS col3",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col3 == 100.5 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2 WHERE lookup_edge_2.col3 == 100.1 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_2\nWHERE lookup_edge_2.col3 \u003e= 100.5 AND lookup_edge_2.col3 \u003c= 300.5\nYIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank, lookup_edge_2.col3 AS col3",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e abs(-5) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003c abs(-5) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003e (1 + 2) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col2 \u003c (1 + 2) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col4 != (true AND true) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col4 == (true AND true) YIELD id(vertex) as id",
      "LOOKUP ON lookup_tag_2 WHERE lookup_tag_2.col4 == (true or false) YIELD id(vertex) as id",
      "LOOKUP ON student WHERE student.number == 1 YIELD id(vertex) as name, student.age",
      "LOOKUP ON t1 WHERE t1.c1 == 1 AND t1.c2 \u003e 1 YIELD vertex as node",
      "LOOKUP ON t1 WHERE t1.c1 \u003e 1 AND t1.c2 == 1 YIELD vertex as node",
      "LOOKUP ON t1 WHERE t1.c1 \u003e 1 AND t1.c2 == 1 AND  t1.c3 == 1 YIELD vertex as node",
      "LOOKUP ON t1 WHERE t1.c3 \u003e 1 YIELD vertex as node",
      "LOOKUP ON t1 WHERE t1.c3 \u003e 1 AND t1.c1 \u003e1 YIELD vertex as node",
      "LOOKUP ON t1 WHERE t1.c4 \u003e 1 YIELD vertex as node",
      "LOOKUP ON t1 WHERE t1.c2 \u003e 1 AND t1.c3 \u003e 1 YIELD vertex as node",
      "LOOKUP ON t1 WHERE t1.c2 \u003e 1 AND t1.c1 != 1 YIELD vertex as node",
      "LOOKUP ON t1 WHERE t1.c2 != 1 YIELD vertex as node",
      "LOOKUP ON t1_str WHERE t1_str.c1 == 1 AND t1_str.c2 \u003e1 YIELD t1_str.c2",
      "LOOKUP ON t1_str WHERE t1_str.c3 == \"a\" YIELD t1_str.c4",
      "LOOKUP ON t1_str WHERE t1_str.c4 == \"a\" YIELD t1_str.c1",
      "LOOKUP ON t1_str WHERE t1_str.c3 == \"a\"  AND t1_str.c4 == \"a\" YIELD t1_str.c1",
      "LOOKUP ON t1_str WHERE t1_str.c3 == \"a\"  AND t1_str.c1 == 1 YIELD vertex as node",
      "LOOKUP ON t1_str WHERE t1_str.c3 == \"a\" AND t1_str.c2 == 1  AND t1_str.c1 == 1 YIELD vertex as node",
      "LOOKUP ON t1_str WHERE t1_str.c4 == \"a\" AND t1_str.c3 == \"a\" AND t1_str.c2 == 1  AND t1_str.c1 == 1 YIELD vertex as node",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c1 == 1 YIELD id(vertex) as id",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c1 == 1 AND tag_with_str.c2 == \"ccc\" YIELD id(vertex) as id",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c1 == 1 AND tag_with_str.c2 == \"c1_row1\" YIELD id(vertex) as id",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c1 == 5 AND tag_with_str.c2 == \"ab\" YIELD id(vertex) as id",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c2 == \"abc\" AND tag_with_str.c3 == \"abc\" YIELD id(vertex) as id",
      "LOOKUP ON tag_with_str WHERE tag_with_str.c1 == 5 AND tag_with_str.c2 == \"abca\" AND tag_with_str.c3 == \"bc\" YIELD id(vertex) as id",
      "LOOKUP ON\n  identity\nWHERE\n  identity.NATION == \"汉族\" AND\n  identity.BIRTHDAY \u003e 19620101 AND\n  identity.BIRTHDAY \u003c 20021231 AND\n  identity.BIRTHPLACE_CITY == \"bbb\"\nYIELD\n  id(vertex) as id;",
      "LOOKUP ON serve where serve.start_year \u003e 0 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON serve where serve.start_year \u003e 1997 and serve.end_year \u003c 2020 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON serve where serve.start_year \u003e 2000 and serve.end_year \u003c 2020 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON like where like.likeness \u003e 89 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON like where like.likeness \u003c 39 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON player where player.age == 35 YIELD id(vertex) as id",
      "LOOKUP ON player where player.age \u003e 0 YIELD id(vertex) as id",
      "LOOKUP ON player where player.age \u003c 100 YIELD id(vertex) as id",
      "LOOKUP ON player where player.age \u003c 100 YIELD player.age as age",
      "LOOKUP ON player where player.age \u003c 100 YIELD distinct player.age as age",
      "LOOKUP ON player where player.name == \"Useless\" YIELD id(vertex) as id",
      "LOOKUP ON player where player.name == \"Useless\" and player.age \u003c 30 YIELD id(vertex) as id",
      "LOOKUP ON team where team.name == \"Warriors\" YIELD id(vertex) as id",
      "LOOKUP ON team where team.name == \"oopp\" YIELD id(vertex) as id"
    ]
  },
  {
    "path": "lookup",
    "file_name": "LookupEdge",
    "statements": [
      "LOOKUP ON\n  lookup_edge_1\nWHERE\n  \u003cwhere_condition\u003e\nYIELD\n  src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON\n  lookup_edge_1\nWHERE\n  \u003cwhere_condition\u003e\nYIELD\n  lookup_edge_1.col1 AS col1,\n  lookup_edge_1.col2 AS col2,\n  lookup_edge_1.col3",
      "LOOKUP ON\n  lookup_edge_1\nWHERE\n  \u003cwhere_condition\u003e\nYIELD\n  src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON\n  lookup_edge_1\nWHERE\n  \u003cwhere_condition\u003e\nYIELD\n  lookup_edge_1.col1 AS col1,\n  lookup_edge_1.col2 AS col2,\n  lookup_edge_1.col3"
    ]
  },
  {
    "path": "lookup",
    "file_name": "LookupEdge2",
    "statements": [
      "LOOKUP ON lookup_edge_1 WHERE lookup_edge_1.col1 == 201 OR lookup_edge_1.col2 == 201 AND lookup_edge_1.col3 == 202 YIELD edge as e",
      "LOOKUP ON lookup_edge_1 WHERE lookup_edge_1.col1 == 300 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank",
      "LOOKUP ON lookup_edge_1 WHERE lookup_edge_1.col1 == 201 AND lookup_edge_1.col2 \u003e 200 AND lookup_edge_1.col1 \u003e 201 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank"
    ]
  },
  {
    "path": "lookup",
    "file_name": "LookupTag",
    "statements": [
      "LOOKUP ON\n  lookup_tag_1\nWHERE\n  \u003cwhere_condition\u003e\nYIELD\n  id(vertex) as id",
      "LOOKUP ON\n  lookup_tag_1\nWHERE\n  \u003cwhere_condition\u003e\nYIELD\n  lookup_tag_1.col1,\n  lookup_tag_1.col2,\n  lookup_tag_1.col3",
      "LOOKUP ON\n  lookup_tag_1\nWHERE\n  \u003cwhere_condition\u003e\nYIELD\n  id(vertex) as id",
      "LOOKUP ON\n  lookup_tag_1\nWHERE\n  \u003cwhere_condition\u003e\nYIELD\n  lookup_tag_1.col1,\n  lookup_tag_1.col2,\n  lookup_tag_1.col3"
    ]
  },
  {
    "path": "lookup",
    "file_name": "LookupTag2",
    "statements": [
      "LOOKUP ON lookup_tag_1 WHERE lookup_tag_1.col1 == 201 OR lookup_tag_1.col2 == 201 AND lookup_tag_1.col3 == 202 YIELD vertex as node",
      "LOOKUP ON lookup_tag_1 WHERE lookup_tag_1.col1 == 300 YIELD id(vertex) as id",
      "lookup on lookup_tag_1 WHERE lookup_tag_1.col1 == 201 AND lookup_tag_1.col2 \u003e 200 AND lookup_tag_1.col1 \u003e 201 YIELD id(vertex) as id",
      "LOOKUP ON\n  lookup_tag_1\nWHERE\n  lookup_tag_1.col1 != 200\nYIELD\n  lookup_tag_1.col1 AS col1,\n  lookup_tag_1.col3"
    ]
  },
  {
    "path": "lookup",
    "file_name": "Output",
    "statements": [
      "LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id |\nFETCH PROP ON player $-.id YIELD player.name",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name |\nFETCH PROP ON player $-.name YIELD player.name AS name",
      "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name",
      "$a = LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name;\nFETCH PROP ON player $a.name YIELD player.name AS name",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year, src(edge) as src, dst(edge) as dst |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year AS startYear, src(edge) as src, dst(edge) as dst |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year AS startYear",
      "$a = LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year, src(edge) as src, dst(edge) as dst;\nFETCH PROP ON serve $a.src-\u003e$a.dst YIELD serve.start_year",
      "$a = LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year AS startYear, src(edge) as src, dst(edge) as dst;\nFETCH PROP ON serve $a.src-\u003e$a.dst YIELD serve.start_year AS startYear"
    ]
  },
  {
    "path": "lookup",
    "file_name": "Output.intVid",
    "statements": [
      "LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id |\nFETCH PROP ON player $-.id YIELD player.name",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name, id(vertex) as id |\nFETCH PROP ON player $-.id YIELD player.name AS name",
      "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name",
      "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id, player.name AS name;\nFETCH PROP ON player $a.id YIELD player.name AS name",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD src(edge) as src, dst(edge) as dst, serve.start_year |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year AS startYear, src(edge) as src, dst(edge) as dst |\nFETCH PROP ON serve $-.src-\u003e$-.dst YIELD serve.start_year AS startYear",
      "$a = LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year, src(edge) as src, dst(edge) as dst;\nFETCH PROP ON serve $a.src-\u003e$a.dst YIELD serve.start_year",
      "$a = LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year AS startYear, src(edge) as src, dst(edge) as dst;\nFETCH PROP ON serve $a.src-\u003e$a.dst YIELD serve.start_year AS startYear"
    ]
  },
  {
    "path": "lookup",
    "file_name": "TagIndexFullScan",
    "statements": [
      "LOOKUP ON team WHERE team.name IN [\"non-existed-name\"] YIELD id(vertex) as id",
      "CREATE TAG INDEX composite_player_name_age_index ON player(name(64), age);",
      "DROP TAG INDEX composite_player_name_age_index",
      "DROP TAG INDEX player_name_index",
      "LOOKUP ON team WHERE team.name STARTS WITH \"ABC\" YIELD id(vertex) as id"
    ]
  },
  {
    "path": "lookup",
    "file_name": "WithYield",
    "statements": [
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1, vertex as node",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name",
      "LOOKUP ON team WHERE team.name in [\"76ers\", \"Lakers\", \"Spurs\"] YIELD vertex AS node",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year, edge as relationship",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year AS startYear",
      "LOOKUP ON like WHERE like.likeness \u003c 50 + 1 YIELD like.likeness, edge as relationship",
      "LOOKUP ON like WHERE like.likeness \u003c 50 + 1 YIELD like.likeness, edge as relationship | YIELD count(*) as nums",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year AS startYear, 1 AS a, 10+1 AS b"
    ]
  },
  {
    "path": "lookup",
    "file_name": "WithYield.intVid",
    "statements": [
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1, vertex as node",
      "LOOKUP ON player WHERE player.age == 40 YIELD player.name AS name",
      "LOOKUP ON team WHERE team.name in [\"76ers\", \"Lakers\", \"Spurs\"] YIELD vertex AS node",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year, edge as relationship",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year AS startYear",
      "LOOKUP ON like WHERE like.likeness \u003c 50 + 1 YIELD like.likeness, edge as relationship",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year AS startYear | YIELD count(*) as nums",
      "LOOKUP ON serve WHERE serve.start_year == 2008 and serve.end_year == 2019\nYIELD serve.start_year AS startYear, 1 AS a, 10+1 AS b"
    ]
  },
  {
    "path": "match",
    "file_name": "AllShortestPaths",
    "statements": [
      "WITH [\"Tim Duncan\",\"Tony Parker\"] as list1\nMATCH allShortestPaths((v1:player)-[e*0]-(v2:player))\n  WHERE id(v1) in list1 AND id(v2) in list1\n  RETURN e",
      "MATCH allShortestPaths((v1:player{name:\"Tim Duncan\"})-[e*0]-(v2:player{name:\"Tony Parker\"}))\nRETURN e",
      "WITH [\"Tim Duncan\",\"Tony Parker\"] as list1\nMATCH allShortestPaths((v1:player)-[e]-(v2:player))\n  WHERE id(v1) in list1 AND id(v2) in list1\n  RETURN e",
      "MATCH allShortestPaths((v1:player{name:\"Tim Duncan\"})-[e]-(v2:player{name:\"Tony Parker\"}))\nRETURN e",
      "MATCH allShortestPaths((v1:player{name:\"Tim Duncan\"})-[e*1]-(v2:player{name:\"Tony Parker\"}))\nRETURN e",
      "MATCH allShortestPaths((v1:player{name:\"Tim Duncan\"})-[e*1..1]-(v2:player{name:\"Tony Parker\"}))\nRETURN e",
      "MATCH p = allShortestPaths( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN p",
      "MATCH p = allShortestPaths( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN a, e, b",
      "MATCH p = allShortestPaths( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN e, p",
      "MATCH p = allShortestPaths( (a:player{name:\"Tiago Splitter\"})-[e:like*..5]-\u003e(b:player{name:\"LaMarcus Aldridge\"}) ) RETURN  p",
      "MATCH p = allShortestPaths( (a:player{name:\"Tiago Splitter\"})-[e*..5]-\u003e(b:player{name:\"LaMarcus Aldridge\"}) ) RETURN  p",
      "MATCH p = allShortestPaths( (a:player{name:\"Tiago Splitter\"})-[e*..5]-\u003e(b:player{name:\"LaMarcus Aldridge\"}) )\n  WHERE length(p) \u003e 2\n  RETURN  p",
      "MATCH p = allShortestPaths( (a:player{name:\"Tiago Splitter\"})-[e*..1]-\u003e(b:player{name:\"Tim Duncan\"}) ) RETURN  nodes(p), relationships(p)",
      "MATCH p = allShortestPaths( (a:player{age:30})-[e*..5]-\u003e(b:player{name:\"LeBron James\"}) )  RETURN p",
      "MATCH p = allShortestPaths( (a:player{age:30})-[e*..5]-\u003e(b:team) ) RETURN p",
      "MATCH p = allShortestPaths( (a:player{age:30})-[e*..5]-\u003e(b:team) )\n  WHERE length(p) == 1\n  RETURN p",
      "MATCH p = allShortestPaths( (a:player{name:\"Yao Ming\"})-[e:serve*1..3]-(b:team) ) RETURN p",
      "MATCH p = allShortestPaths( (a)-[e*..5]-(b) )\n  WHERE id(a) == 'Tim Duncan' and id(b) in ['Spurs', 'Tony Parker', 'Yao Ming']\n  RETURN p",
      "MATCH p = allShortestPaths( (a)-[e*..5]-\u003e(b) )\n  WHERE id(a) == 'Tim Duncan' and id(b) IN ['Spurs', 'Tony Parker', 'Yao Ming']\n  RETURN p",
      "MATCH p = allShortestPaths( (a)-[e*..5]-\u003e(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['Tony Parker', 'Yao Ming']\n  RETURN p",
      "MATCH p = allShortestPaths( (a)-[e:like*..4]-\u003e(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['Tony Parker', 'Yao Ming']\n  RETURN p",
      "MATCH p = allShortestPaths( (a)-[e:like*..4]-\u003e(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['xxx', 'zzz']\n  RETURN p",
      "MATCH (a:player{name:\"Tim Duncan\"}), (b:team{name:\"Spurs\"})\nMATCH p = allShortestPaths( (a)-[e:serve*..3]-(b) )\n  RETURN p",
      "MATCH (a:player{name:\"Tim Duncan\"}), (b:team{name:\"Spurs\"}), p = allShortestPaths( (a)-[e:serve*..3]-(b) ) RETURN p",
      "MATCH (a:player{name:\"Tim Duncan\"}), (b:team)\nMATCH p = allShortestPaths( (a)-[e:serve*..3]-(b) )\n  RETURN p",
      "MATCH (b:team), (a:player{age:30})\nMATCH p = allShortestPaths( (a)-[e*..5]-\u003e(b) )\n  WHERE length(p) == 1\n  RETURN p",
      "MATCH (b:team)\nMATCH p = allShortestPaths( (a:player)-[e*..5]-\u003e(b) )\n  WHERE a.player.age == 30 AND length(p) == 1\n  RETURN p",
      "MATCH (b:team)\nMATCH p = allShortestPaths( (a:player)-[e*..5]-\u003e(b) )\n  WHERE id(a) IN ['DeAndre Jordan', 'Kevin Durant', 'Russell Westbrook', 'Blake Griffin'] AND length(p) == 1\n  RETURN p",
      "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p",
      "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age \u003e 45 AND b.team.name == 'Spurs'\n  RETURN p",
      "MATCH p = allShortestPaths( (a:player)-[e:like*..3]-(b:player) )\n  WHERE a.player.age \u003e 45 AND b.player.age \u003c 30\n  RETURN p",
      "MATCH (a:player)\nMATCH p = allShortestPaths( (a)\u003c-[e:like*..2]-(b:player{name:\"Yao Ming\"}) )\n  RETURN p",
      "MATCH (a:player)\nMATCH p = allShortestPaths( (a)-[e:like*..2]-\u003e(b:player{name:\"Tony Parker\"}) )\n  RETURN p",
      "MATCH (a:player)\nMATCH p = allShortestPaths( (a)-[e:like*..2]-\u003e(b) )\n  WHERE id(b) IN ['xxx', 'zzz', 'yyy', 'Tim Duncan', 'Yao Ming']\n  RETURN p",
      "MATCH p= allShortestPaths((a:player {name:\"Tim Duncan\"})-[*..15]-(b:player {age:33}))\n  WITH nodes(p) AS pathNodes\n  UNWIND pathNodes AS node\n  RETURN DISTINCT node",
      "MATCH p = allShortestPaths( (a)-[e*..5]-(b) )\n  WHERE id(a) == 'Tim Duncan' OR id(b) in ['Spurs', 'Tony Parker', 'Yao Ming']\n  RETURN p",
      "MATCH p = allShortestPaths( (a)-[e*..5]-(b) )\n  WHERE id(a) == 'Tim Duncan'\n  RETURN p",
      "MATCH (a:player{name:'Yao Ming'}), (b:player{name:'Yao Ming'})\nMATCH p = allShortestPaths((a)-[:like*0..3]-(b))\nRETURN p",
      "MATCH p = allShortestPaths((a)-[:like*0..3]-(b))\n  WHERE id(a) == 'Yao Ming' AND id(b) == 'Yao Ming'\nRETURN p",
      "MATCH (a:player{name:'Yao Ming'}), (b:player{name:'Yao Ming'})\nMATCH p = allShortestPaths((a)-[:like*1..3]-(b))\nRETURN p",
      "MATCH (a:player{name:'Yao Ming'})\nMATCH p = allShortestPaths((a)-[:like*1..3]-(b:player{name:'Yao Ming'}))\nRETURN p",
      "MATCH p = allShortestPaths((a:player{name:'Yao Ming'})-[:like*1..3]-(b:player{name:'Yao Ming'}))\nRETURN p",
      "MATCH p = allShortestPaths((a)-[:like*1..3]-(b))\n  WHERE id(a) == 'Yao Ming' AND id(b) == 'Yao Ming'\nRETURN p"
    ]
  },
  {
    "path": "match",
    "file_name": "Base.IntVid",
    "statements": [
      "MATCH (v:player {name: \"Yao Ming\"}) RETURN v",
      "MATCH (v:player) WHERE v.player.name == \"Yao Ming\" RETURN v.player.age AS Age",
      "MATCH (v:player {age: 29}) return v.player.name AS Name",
      "MATCH (v:player {age: 29}) WHERE v.player.name STARTS WITH \"J\" return v.player.name AS Name",
      "MATCH (v:player) WHERE v.player.age \u003e= 38 AND v.player.age \u003c 45 return v.player.name AS Name, v.player.age AS Age",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r]-\u003e (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r]-\u003e (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name END AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r]-\u003e (v2)\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve|:like]-\u003e (v2)\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-\u003e (v2)\nRETURN type(r) AS Type, v2.team.name AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-\u003e (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-\u003e (v2:team{name: \"Cavaliers\"})\nWHERE r.start_year \u003c= 2005 AND r.end_year \u003e= 2005\nRETURN r.start_year AS Start_Year, r.end_year AS Start_Year",
      "MATCH (v1:player{name: \"Danny Green\"}) -[:like]-\u003e (v2)\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1:player{name: \"Danny Green\"}) \u003c-[:like]- (v2)\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1:player{name: \"Danny Green\"}) \u003c-[:like]-\u003e (v2)\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1:player{name: \"Danny Green\"}) -[:like]- (v2)\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1:player{age: 28}) -[:like]-\u003e (v2) -[:like]-\u003e (v3)\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1:player{name: 'Tony Parker'}) -[r1:serve]-\u003e (v2) \u003c-[r2:serve]- (v3)\nWHERE r1.start_year \u003c= r2.end_year AND\n      r1.end_year \u003e= r2.start_year AND\n      v1.player.name \u003c\u003e v3.player.name AND\n      v3.player.name STARTS WITH 'D'\nRETURN v1.player.name AS Player, v2.team.name AS Team, v3.player.name AS Teammate",
      "MATCH (:player{name:'Dwyane Wade'}) -[:like]-\u003e () -[:like]-\u003e (v3)\nRETURN v3.player.name AS Name",
      "MATCH (:player{name:'Dwyane Wade'}) -[:like]-\u003e () -[:like]-\u003e (v3)\nRETURN DISTINCT v3.player.name AS Name",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 3",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3\nLIMIT 3",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 0",
      "MATCH p = (n:player{name:\"Tony Parker\"}) return p,n",
      "MATCH p = (n:player{name:\"LeBron James\"})-[:like]-\u003e(m) return p, n.player.name, m.player.name",
      "MATCH p = (n:player{name:\"LeBron James\"})\u003c-[:like]-(m) return p, n.player.name, m.player.name",
      "MATCH p = (n:player{name:\"LeBron James\"})-[:like]-(m) return p, n.player.name, m.player.name",
      "MATCH p = (n:player{name:\"LeBron James\"})-[:like]-\u003e(m)-[:like]-\u003e(k) return p, n.player.name, m.player.name, k.player.name",
      "MATCH p=(:player{name:\"LeBron James\"})-[:like]-\u003e()-[:like]-\u003e() RETURN *",
      "MATCH (:player{name:\"Tony Parker\"})-[r]-\u003e() where exists(r.likeness) return r, exists({a:12}.a)",
      "MATCH (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists(m.team.likeness) return r, exists({a:12}.a)",
      "match (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists({abc:123}.abc) return r",
      "match (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists({abc:123}.ab) return r",
      "match (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists(m.player.age) return r",
      "match (v:player{age: -5}) return v",
      "match (v:player{age: +20}) return v",
      "match (v:player{age: 1+19}) return v",
      "match (v:player)-[e:like{likeness:-1}]-\u003e()  return e",
      "match (v:player)-[e:like{likeness:40+50+5}]-\u003e()  return e",
      "match (v:player)-[e:like{likeness:4*20+5}]-\u003e()  return e",
      "match (v:player)-[e:like{likeness:\"99\"}]-\u003e()  return e",
      "MATCH (v) return count(v)",
      "MATCH (v:player:bachelor) RETURN v",
      "MATCH (v:player{age:23}:bachelor) RETURN v",
      "MATCH () -[]-\u003e (v) return *",
      "MATCH () --\u003e (v) --\u003e () return count(*)",
      "MATCH (p)-[:serve*0..3]-\u003e(t) RETURN p",
      "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v.name AS vname",
      "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v.player AS vtag",
      "MATCH (v:player)-[]-\u003e(b) WHERE v.age \u003e 30 RETURN v.player.name AS vname",
      "MATCH (v:player)-[:like]-\u003e(b) WHERE v.player.age \u003e 30 WITH v.player.name AS vname, b.age AS bage RETURN vname, bage",
      "MATCH (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists(m.age) RETURN r",
      "MATCH (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists(m.player.age) RETURN r",
      "MATCH (v :player{name:\"Tim Duncan\"})-[]-(v2)-[]-(v3)\nWITH v3.name as names\nRETURN count(names) AS c",
      "MATCH (v:player{name:\"Tim Duncan\"})-[]-(v2)-[]-(v3)\nWITH v3.player.name as names\nRETURN count(distinct names) AS c",
      "MATCH (v:player) WHERE v.player.name+'n'==\"Tim Duncann\" RETURN v",
      "MATCH (v) WHERE id(v) == hash('Boris Diaw') RETURN (v)",
      "MATCH (a:team)-[e*0..1]-(b) where id(a) == hash('Tim Duncan') return b",
      "MATCH (a:team)-[e*0..0]-(b) where id(a) in [hash('Tim Duncan'), hash('Spurs')] return b",
      "MATCH (a:team)-[e*0..1]-(b) where id(a) in [hash('Tim Duncan'), hash('Spurs')] return b"
    ]
  },
  {
    "path": "match",
    "file_name": "Base",
    "statements": [
      "MATCH (v:player {name: \"Yao Ming\"}) RETURN v",
      "MATCH (v:player) WHERE v.player.age \u003c 0 RETURN v",
      "MATCH (v:player) WHERE v.player.name == \"Yao Ming\" RETURN v.player.age AS Age",
      "MATCH (v:player {age: 29}) RETURN v.player.name AS Name",
      "MATCH (v:player {age: 29}) WHERE v.player.name STARTS WITH \"J\" RETURN v.player.name AS Name",
      "MATCH (v:player) WHERE v.player.age \u003e= 38 AND v.player.age \u003c 45 RETURN v.player.name AS Name, v.player.age AS Age",
      "MATCH (v:player) where v.player.name == null RETURN v",
      "MATCH (v:player) where v.player.name == 3 RETURN v",
      "MATCH (v:player{name: \"Tim Duncan\"}) RETURN *",
      "MATCH (v:player) where v.player.age == 38 RETURN *, v.player.age + 100 AS age",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r]-\u003e (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name ELSE \"abc\" END AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r]-\u003e (v2)\nRETURN type(r) AS Type, CASE WHEN v2.tea.name IS NOT NULL THEN v2.tea.name WHEN v2.playe.name IS NOT NULL THEN v2.playe.name END AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r]-\u003e (v2)\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve|:like]-\u003e (v2)\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-\u003e (v2)\nRETURN type(r) AS Type, v2.team.name AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-\u003e (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name",
      "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-\u003e (v2:team{name: \"Cavaliers\"})\nWHERE r.start_year \u003c= 2005 AND r.end_year \u003e= 2005\nRETURN r.start_year AS Start_Year, r.end_year AS Start_Year",
      "MATCH (v1:player{name: \"Danny Green\"}) -[:like]-\u003e (v2)\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1) -[:like]-\u003e (v2:player{name: \"Danny Green\"})\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1:player{name: \"Danny Green\"}) \u003c-[:like]- (v2)\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1:player{name: \"Danny Green\"}) \u003c-[:like]-\u003e (v2)\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1:player{name: \"Danny Green\"}) -[:like]- (v2)\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v:player)-[e:like]-(v2)\nWHERE v.player.age == 38\nRETURN *",
      "MATCH (v:player)-[e:like]-\u003e(v2)\nWHERE v2.player.age \u003e 45\nRETURN *",
      "MATCH (v:player)-[e:like]-\u003e(v2)\nWHERE v.player.age == 38 and (v2.player.age \u003c 35 or v2.player.age == 40)\nRETURN *",
      "MATCH (v:player)-[e:like]-\u003e(v2)\nWHERE v.player.age == 38 and (v2.player.age \u003c 35 or v2.player.age == 40) and e.likeness \u003e 90\nRETURN *",
      "MATCH (v:player)-[e:like]-\u003e(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e",
      "MATCH (v:player)-[e:like]-\u003e(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props",
      "MATCH (v1:player)-[e]-\u003e(v2)\nWHERE v2.player.age == 38 or (v2.team.name == 'Rockets' and v1.player.age == 38)\nRETURN\n  v1.player.name AS Name,\n  type(e) as Type,\n  CASE WHEN v2.player.name IS NOT NULL THEN v2.player.name ELSE v2.team.name END AS FriendOrTeam",
      "MATCH (v1:player{name: \"Danny Green\"}) -[:like]- (v2)\nWHERE v1.player.age \u003e 1000\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1:player{name: \"Danny Green\"}) -[:like]- (v2:player{name: \"Yao Ming\"})\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1:player{name: \"Danny Green\"}) -[e1:like]- (v2)\nWHERE e1.likeness_not_exists \u003e 0\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1:player{age: 28}) -[:like]-\u003e (v2) -[:like]-\u003e (v3)\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1:player) -[:like]-\u003e (v2) -[:like]-\u003e (v3)\nWHERE v1.player.age == 28\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF, v3.player.name_not_exists AS NotExists",
      "MATCH (v1) -[:like]-\u003e (v2:player{age: 28}) -[:like]-\u003e (v3)\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1) -[:like]-\u003e (v2) -[:like]-\u003e (v3)\nWHERE v2.player.age == 28\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1) -[:like]-\u003e (v2) -[:like]-\u003e (v3:player{age: 28})\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1) -[:like]-\u003e (v2) -[:like]-\u003e (v3)\nWHERE v3.player.age == 28\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1) -[e1:like]-\u003e (v2) -[e2:like]-\u003e (v3)\nWHERE v1.player.age \u003e 28 and e1.likeness \u003e 90 and v2.player.age \u003e 40 and e2.likeness \u003e 90 and v3.player.age \u003e 40\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1) -[e1:like]-\u003e (v2) -[e2]-\u003e (v3)\nWHERE v3.player.age == 38 or (v3.team.name == 'Rockets' and v1.player.age == 38)\nRETURN v1.player.name AS Player, v2.player.name AS Friend, type(e2) AS TYPE, v3.player.name AS FoF, v3.team.name AS FoT",
      "MATCH (v1) -[e1:like]-\u003e (v2) -[e2]-\u003e (v3)\nWHERE v1.player.age \u003e 1000\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1:player{name: \"Danny Green\"}) -[:like]-\u003e (v2) -[:like]-\u003e (v3:player{name: \"Yao Ming\"})\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1) -[e1:like]-\u003e (v2) -[e2]-\u003e (v3)\nWHERE e1.likeness_not_exists \u003e 0\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1:player{name: 'Tony Parker'}) -[r1:serve]-\u003e (v2) \u003c-[r2:serve]- (v3)\nWHERE r1.start_year \u003c= r2.end_year AND\n      r1.end_year \u003e= r2.start_year AND\n      v1.player.name \u003c\u003e v3.player.name AND\n      v3.player.name STARTS WITH 'D'\nRETURN v1.player.name AS Player, v2.team.name AS Team, v3.player.name AS Teammate",
      "MATCH (:player{name:'Dwyane Wade'}) -[:like]-\u003e () -[:like]-\u003e (v3)\nRETURN v3.player.name AS Name",
      "MATCH (:player{name:'Dwyane Wade'}) -[:like]-\u003e () -[:like]-\u003e (v3)\nRETURN DISTINCT v3.player.name AS Name",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 3",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3\nLIMIT 3",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3",
      "MATCH (:player{name:'Dejounte Murray'}) -[:like]-\u003e (v)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 0",
      "MATCH p = (n:player{name:\"Tony Parker\"}) RETURN p,n",
      "MATCH p = (n:player{name:\"LeBron James\"})-[:like]-\u003e(m) RETURN p, n.player.name, m.player.name",
      "MATCH p = (n:player{name:\"LeBron James\"})\u003c-[:like]-(m) RETURN p, n.player.name, m.player.name",
      "MATCH p = (n:player{name:\"LeBron James\"})-[:like]-(m) RETURN p, n.player.name, m.player.name",
      "MATCH p = (n:player{name:\"LeBron James\"})-[:like]-\u003e(m)-[:like]-\u003e(k) RETURN p, n.player.name, m.player.name, k.player.name",
      "MATCH p=(:player{name:\"LeBron James\"})-[:like]-\u003e()-[:like]-\u003e() RETURN *",
      "MATCH p=(v)-[e*1]-\u003e(v2) WHERE id(v) IN [\"Tom\"] RETURN p",
      "UNWIND [\"Tony Parker\", \"Tim Duncan\", \"Yao Ming\"] AS a MATCH (v:player) WHERE v.player.name == a RETURN distinct a, v",
      "WITH \"Tony Parker\" AS a MATCH (v:player) WHERE v.player.name == a RETURN a, v",
      "match (:player{name:\"Tony Parker\"})-[r]-\u003e() where exists(r.likeness) RETURN r, exists({a:12}.a)",
      "match (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists(m.player.likeness) RETURN r, exists({a:12}.a)",
      "match (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists({abc:123}.abc) RETURN r",
      "match (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists({abc:123}.ab) RETURN r",
      "match (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists(m.player.age) RETURN r",
      "match (v:player{age: -1}) RETURN v",
      "match (v:player{age: +20}) RETURN v",
      "match (v:player{age: 1+19}) RETURN v",
      "match (v:player)-[e:like{likeness:-1}]-\u003e()  RETURN e",
      "match (v:player)-[e:like{likeness:40+50+5}]-\u003e()  RETURN e",
      "match (v:player)-[e:like{likeness:4*20+5}]-\u003e()  RETURN e",
      "match (v:player)-[e:like{likeness:\"99\"}]-\u003e()  RETURN e",
      "MATCH (v) RETURN v",
      "MATCH (v:player:bachelor) RETURN v",
      "MATCH (v) WHERE v.player.age == 18 RETURN v LIMIT 3",
      "MATCH (v:player{age:23}:bachelor) RETURN v",
      "MATCH () -[]-\u003e (v) RETURN *",
      "MATCH () --\u003e (v) --\u003e () RETURN count(*)",
      "MATCH (p)-[:serve*0..3]-\u003e(t) RETURN p",
      "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v.name AS vname",
      "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v.player AS vtag",
      "match (v)\nwhere id(v) == \"Tim Duncan\"\nreturn v.player, v.bachelor.name",
      "MATCH (v:player)-[]-\u003e(b) WHERE v.age \u003e 30 RETURN v.player.name AS vname",
      "MATCH (v:player)-[:like]-\u003e(b) WHERE v.player.age \u003e 30 WITH v.player.name AS vname, b.age AS bage RETURN vname, bage",
      "MATCH (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists(m.age) RETURN r",
      "MATCH (:player{name:\"Tony Parker\"})-[r]-\u003e(m) where exists(m.player.age) RETURN r",
      "MATCH (v :player{name:\"Tim Duncan\"})-[]-(v2)-[]-(v3)\nWITH v3.name as names\nRETURN count(names) AS c",
      "MATCH (v:player{name:\"Tim Duncan\"})-[]-(v2)-[]-(v3)\nWITH v3.player.name as names\nRETURN count(distinct names) AS c",
      "MATCH (v:player{name:\"Tim Duncan\"})-[]-(v2)-[]-(v3)\nWITH {a : v, b: v3} AS m\nRETURN distinct m.a.player.age AS vage, m.b.team AS bteam",
      "MATCH (v:player) WHERE v.player.name+'n'==\"Tim Duncann\" RETURN v",
      "USE nba;\nMATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;",
      "MATCH (v) WHERE id(v) == 'Boris Diaw' RETURN (v)",
      "MATCH (v) WHERE id(v) in [\"v1\", \"v2\", \"v3\", \"v4\"] RETURN id(v) limit 10;",
      "MATCH (v) WHERE id(v) in [\"v1\", \"v2\", \"v3\", \"v4\"] RETURN id(v) limit 10;",
      "match (v)-[e:like]-\u003e()\nwhere id(v) == \"Tim Duncan\"\nand rank(e) == 0\nRETURN *",
      "match (v)-[e:like]-\u003e()\nwhere id(v) == \"Tim Duncan\"\nand rank(e) != 0\nRETURN *",
      "match (v)-[e:like]-\u003e()\nwhere id(v) == \"Tim Duncan\"\nand rank(e) == 0\nRETURN *",
      "match ()-[e]-\u003e()\nwhere rank(e) == 0\nRETURN rank(e)\nlimit 3",
      "match ()-[e]-\u003e()\nwhere rank(e) != 0\nRETURN rank(e)\nlimit 1000",
      "match ()-[e]-\u003e()\nwhere abs(rank(e)) != 0 and e.start_year \u003e 2010\nRETURN rank(e)\nlimit 1000",
      "match ()-[e]-\u003e()\nwhere abs(rank(e)) == 1 and e.start_year == 2016\nRETURN e\nlimit 1000",
      "match ()-[e]-\u003e()\nwhere src(e) != \"jack\"\nRETURN rank(e)\nlimit 10000",
      "match ()-[e]-\u003e()\nwhere src(e) != 0  or abs(rank(e)) != 0\nRETURN rank(e)\nlimit 10000",
      "MATCH (a:team)-[e*0..1]-(b) where id(a) == 'Tim Duncan' RETURN b",
      "MATCH (a:team)-[e*0..0]-(b) where id(a) in ['Tim Duncan', 'Spurs'] RETURN b",
      "MATCH (a:team)-[e*0..1]-(b) where id(a) in ['Tim Duncan', 'Spurs'] RETURN b",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*0..2]-(v2)\nWHERE size([ii in e WHERE (v)-[ii]-(v2) | ii])\u003e1\nRETURN count(*) AS cnt",
      "MATCH p=(v:player)-[]-\u003e() where [ii in relationships(p) where (v)-[ii]-\u003e()]\nRETURN count(*) AS cnt"
    ]
  },
  {
    "path": "match",
    "file_name": "IndexSelecting",
    "statements": [
      "MATCH (v:player) WHERE v.player.score \u003c 20 RETURN v.player.name AS name"
    ]
  },
  {
    "path": "match",
    "file_name": "MatchById.IntVid",
    "statements": [
      "MATCH (n) WHERE id(n) == hash('James Harden') RETURN n",
      "MATCH (n) WHERE id(n) == hash('not_exist_vertex') RETURN n",
      "MATCH (n) WHERE id(n) == hash('not_exist_vertex') RETURN id(n)",
      "MATCH (n) WHERE id(n) == hash('Tony Parker') RETURN id(n), labels(n)",
      "MATCH (n) WHERE id(n) == hash('not_exist_vertex') RETURN labels(n)",
      "MATCH (n) WHERE id(n) IN [hash('not_exist_vertex')] return n",
      "MATCH (n) WHERE id(n) IN [hash('LaMarcus Aldridge'), hash('Tony Parker')] return n",
      "MATCH (n) WHERE id(n) IN [hash('LaMarcus Aldridge'), hash('Tony Parker'), hash('not_exist_vertex')] return n",
      "MATCH (n) WHERE id(n) IN [hash('LaMarcus Aldridge'), hash('Tony Parker'), hash('not_exist_vertex')] return id(n)",
      "MATCH (n) WHERE id(n) IN [hash('LaMarcus Aldridge'), hash('Tony Parker'), hash('not_exist_vertex')]\nreturn id(n), `tags`(n)",
      "MATCH (start)-[e]-(end) WHERE id(start) IN [hash(\"Paul George\"), hash(\"not_exist_vertex\")]\nRETURN *",
      "MATCH (v1) -[r]-\u003e (v2)\nWHERE id(v1) == hash(\"LeBron James\")\nRETURN type(r) AS Type, v2.team.name AS Name",
      "MATCH (v1) -[r:serve|:like]-\u003e (v2)\nWHERE id(v1) == hash(\"LeBron James\")\nRETURN type(r) AS Type, v2.team.name AS Name",
      "MATCH (v1) -[r:serve]-\u003e (v2)\nWHERE id(v1) == hash(\"LeBron James\")\nRETURN type(r) AS Type, v2.team.name AS Name",
      "MATCH (v1) -[r:serve]-\u003e (v2:team {name: \"Cavaliers\"})\nWHERE id(v1) == hash(\"LeBron James\")\nRETURN type(r) AS Type, v2.team.name AS Name",
      "MATCH (v1) -[:like]-\u003e (v2)\nWHERE id(v1) == hash(\"Danny Green\")\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1) \u003c-[:like]- (v2)\nWHERE id(v1) == hash(\"Danny Green\")\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1) \u003c-[:like]-\u003e (v2)\nWHERE id(v1) == hash(\"Danny Green\")\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1) -[:like]- (v2)\nWHERE id(v1) == hash(\"Danny Green\")\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1) -[:like]-\u003e (v2) -[:like]-\u003e (v3)\nWHERE id(v1) == hash(\"Tim Duncan\")\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1) -[:like]-\u003e () -[:like]-\u003e (v3)\nWHERE id(v1) == hash('Dwyane Wade')\nRETURN v3.player.name AS Name",
      "MATCH (v1) -[:like]-\u003e () -[:like]-\u003e (v3)\nWHERE id(v1) == hash('Dwyane Wade')\nRETURN DISTINCT v3.player.name AS Name",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == hash('Dejounte Murray')\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == hash('Dejounte Murray')\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASCENDING\nLIMIT 3",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == hash('Dejounte Murray')\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESCENDING, Name ASC\nSKIP 3",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == hash('Dejounte Murray')\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3\nLIMIT 3",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == hash('Dejounte Murray')\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == hash('Dejounte Murray')\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 0",
      "MATCH p = (n)\nWHERE id(n) == hash(\"Tony Parker\")\nRETURN p,n",
      "MATCH p = (n)-[:like]-\u003e(m)\nWHERE id(n) == hash(\"LeBron James\")\nRETURN p, n.player.name, m.player.name",
      "MATCH p = (n)\u003c-[:like]-(m)\nWHERE id(n) == hash(\"LeBron James\")\nRETURN p, n.player.name, m.player.name",
      "MATCH p = (n)-[:like]-(m)\nWHERE id(n) == hash(\"LeBron James\")\nRETURN p, n.player.name, m.player.name",
      "MATCH p = (n)-[:like]-\u003e(m)-[:like]-\u003e(k)\nWHERE id(n) == hash(\"LeBron James\")\nRETURN p, n.player.name, m.player.name, k.player.name",
      "MATCH p = (n)-[:like]-\u003e()-[:like]-\u003e()\nWHERE id(n) == hash(\"LeBron James\")\nRETURN *",
      "MATCH (n)-[e:serve*2..3{start_year: 2000}]-(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:serve*2..3{start_year: 2000}]-\u003e(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:like*2..3{likeness: 90}]-\u003e(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)\u003c-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:serve*2..3]-(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:serve*2..3]-\u003e(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:like*2..3]-\u003e(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:serve*2..3{start_year: 2000}]-(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:serve|like*2..3{likeness: 90}]-\u003e(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:serve|like*2..3{likeness: 90}]-(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (n)-[e:serve|like*2..3]-\u003e(v)\nWHERE id(n) == hash(\"Tim Duncan\")\nRETURN e, v",
      "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN COUNT(1)",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(1)",
      "MATCH (v:player{name: 'Tim Duncan'})-[e]-\u003e() RETURN type(e), count(*)",
      "MATCH (v1)-[:like]-\u003e(v2:player)-[:serve]-\u003e(v3)\nWHERE id(v2) == hash('Tim Duncan')\nRETURN COUNT(*)",
      "MATCH (v1)-[:like]-\u003e(v2:player)-[:serve]-\u003e(v3)\nWHERE id(v3) == hash('Spurs')\nRETURN COUNT(*)",
      "MATCH (v:player)-[e]-(v2)\nWHERE id(v)==hash('Marco Belinelli')\nRETURN v2",
      "MATCH (a)-[e:like]-\u003e(b)\nWHERE id(a) == hash('Tim Duncan') OR id(b) == hash('Tony Parker')\nRETURN id(a) as src, e, id(b) as dst",
      "MATCH (a)-[e:like]-\u003e(b)\nWHERE id(a) == hash('Tim Duncan') AND id(b) == hash('Tony Parker')\nRETURN id(a) as src, e, id(b) as dst",
      "MATCH (a)--(b)\nWHERE id(a) == hash('Tim Duncan') AND id(b) == hash('Tony Parker')\nRETURN id(a) as src, id(b) as dst",
      "MATCH (v1)-[:like]-\u003e(v2:player)-[:serve]-\u003e(v3)\nWHERE id(v3) == hash('Spurs') AND id(v1) == hash('Tony Parker')\nRETURN v1, v2, v3",
      "MATCH (v1)-[:like]-\u003e(v2:player)-[:serve]-\u003e(v3)\nWHERE id(v3) == hash('Spurs') OR id(v1) == hash('Tony Parker')\nRETURN v1, v2, v3",
      "MATCH (a)--(b) WHERE id(b) == hash('Tony Parker') RETURN DISTINCT id(a)\nUNION\nMATCH (a)--(b) WHERE id(b) == hash('Tony Parker') RETURN DISTINCT id(a)",
      "MATCH (a)--(b)\nWHERE id(a) == hash('Tim Duncan') OR id(b) == hash('Tony Parker')\nRETURN id(a) as src, id(b) as dst"
    ]
  },
  {
    "path": "match",
    "file_name": "MatchById",
    "statements": [
      "MATCH (n) WHERE id(n) == 'James Harden' RETURN n",
      "MATCH (n) WHERE id(n) == 'not_exist_vertex' RETURN n",
      "MATCH (n) WHERE id(n) == 'not_exist_vertex' RETURN id(n)",
      "MATCH (n) WHERE id(n) == 'Tony Parker' RETURN id(n), labels(n)",
      "MATCH (n) WHERE id(n) == 'not_exist_vertex' RETURN labels(n)",
      "MATCH (v) WHERE id(v) IN [\"Tim Duncan\",\"Tony Parker\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\"]\nRETURN v.player.name AS vname",
      "MATCH (v) WHERE id(v) IN {\"Tim Duncan\",\"Tony Parker\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\"}\nRETURN v.player.name AS vname",
      "MATCH (v) WHERE id(v) IN [\"Tim Duncan\"]\nRETURN v.player.name AS vname",
      "MATCH (v) WHERE id(v) IN {\"Tim Duncan\"}\nRETURN v.player.name AS vname",
      "MATCH (n) WHERE id(n) IN ['not_exist_vertex'] return n",
      "MATCH (n) WHERE id(n) IN ['LaMarcus Aldridge', 'Tony Parker'] return n",
      "MATCH (n) WHERE id(n) IN ['LaMarcus Aldridge', 'Tony Parker', 'not_exist_vertex'] return n",
      "MATCH (n) WHERE id(n) IN ['LaMarcus Aldridge', 'Tony Parker', 'not_exist_vertex'] return id(n)",
      "MATCH (n) WHERE id(n) IN ['LaMarcus Aldridge', 'Tony Parker', 'not_exist_vertex']\nreturn id(n), `tags`(n)",
      "MATCH (start)-[e]-(end) WHERE id(start) IN [\"Paul George\", \"not_exist_vertex\"]\nRETURN *",
      "MATCH (v1) -[r]-\u003e (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name",
      "MATCH (v1) -[r:serve|:like]-\u003e (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, CASE WHEN v2.team.name IS NOT NULL THEN v2.team.name WHEN v2.player.name IS NOT NULL THEN v2.player.name END AS Name",
      "MATCH (v1) -[r:serve]-\u003e (v2)\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name",
      "MATCH (v1) -[r:serve]-\u003e (v2:team{name: \"Cavaliers\"})\nWHERE id(v1) == \"LeBron James\"\nRETURN type(r) AS Type, v2.team.name AS Name",
      "MATCH (v1) -[:like]-\u003e (v2)\nWHERE id(v1) == \"Danny Green\"\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1) \u003c-[:like]- (v2)\nWHERE id(v1) == \"Danny Green\"\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1) \u003c-[:like]-\u003e (v2)\nWHERE id(v1) == \"Danny Green\"\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1) -[:like]- (v2)\nWHERE id(v1) == \"Danny Green\"\nRETURN v1.player.name AS Name, v2.player.name AS Friend",
      "MATCH (v1) -[:like]-\u003e (v2) -[:like]-\u003e (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF",
      "MATCH (v1) -[:like]-\u003e () -[:like]-\u003e (v3)\nWHERE id(v1) == 'Dwyane Wade'\nRETURN v3.player.name AS Name",
      "MATCH (v1) -[:like]-\u003e () -[:like]-\u003e (v3)\nWHERE id(v1) == 'Dwyane Wade'\nRETURN DISTINCT v3.player.name AS Name",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 3",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 3\nLIMIT 3",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3",
      "MATCH (v1) -[:like]-\u003e (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nLIMIT 0",
      "MATCH p = (n)\nWHERE id(n) == \"Tony Parker\"\nRETURN p,n",
      "MATCH p = (n)-[:like]-\u003e(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name",
      "MATCH p = (n)\u003c-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name",
      "MATCH p = (n)-[:like]-(m)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name",
      "MATCH p = (n)-[:like]-\u003e(m)-[:like]-\u003e(k)\nWHERE id(n) == \"LeBron James\"\nRETURN p, n.player.name, m.player.name, k.player.name",
      "MATCH p = (n)-[:like]-\u003e()-[:like]-\u003e()\nWHERE id(n) == \"LeBron James\"\nRETURN *",
      "MATCH (n)-[e:serve*2..3{start_year: 2000}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:serve*2..3{start_year: 2000}]-\u003e(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:like*2..3{likeness: 90}]-\u003e(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)\u003c-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:serve*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:serve*2..3]-\u003e(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:like*2..3]-\u003e(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:like*2..3]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:serve*2..3{start_year: 2000}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:serve|like*2..3{likeness: 90}]-\u003e(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:serve|like*2..3{likeness: 90}]-(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (n)-[e:serve|like*2..3]-\u003e(v)\nWHERE id(n) == \"Tim Duncan\"\nRETURN e, v",
      "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN count(1)",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN count(1)",
      "MATCH (v:player{name: 'Tim Duncan'})-[e]-\u003e() RETURN type(e), count(*)",
      "MATCH (v1)-[:like]-\u003e(v2:player)-[:serve]-\u003e(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)",
      "MATCH (v1)-[:like]-\u003e(v2:player)-[:serve]-\u003e(v3)\nWHERE id(v3) == 'Spurs'\nRETURN COUNT(*)",
      "MATCH (v:player)-[e]-(v2)\nWHERE id(v)=='Marco Belinelli'\nRETURN v2",
      "MATCH (a)-[e:like]-\u003e(b)\nWHERE id(a) == 'Tim Duncan' OR id(b) == 'Tony Parker'\nRETURN id(a) as src, e, id(b) as dst",
      "MATCH (a)-[e:like]-\u003e(b)\nWHERE id(a) == 'Tim Duncan' AND id(b) == 'Tony Parker'\nRETURN id(a) as src, e, id(b) as dst",
      "MATCH (a)--(b)\nWHERE id(a) == 'Tim Duncan' AND id(b) == 'Tony Parker'\nRETURN id(a) as src, id(b) as dst",
      "MATCH (v1)-[:like]-\u003e(v2:player)-[:serve]-\u003e(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3",
      "MATCH (v1)-[:like]-\u003e(v2:player)-[:serve]-\u003e(v3)\nWHERE id(v3) == 'Spurs' OR id(v1) == 'Tony Parker'\nRETURN v1, v2, v3",
      "MATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)\nUNION\nMATCH (a)--(b) WHERE id(b) == 'Tony Parker' RETURN DISTINCT id(a)",
      "MATCH (a)--(b)\nWHERE id(a) == 'Tim Duncan' OR id(b) == 'Tony Parker'\nRETURN id(a) as src, id(b) as dst",
      "OPTIONAL MATCH (n) MATCH (n) WHERE id(n) == 'James Harden' RETURN n",
      "MATCH (n) MATCH (n) WHERE id(n) == 'James Harden' RETURN n"
    ]
  },
  {
    "path": "match",
    "file_name": "MatchByVariable",
    "statements": [
      "match (v:player)\nwhere id(v) == 'Yao Ming'\nwith v.player.name1 as name\nmatch (v1:player)--(v2:player)\nwhere v1.player.name IN name\nreturn count(*) as n",
      "match (v:player)\nwhere id(v) == 'A'\nwith v.player.name as name\nmatch (v1:player)--(v2:player)\nwhere v1.player.name IN name\nreturn count(*) as n",
      "with NULL as vid\nmatch (v:player)\nwhere id(v)==vid\nreturn count(*) as n",
      "with LIST[] as vid\nmatch (v:player)\nwhere id(v)==vid\nreturn count(*) as n",
      "with NULL as vid\nmatch (v:player)\nwhere id(v) IN vid\nreturn count(*) as n",
      "with LIST[] as vid\nmatch (v:player)\nwhere id(v) IN vid\nreturn count(*) as n"
    ]
  },
  {
    "path": "match",
    "file_name": "MatchGroupBy",
    "statements": [
      "MATCH(n:player)\n  RETURN id(n) AS id,\n         count(n) AS count,\n         sum(floor(n.player.age)) AS sum,\n         max(n.player.age) AS max,\n         min(n.player.age) AS min,\n         avg(distinct n.player.age) AS age,\n         labels(n) AS lb\n    ORDER BY id, count, max, min\n    SKIP 10 LIMIT 8;",
      "MATCH(n:player)\n  RETURN id(n) AS id,\n         count(n) AS count,\n         sum(floor(n.player.age)) AS sum,\n         max(n.player.age) AS max,\n         min(n.player.age) AS min,\n         avg(distinct n.player.age)+1 AS age,\n         labels(n) AS lb\n    ORDER BY id, count, max, min\n    SKIP 10 LIMIT 8;",
      "MATCH(n:player)\n  RETURN id(n) AS id,\n         count(n) AS count,\n         sum(floor(n.player.age)) AS sum,\n         max(n.player.age) AS max,\n         min(n.player.age) AS min,\n         (INT)avg(distinct n.player.age)+1 AS age,\n         labels(n) AS lb\n    ORDER BY id, count, max, min\n    SKIP 10 LIMIT 8;",
      "MATCH(n:player)\n  WHERE n.player.age \u003e 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(n.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(n) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 6;",
      "MATCH(n:player)-[:like]-\u003e(m)\n  WHERE n.player.age \u003e 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;",
      "MATCH(n:player)-[:like*2]-\u003e(m)-[:serve]-\u003e()\n  WHERE n.player.age \u003e 35\n  WITH DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n  RETURN count(*) AS count;",
      "MATCH(n:player)-[:like*2]-\u003e(m)-[:serve]-\u003e()\n  WHERE n.player.age \u003e 35\n  WITH DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n  RETURN DISTINCT min, (INT)count(*) AS count;",
      "MATCH p = (a:player)-[:like]-\u003e(other:player)\n    WHERE other \u003c\u003e a\n  WITH a AS a, other AS other, length(p) AS len\n  RETURN a.player.name AS name, (INT)avg(other.player.age) AS age, len\n    ORDER BY name, age\n    SKIP 3 LIMIT 8",
      "MATCH p = (a)-[b:like]-\u003e(c)-[:serve]-\u003e(d:team)\n  WHERE id(a) == 'Tim Duncan'\n  WITH\n    a,\n    collect(\n      CASE c.player.name\n        WHEN null THEN null\n        ELSE [c.player.name, b.likeness, d.team.name]\n      END\n    ) AS res\n  RETURN res",
      "MATCH p = (a)-[b:like]-\u003e(c)-[:serve]-\u003e(d:team)\n  WHERE id(a) == 'Tim Duncan'\n  WITH\n    a,\n    collect(\n      CASE c.player.name\n        WHEN null THEN null\n        ELSE [c.player, b.likeness, d.team.name]\n      END\n    ) AS res\n  RETURN res"
    ]
  },
  {
    "path": "match",
    "file_name": "MultiLineMultiQueryParts",
    "statements": [
      "MATCH (m)-[]-(n), (n)-[]-(l) WHERE id(m)=='Tim Duncan'\nRETURN\n  m.player.name AS n1,\n  n.player.name AS n2,\n  CASE\n    WHEN l.team.name is not null THEN l.team.name\n    WHEN l.player.name is not null THEN l.player.name ELSE 'null'\n  END AS n3\nORDER BY n1, n2, n3\nLIMIT 10",
      "MATCH (m)-[]-(n), (n)-[]-(l) WHERE id(n)=='Tim Duncan'\nRETURN m.player.name AS n1, n.player.name AS n2, l.player.name AS n3\nORDER BY n1, n2, n3\nLIMIT 10",
      "MATCH (m)-[]-(n), (n)-[]-(l), (l)-[]-(h) WHERE id(m)==\"Tim Duncan\"\nRETURN m.player.name AS n1, n.player.name AS n2, l.team.name AS n3, h.player.name AS n4\nORDER BY n1, n2, n3, n4 LIMIT 10",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nMATCH (n)-[]-(l)\nRETURN m.player.name AS n1, n.player.name AS n2,\nCASE WHEN l.player.name is not null THEN l.player.name\nWHEN l.team.name is not null THEN l.team.name ELSE \"null\" END AS n3 ORDER BY n1, n2, n3 LIMIT 10",
      "MATCH (v:player{name:\"Tim Duncan\"})-[:like*1..3]-\u003e(n)\nWITH DISTINCT v, n\nMATCH (v)-[:serve]-\u003e(nn) return id(v) AS vid, id(nn) AS nnid",
      "MATCH (m)-[]-(n),(n) WHERE id(m)==\"Tim Duncan\" and id(n)==\"Tony Parker\"\nMATCH (n)-[]-(l) where n.player.age\u003cm.player.age\nRETURN count(*) AS count",
      "MATCH (v:player) WHERE v.player.age\u003e43\nMATCH (n:player) WHERE v.player.age\u003e40 and n.player.age\u003ev.player.age\nRETURN count(*) AS count",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nMATCH (n)-[]-(l), (l)-[]-(h)\nRETURN m.player.name AS n1, n.player.name AS n2, l.team.name AS n3, h.player.name AS n4\nORDER BY n1, n2, n3, n4 LIMIT 10",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nMATCH (n)-[]-(l)\nMATCH (l)-[]-(h)\nRETURN m.player.name AS n1, n.player.name AS n2, l.team.name AS n3, h.player.name AS n4\nORDER BY n1, n2, n3, n4 LIMIT 10",
      "MATCH (v:player{name:\"Tony Parker\"})\nWITH v AS a\nMATCH p=(o:player{name:\"Tim Duncan\"})-[]-\u003e(a)\nRETURN o.player.name",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nOPTIONAL MATCH (n)\u003c-[:serve]-(l)\nRETURN m.player.name AS n1, n.player.name AS n2, l AS n3 ORDER BY n1, n2, n3 LIMIT 10",
      "MATCH (v1:player) WHERE id(v1) IN [\"Tony Parker\", \"Tim Duncan\"]\nOPTIONAL MATCH (v1)-[e:like{likeness:90}]-\u003e(v2) MATCH (v2)-[e2:serve]-\u003e(v3)\nRETURN *",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nWITH n, n.player.name AS n1 ORDER BY n1 LIMIT 10\nMATCH (n)-[]-(l)\nRETURN n.player.name AS n1,\nCASE WHEN l.player.name is not null THEN l.player.name\nWHEN l.team.name is not null THEN l.team.name ELSE \"null\" END AS n2 ORDER BY n1, n2 LIMIT 10",
      "MATCH (m:player{name:\"Tim Duncan\"})-[:like]-(n)--()\nWITH  m,count(*) AS lcount\nMATCH (m)--(n)\nRETURN count(*) AS scount, lcount",
      "MATCH (m:player{name:\"Tim Duncan\"})-[e:like*2..3]-(n)--()\nWHERE all(i in e where rank(i)==0)\nWITH  m,count(*) AS lcount\nMATCH (m)--(n)\nRETURN count(*) AS scount, lcount",
      "MATCH (m:player{name:\"Tim Duncan\"})-[:like]-(n)--()\nWITH  m,n\nMATCH (m)--(n)\nRETURN count(*) AS scount",
      "MATCH (a:player{age:42}) WITH a\nMATCH (b:player{age:40}) WHERE b.player.age\u003ca.player.age\nUNWIND [1,2,3] as l\nRETURN count(*) AS count",
      "MATCH (a:player{age:42}) WITH a\nMATCH (b:player{age:40}) WITH a,b WHERE b.player.age\u003ca.player.age\nUNWIND [1,2,3] as l\nRETURN count(*) AS count",
      "MATCH (a:player{age:42}) WITH a\nMATCH (b:player{age:40}) WHERE b.player.age\u003ca.player.age\nUNWIND [1,2,3] AS l WITH a,b,l WHERE b.player.age+1 \u003c a.player.age\nRETURN count(*) AS count"
    ]
  },
  {
    "path": "match",
    "file_name": "MultiQueryParts",
    "statements": [
      "MATCH (m)-[]-(n), (n)-[]-(l) WHERE id(m)==\"Tim Duncan\"\nRETURN m.player.name AS n1, n.player.name AS n2,\nCASE WHEN l.team.name is not null THEN l.team.name\nWHEN l.player.name is not null THEN l.player.name ELSE \"null\" END AS n3 ORDER BY n1, n2, n3 LIMIT 10",
      "MATCH (m)-[]-(n), (n)-[]-(l) WHERE id(n)==\"Tim Duncan\"\nRETURN m.player.name AS n1, n.player.name AS n2, l.player.name AS n3 ORDER BY n1, n2, n3 LIMIT 10",
      "MATCH (m)-[]-(n), (n)-[]-(l), (l)-[]-(h) WHERE id(m)==\"Tim Duncan\"\nRETURN m.player.name AS n1, n.player.name AS n2, l.team.name AS n3, h.player.name AS n4\nORDER BY n1, n2, n3, n4 LIMIT 10",
      "MATCH (m)-[]-(n), (a)-[]-(c) WHERE id(m)==\"Tim Duncan\"\nRETURN m,n,a,c",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nMATCH (n)-[]-(l)\nRETURN m.player.name AS n1, n.player.name AS n2,\nCASE WHEN l.player.name is not null THEN l.player.name\nWHEN l.team.name is not null THEN l.team.name ELSE \"null\" END AS n3 ORDER BY n1, n2, n3 LIMIT 10",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nMATCH (n)-[]-(l), (l)-[]-(h)\nRETURN m.player.name AS n1, n.player.name AS n2, l.team.name AS n3, h.player.name AS n4\nORDER BY n1, n2, n3, n4 LIMIT 10",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nMATCH (n)-[]-(l)\nMATCH (l)-[]-(h)\nRETURN m.player.name AS n1, n.player.name AS n2, l.team.name AS n3, h.player.name AS n4\nORDER BY n1, n2, n3, n4 LIMIT 10",
      "MATCH (v:player{name:\"Tony Parker\"})\nWITH v AS a\nMATCH p=(o:player{name:\"Tim Duncan\"})-[]-\u003e(a)\nRETURN o.player.name",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nOPTIONAL MATCH (n)\u003c-[:serve]-(l)\nRETURN m.player.name AS n1, n.player.name AS n2, l AS n3 ORDER BY n1, n2, n3 LIMIT 10",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nOPTIONAL MATCH (a)\u003c-[]-(b)\nRETURN m.player.name AS n1, n.player.name AS n2, a.player.name AS n3 ORDER BY n1, n2, n3 LIMIT 10",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nWITH n, n.player.name AS n1 ORDER BY n1 LIMIT 10\nMATCH (n)-[]-(l)\nRETURN n.player.name AS n1,\nCASE WHEN l.player.name is not null THEN l.player.name\nWHEN l.team.name is not null THEN l.team.name ELSE \"null\" END AS n2 ORDER BY n1, n2 LIMIT 10",
      "MATCH (m:player{name:\"Tim Duncan\"})-[:like]-(n)--()\nWITH  m,count(*) AS lcount\nMATCH (m)--(n)\nRETURN count(*) AS scount, lcount",
      "MATCH (m:player{name:\"Tim Duncan\"})-[:like]-(n)--()\nWITH  m,n\nMATCH (m)--(n)\nRETURN count(*) AS scount",
      "MATCH (m)-[]-(n) WHERE id(m)==\"Tim Duncan\"\nWITH n, n.player.name AS n1 ORDER BY n1 LIMIT 10\nMATCH (a)-[]-(b)\nRETURN a.player.name AS n1, b.player.name AS n2 ORDER BY n1, n2 LIMIT 10"
    ]
  },
  {
    "path": "match",
    "file_name": "Path",
    "statements": [
      "match p = (v:Label_5)-[e:Rel_0]-(v1:Label_1)-[e1:Rel_1]-(v2:Label_2),\np2 = (v:Label_8)-[e2:Rel_0]-(v1:Label_1)-[e3:Rel_1]-(v2:Label_2)\nreturn count(p), count(p2)",
      "match p = (v:Label_5)-[e:Rel_0]-\u003e(v1:Label_1),\np2 = (v)\u003c-[e1:Rel_0]-(v1)\nwhere id(v) == 47\nand (p!=p2 or p\u003cp2 or p\u003ep2)\nand e == e1\nand v == v\nand v1 == v1\nreturn count(*)",
      "match p = (v1:Label_3)-[e1]-(v1)\nreturn count(p)",
      "match p2 = (v2:Label_5)-[e2]-(v2)\nreturn count(p2)",
      "match p = (v1:Label_3)-[e1]-(v1)\nmatch p2 = (v2:Label_5)-[e2]-(v2)\nreturn count(p), count(p2), count(*)",
      "match p = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p2 = (v1:Label_3)-[e2:Rel_1]-(v2)\nreturn distinct id(v1)",
      "match p = (v1:Label_3)-[e1:Rel_0]-(v1) return distinct id(v1)",
      "match p2 = (v1:Label_3)-[e2:Rel_1]-(v2)\nwhere id(v1) in [57, 47, 97]\nwith v1 as v2\nreturn id(v2)",
      "match p = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p2 = (v1:Label_3)-[e2:Rel_1]-(v2)\nreturn count(*)",
      "match p = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p2 = (v1:Label_3)-[e1:Rel_0]-(v2)\nwhere p != p2\nreturn count(*)",
      "match p = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p2 = (v1:Label_3)-[e1:Rel_0]-(v2)\nwhere p == p2\nreturn count(*)",
      "match p = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p2 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p3 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p4 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p5 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p6 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p7 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p8 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p9 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p10 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p11 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p12 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p13 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p14 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p15 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p16 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p17 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p18 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p19 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p20 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p21 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p22 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p23 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p24 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p25 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p26 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p27 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p28 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p29 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p30 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p31 = (v1:Label_3)-[e1:Rel_0]-(v1)\nmatch p32 = (v1:Label_3)-[e1:Rel_0]-(v1)\nreturn count(*)",
      "match p = (v)\nwhere id(v) == 1\nreturn count(*)",
      "match p = (v:Label_3)\nreturn count(p)",
      "match p = (v:Label_0)\nreturn count(p)",
      "match p = (v:Label_5)-[e:Rel_0]-\u003e(v1:Label_1),\np2 = (v)-[e1:Rel_0]-\u003e(v1)\nwhere p!=p2\nreturn count(p), count(p2)",
      "match p = (v:Label_5)-[e:Rel_0]-\u003e(v1:Label_1),\np2 = (v)-[e1:Rel_0]-\u003e(v1)\nwhere p==p2\nreturn count(p), count(p2)",
      "match p = (v:Label_5)-[e:Rel_0]-\u003e(v1:Label_1)\nmatch p2 = (v)-[e1:Rel_0]-\u003e(v1)\nwhere p!=p2\nreturn count(p), count(p2)",
      "match p = (v:Label_5)-[e:Rel_0]-\u003e(v1:Label_1)\nmatch p2 = (v)-[e1:Rel_0]-\u003e(v1)\nwhere p==p2\nreturn count(p), count(p2)",
      "match p = (v:Label_5)-[e:Rel_0]-\u003e(v1:Label_1),\np2 = (v)-[e1:Rel_0]-\u003e(v1)\nwhere id(v) == 47\nand p != p2\nand e == e1\nand v == v\nand v1 == v1\nreturn count(*)",
      "match p = (v:Label_5)-[e:Rel_0]-\u003e(v1:Label_1)\nreturn count(nodes(p)), count(keys(v)), count(labels(v)), id(v)",
      "match p1 = (v1)-[e*1..2]-\u003e(v2)\nwhere id(v1) in [6]\nmatch p2 = (v2)-[e*1..2]-\u003e(v1)\nreturn count(*)",
      "match p1 = (v1)-[e*1..2]-\u003e(v2)\nwhere id(v1) in [6]\nmatch p2 = (v2)-[e*1..2]-\u003e(v1)\nreturn size(e)",
      "match p = (v1:Label_11)-[e:Rel_0]-\u003e(v1)\nreturn src(e), dst(e)",
      "match p = (v1:Label_11)-[e:Rel_0]-\u003e(v2)\nwhere id(v1) == id(v2)\nreturn src(e), dst(e)",
      "match p = (v1:Label_11)-[e:Rel_0]-\u003e(v2)\nwhere id(v1) != id(v2)\nreturn count(*)",
      "match p = (v1:Label_11)-[e:Rel_0]-\u003e(v2)\nreturn count(*)",
      "match p = (v1:Label_11)-[e:Rel_0*2..4]-\u003e(v2)\nwhere id(v1) in [50]\nreturn size(e), count(*)",
      "match p = (v1:Label_11)-[e:Rel_0*2..4]-\u003e(v2)\nwhere id(v1) in [50]\nunwind e as x\nreturn x.Rel_0_7_Double, src(x)",
      "match p = (v1:Label_11)-[e:Rel_0*2..2]-\u003e(v2)\nwhere id(v1) in [50]\nunwind e as x\nreturn x.Rel_0_7_Double, src(x)",
      "match p = (v1:Label_11)-[e:Rel_0*1..1]-\u003e(v2)\nwhere id(v1) in [50]\nunwind e as x\nreturn x.Rel_0_7_Double, src(x)",
      "match (v1)-[e*1..2]-\u003e(v2)\nwhere id(v1) in [6]\nmatch (v2)-[e*1..2]-\u003e(v1)\nreturn count(*)"
    ]
  },
  {
    "path": "match",
    "file_name": "PathExpr",
    "statements": [
      "MATCH (v:player) WHERE (v)-[:like]-\u003e() RETURN v.player.name AS name",
      "MATCH (v:player) WHERE (v)-[:like]-\u003e() AND (v)-[:serve]-\u003e(:team{name: \"Spurs\"}) RETURN v.player.name AS name",
      "MATCH (v:player{name: 'Tim Duncan'})-[:like]-\u003e() WHERE (v)--\u003e() RETURN v.player.name AS name",
      "MATCH (v:player{name:\"Tim Duncan\"})\u003c-[:like]-(v2) WHERE NOT (v2)\u003c-[:like]-() RETURN v2;",
      "MATCH p = (v:player{name:\"Tim Duncan\"})-[e]-\u003e(t) WHERE NOT (v)-[]-\u003e(t:player) RETURN t",
      "MATCH (v:player) WITH (v)-[:teammate]-\u003e() AS p RETURN p",
      "MATCH (v:player{name: 'Tim Duncan'})-[:like]-\u003e() WITH (v)-[:serve]-\u003e() AS p RETURN p",
      "MATCH (v:player) RETURN (v)-[:teammate]-\u003e() AS p",
      "MATCH (v:player{name: 'Tim Duncan'})-[:like]-\u003e() RETURN (v)-[:serve]-\u003e() AS p",
      "MATCH (v:player{name:\"Tim Duncan\"})-[e]-\u003e(t) WHERE (v)-[e]-\u003e(t:team) RETURN (v)--\u003e()",
      "MATCH (v:player{name:\"Tim Duncan\"})-[e]-\u003e(t) WHERE (v)-[e]-\u003e(t:team) RETURN v, size((v)--\u003e()), (v)--\u003e()",
      "MATCH (v:player) UNWIND (v)-[:teammate]-\u003e() AS p RETURN p",
      "MATCH (v:player{name: 'Tim Duncan'})-[:like]-\u003e() UNWIND (v)-[:serve]-\u003e() AS p RETURN p",
      "MATCH (v:player)-[e]-\u003e(b)\n  WHERE id(v) IN ['Tim Duncan', 'Tony Parker'] AND (b)-[*1..2]-\u003e(v)\n  RETURN b",
      "MATCH (v:player)-[e:like]-\u003e(b)\n  WHERE (b)-[:teammate]-\u003e(v)\n  RETURN e",
      "MATCH (v:player)-[e:like*2]-\u003e(b)\n  WHERE id(v) == 'Tony Parker' AND (b)-[*1..2]-\u003e(v)\n  RETURN distinct e",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like]-(n)\n  RETURN ()-[e:like]-(n)",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like]-\u003e(n)\n  RETURN ()-[e:like]-\u003e(n)"
    ]
  },
  {
    "path": "match",
    "file_name": "PathExprRefLocalVariable",
    "statements": [
      "MATCH (v:player) WHERE [t in [v] | (v)-[:like]-\u003e(t)] RETURN v.player.name AS name",
      "MATCH (v:player) WHERE [t in [v] | (v)-[:like]-\u003e(t)] AND (v)-[:serve]-\u003e(:team{name: \"Spurs\"}) RETURN v.player.name AS name",
      "MATCH (v:player{name: 'Tim Duncan'})-[:like]-\u003e() WHERE [t in [v] | (v)--\u003e(t)] RETURN v.player.name AS name",
      "MATCH (v:player)-[e:like]-\u003e(n) WHERE (n)-[e]-\u003e(:player) RETURN v",
      "MATCH (v:player)-[e]-\u003e(n) WHERE ()-[e]-\u003e(:player) and e.likeness\u003c80 RETURN distinct v.player.name AS vname",
      "MATCH p=(v:player)-[]-() where [ii in nodes(p) where (v)-[:like]-\u003e(ii)] RETURN count(*) AS count",
      "MATCH p=(v:player)-[]-\u003e() where [ii in relationships(p) where (v)-[ii]-\u003e(:team)] return count(*) AS count",
      "MATCH p=(v:player{name:\"Tim Duncan\"})-[]-\u003e() where [ii in relationships(p) where (v)-[ii]-\u003e(:team)] return count(*) AS count",
      "MATCH (v:player), (t:player{name: \"Tim Duncan\"}) WITH [t in [t] | (v)-[:teammate]-\u003e(t)] AS p RETURN p",
      "MATCH (v:player{name: 'Tim Duncan'})-[:like]-\u003e(), (t:team {name: \"Spurs\"}) WITH [t in [t] | (v)-[:serve]-\u003e(t)] AS p RETURN p",
      "MATCH (v:player)-[e:like{likeness:80}]-\u003e() WITH [ii in [e] | (v)-[ii]-\u003e()] AS p return p",
      "MATCH (v:player{name: 'Tim Duncan'})-[:like]-\u003e(), (t:team {name: \"Spurs\"}) return [t in [t] | (v)-[:serve]-\u003e(t)] AS p",
      "MATCH (v:player)-[e]-\u003e(n) WITH ()-[e{likeness:80}]-\u003e(:player) AS p1, ()-[e]-(:team) AS p2, v.player.name AS vname WHERE size(p1)\u003e0 RETURN distinct * ORDER BY vname",
      "MATCH p1 = (v:player{name: 'Tim Duncan'})-[:like]-\u003e() return [t in relationships(p1) | (v)-[t]-\u003e()] AS p2",
      "MATCH (v:player{name: 'Tim Duncan'})-[:like]-\u003e(), (t:team {name: \"Spurs\"}) UNWIND [t in [t] | (v)-[:serve]-\u003e(t)] AS p RETURN p",
      "MATCH p1 = (v:player{name: 'Tony Parker'})-[:like]-\u003e(), (t:team {name: \"Spurs\"}) UNWIND [t in relationships(p1) | (v)-[t]-\u003e()] AS p2 RETURN p2"
    ]
  },
  {
    "path": "match",
    "file_name": "PipeAndVariable",
    "statements": [
      "$v1 = GO FROM \"Tony Parker\" OVER like YIELD id($$) AS dst, $^.player.age AS age",
      "$v1 = GO FROM \"Tony Parker\" OVER like YIELD id($$) AS dst, $^.player.age AS age;\nYIELD $v1.age",
      "$v1 = FETCH PROP ON player \"Tony Parker\"\nYIELD properties(Vertex) AS props, properties(Vertex).name AS name, properties(Vertex).age AS age",
      "$v1 = YIELD \"Tony Parker\" AS a;\nGO FROM $v1.a OVER like WHERE id($$) != $v1.a\nYIELD id($$) AS dst, $v1.a AS dst2",
      "$v1 = YIELD \"Tony Parker\" AS a;\n$v2 = YIELD $v1.a AS a;",
      "$v1 = YIELD \"Tony Parker\" AS a;\n$v2 = YIELD $v1.a AS a;\nYIELD $v1.a AS a UNION ALL YIELD $v2.a AS a",
      "$v1 = YIELD \"Tony Parker\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name",
      "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid |\nGO FROM $-.vid\nOVER like REVERSELY\nYIELD\n  $-.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst",
      "$var = LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age AS age, id(vertex) AS vid;\nGO FROM $var.vid\nOVER like REVERSELY\nYIELD\n  $var.age AS age,\n  ('Tony Parker' == like._dst) AS liked,\n  like._src AS src,\n  like._dst AS dst",
      "LOOKUP ON player\nWHERE player.name CONTAINS 'Tim'\nYIELD player.age as age, id(vertex) as vid |\nGO FROM $-.vid OVER like REVERSELY YIELD $-.age AS age, like._dst AS dst |\nYIELD\n  any(d IN COLLECT(DISTINCT $-.dst) WHERE d=='Tony Parker') AS d,\n  $-.age as age",
      "YIELD ['Tim Duncan', 'Tony Parker'] AS a\n| UNWIND $-.a AS b\n| GO FROM $-.b OVER like YIELD edge AS e",
      "YIELD {a:1, b:['Tim Duncan', 'Tony Parker'], c:'Tim Duncan'} AS a\n| YIELD $-.a.b AS b\n| UNWIND $-.b AS c\n| GO FROM $-.c OVER like YIELD edge AS e",
      "YIELD {a:1, b:['Tim Duncan', 'Tony Parker'], c:'Tim Duncan'} AS a\n| YIELD $-.a.c AS b\n| UNWIND $-.b AS c\n| GO FROM $-.c OVER like YIELD edge AS e",
      "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a",
      "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p\n| YIELD nodes($-.p) AS nodes | UNWIND $-.nodes AS a | YIELD $-.a AS a"
    ]
  },
  {
    "path": "match",
    "file_name": "RedefinedNode",
    "statements": [
      "match (v:player)-[:like]-\u003e(v) return v.player.name AS name",
      "match (v)-[:serve]-\u003e(t)\u003c-[:serve]-(v) return t.team.name, v.player.name",
      "match (v)-[]-\u003e(t)\u003c-[]-(v:player) return v.player.name, t.team.name",
      "match (v)-[]-\u003e(t)\u003c-[:serve]-(v) return t.team.name, v.player.name",
      "match (v:player)-[:like*0..2]-\u003e(v) return v.player.name AS name",
      "MATCH (n0)-[e0]-\u003e(n0) WHERE (id(n0) IN [\"Tim Duncan\", \"Carmelo Anthony\" ]) with * RETURN *"
    ]
  },
  {
    "path": "match",
    "file_name": "SameTagPropname",
    "statements": [
      "INSERT VERTEX\n  student(name, age, score)\nVALUES\n  \"zhang\":(\"s_zhang\", 18, 89),\n  \"wang\": (\"s_wang\",  22, 82),\n  \"li\":   (\"s_li\",    20, 91),\n  \"zhao\": (\"s_zhao\",  20, 99),\n  \"qian\": (\"s_qian\",  19, 88),\n  \"sun\":  (\"s_sun\",   17, 72 );\nINSERT VERTEX\n  player(name, age, height)\nVALUES\n  \"zhang\":(\"p_zhang\", 18, 189),\n  \"wang\": (\"p_wang\",  22, 192),\n  \"li\":   (\"p_li\",    20, 201),\n  \"zhao\": (\"p_zhao\",  20, 187),\n  \"qian\": (\"p_qian\",  19, 179),\n  \"sun\":  (\"p_sun\",   17, 192);",
      "INSERT EDGE\n  like(likeness)\nVALUES\n  \"zhang\"-\u003e\"wang\":(98),\n  \"zhang\"-\u003e\"li\":(89),\n  \"zhang\"-\u003e\"zhao\":(99),\n  \"zhang\"-\u003e\"sun\":(78),\n  \"zhao\"-\u003e\"sun\":(29),\n  \"zhao\"-\u003e\"wang\":(89),\n  \"zhao\"-\u003e\"li\":(99),\n  \"zhao\"-\u003e\"qian\":(100),\n  \"li\"-\u003e\"sun\":(99),\n  \"li\"-\u003e\"qian\":(89),\n  \"qian\"-\u003e\"zhang\":(20),\n  \"qian\"-\u003e\"wang\":(79),\n  \"sun\"-\u003e\"li\":(93),\n  \"sun\"-\u003e\"wang\":(95),\n  \"wang\"-\u003e\"li\":(74),\n  \"wang\"-\u003e\"zhang\":(91);",
      "match (v:player) return v.player.name, v",
      "match (v:player) where v.player.age \u003e 20 return v.player.name, v",
      "match (v:student)  return v.student.name, v",
      "match (v:student) where v.student.age \u003e 20 return v.student.name, v",
      "match (v:player)-[e:like]-\u003e(d) where v.player.age \u003e 19 return e, v.student.name, v.player.name",
      "match (v:player)-[e:like]-\u003e(d) where e.likeness  \u003e 85 return e, v.student.name, v.player.name",
      "match (v:player) where v.student.score \u003e 80 return v.student.name, v.player.height, v",
      "match (v:student {age:20}) where v.player.height \u003e 190 return v",
      "match p= (v:player)-[e:like*1..2]-\u003e(d) where v.player.age \u003e 20 return p",
      "match p= (v:player)-[e:like*1..2]-\u003e(d) where v.player.age \u003e 20 return e",
      "match p= (v:player)-[e:like]-\u003e(d) where v.student.age \u003e 19 return v.student.score, v.student.name, v.player.name",
      "match (v:player) where v.student.height \u003e 190 return v",
      "match (v:player) where v.abc.height \u003e 190 return v.player.name"
    ]
  },
  {
    "path": "match",
    "file_name": "Scan",
    "statements": [
      "MATCH (v)\nRETURN v.student.name AS Name\nLIMIT 3",
      "MATCH (v:teacher)\nRETURN v.teacher.name AS Name\nLIMIT 3",
      "MATCH (v:teacher:student)\nRETURN v.student.name AS Name\nLIMIT 3",
      "MATCH (v:person:teacher)\nRETURN v.person.name AS Name\nLIMIT 3",
      "MATCH (v:person{name: \"Mary\"}:teacher)\nRETURN v.person.name AS Name\nLIMIT 3",
      "MATCH (v)\nRETURN v.person.name AS name\nSKIP 10 LIMIT 4",
      "MATCH (v)\nRETURN v.person.name AS Name",
      "MATCH (v:person)\nRETURN v.student.name AS Name",
      "MATCH ()-[e]-\u003e()\nRETURN type(e) AS Type\nLIMIT 3",
      "MATCH ()-[e:is_teacher]-\u003e()\nRETURN type(e) AS Type, e.start_year AS StartYear, e.end_year AS EndYear\nLIMIT 3",
      "MATCH ()-[e]-\u003e()\nRETURN type(e) AS Type",
      "MATCH (v)-[e]-\u003e()\nRETURN v.person.name, type(e) AS Type\nLIMIT 3",
      "MATCH ()-[e:is_teacher]-()\nRETURN type(e) AS Type, e.start_year AS StartYear, e.end_year AS EndYear\nLIMIT 3",
      "MATCH ()-[e]-()\nRETURN type(e) AS Type, e.start_year AS StartYear, e.end_year AS EndYear\nLIMIT 3",
      "MATCH ()-[e]-\u003e()\nRETURN type(e) AS Type\nSKIP 10 LIMIT 4"
    ]
  },
  {
    "path": "match",
    "file_name": "SeekByEdge",
    "statements": [
      "MATCH (player)-[:serve]-\u003e(team)\nRETURN player.player.name, team.team.name",
      "MATCH (team)\u003c-[:serve]-(player)\nRETURN player.player.name, team.team.name",
      "MATCH (team)-[:serve]-(player)\nRETURN player.player.name, team.team.name",
      "MATCH (p1)-[:like]-\u003e(player)-[:serve]-\u003e(team)\nRETURN p1.player.name, player.player.name, team.team.name",
      "match (p1)-[:like*2]-\u003e(p2) return p1.player.name, p2.player.name",
      "match (p1)-[:like*1..2]-\u003e(p2) return p1.player.name, p2.player.name",
      "match (p1)-[:serve*2]-\u003e(p2) return p1.player.name, p2.team.name",
      "match (player)-[:serve {start_year : 2001}]-\u003e(team) return player.player.name AS player, team.team.name AS team",
      "match (team)\u003c-[:serve {start_year : 2001}]-(player) return player.player.name AS player, team.team.name AS team",
      "match (player)-[:serve {start_year : 2001}]-(team) return player.player.name AS player, team.team.name AS team",
      "match (player)-[s:serve]-\u003e(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team",
      "match (team)\u003c-[s:serve]-(player) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team",
      "match (p)-[s:serve]-(t) where s.start_year == 2001 return p.player.name AS player, t.team.name AS team",
      "match (p1)-[:like*2 {likeness: 90}]-\u003e(p2) return p1.player.name, p2.player.name",
      "match (p1)-[l:like*1..2 {likeness: 90}]-\u003e(p2) return p1.player.name, p2.player.name",
      "MATCH (p1)-[:teammate]-\u003e(p2)\nRETURN p1.player.name, p2.player.name",
      "MATCH (p1)-[]-\u003e(p2)\nRETURN p1.tag_1.name, id(p2)",
      "MATCH (p1)-[b]-\u003e(p2)\nRETURN p1.tag_1.name, id(p2)",
      "MATCH (p1)-[:edge_1]-\u003e(p2)\nRETURN p1.tag_1.name, id(p2)"
    ]
  },
  {
    "path": "match",
    "file_name": "SeekById",
    "statements": [
      "MATCH (v)\nWHERE id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, v.player.age AS Age",
      "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray']\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE NOT NOT id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, v.player.age AS Age",
      "MATCH (v)\nWHERE NOT NOT id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray']\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray']\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == 'Paul Gasol') OR id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray']\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == 'Paul Gasol') OR id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) != 'Paul Gasol'\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      OR false\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      OR true\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND true\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray', 'Paul Gasol']\n      AND (id(v) == 'James Harden' OR v.player.age == 23)\nRETURN v.player.name AS Name",
      "MATCH (v:player)\nWHERE id(v) IN ['James Harden', v.player.age]\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE ((NOT NOT id(v) == 'Paul Gasol')\n      OR id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray'])\n      AND id(v) != 'Paul Gasol'\n      AND v.player.name != 'Jonathon Simmons'\n      AND v.player.age == 29\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (id(v) == \"Tim Duncan\" AND v.player.age\u003e10) OR (id(v) == \"Tony Parker\" AND v.player.age\u003e10)\nRETURN v.player.name AS Name",
      "MATCH (v)-[:serve]-\u003e(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team",
      "MATCH (v)-[:serve]-\u003e(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol' AND id(t) IN ['Grizzlies', 'Lakers']\nRETURN v.player.name AS Name, t.team.name AS Team",
      "MATCH (v)-[:serve]-\u003e(t)\nWHERE ((NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol') OR id(t) IN ['Grizzlies', 'Lakers']\nRETURN v.player.name AS Name, t.team.name AS Team",
      "WITH [1, 2, 3] AS coll\nUNWIND coll AS vid\nMATCH (v) WHERE id(v) == \"Tony Parker\" OR id(v) == vid\nRETURN v;",
      "WITH [1, 2, 3] AS coll\nUNWIND coll AS vid\nMATCH (v) WHERE id(v) == vid\nRETURN v;",
      "MATCH (v)\nWHERE NOT id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, v.player.age AS Age",
      "MATCH (v)\nWHERE NOT id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray']\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (id(v) + '') == 'James Harden'\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) IN ['James Harden', v.player.name]\nRETURN v.player.name AS Name",
      "MATCH (v) WHERE id(v) == \"Tim Duncan\" OR id(v) != \"Tony Parker\" RETURN COUNT(*) AS count",
      "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray']\n      OR v.player.age == 23\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) == 'James Harden'\n      OR v.player.age == 23\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) == 'James Harden'\n      OR v.player.age != 23\nRETURN v.player.name AS Name",
      "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\n      OR v.player.age == 23\nRETURN v",
      "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\n      OR v.noexist.age == 23\nRETURN v",
      "MATCH (v:player)\nWHERE v.player.noexist == \"Tim Duncan\"\n      OR v.player.age == 23\nRETURN v",
      "MATCH (v:player)\nWHERE v.player.noexist == \"Tim Duncan\"\n      OR v.noexist.age == 23\nRETURN v",
      "MATCH (v:player)\nWHERE \"Tim Duncan\" == v.player.name\n      OR 23 + 1 == v.noexist.age - 3\nRETURN v",
      "MATCH (v)\nWHERE id(v) IN ['James Harden', 'Jonathon Simmons', 'Klay Thompson', 'Dejounte Murray']\n      OR id(v) == 'Yao Ming'\nRETURN v",
      "MATCH (v)-[:serve]-\u003e(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name"
    ]
  },
  {
    "path": "match",
    "file_name": "SeekById.intVid",
    "statements": [
      "MATCH (v)\nWHERE id(v) == hash('Paul Gasol')\nRETURN v.player.name AS Name, v.player.age AS Age",
      "MATCH (v)\nWHERE id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray')]\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE NOT NOT id(v) == hash('Paul Gasol')\nRETURN v.player.name AS Name, v.player.age AS Age",
      "MATCH (v)\nWHERE NOT NOT id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray')]\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == hash('Paul Gasol')) AND id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray')]\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == hash('Paul Gasol')) AND id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray'), hash('Paul Gasol')]\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == hash('Paul Gasol')) OR id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray')]\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == hash('Paul Gasol')) OR id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray'), hash('Paul Gasol')]\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == hash('Paul Gasol')) AND id(v) == hash('Paul Gasol')\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (NOT NOT id(v) == hash('Paul Gasol')) AND id(v) != hash('Paul Gasol')\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray'), hash('Paul Gasol')]\n      OR false\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray'), hash('Paul Gasol')]\n      AND (id(v) == hash('James Harden') OR v.player.age == 23)\nRETURN v.player.name AS Name",
      "MATCH (v:player)\nWHERE id(v) IN [hash('James Harden'), v.player.age]\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE ((NOT NOT id(v) == hash('Paul Gasol'))\n      OR id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray')])\n      AND id(v) != hash('Paul Gasol')\n      AND v.player.name != 'Jonathon Simmons'\n      AND v.player.age == 29\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE (id(v) == hash(\"Tim Duncan\") AND v.player.age\u003e10) OR (id(v) == hash(\"Tony Parker\") AND v.player.age\u003e10)\nRETURN v.player.name AS Name",
      "MATCH (v)-[:serve]-\u003e(t)\nWHERE (NOT NOT id(v) == hash('Paul Gasol')) AND id(v) == hash('Paul Gasol')\nRETURN v.player.name AS Name, t.team.name AS Team",
      "MATCH (v)-[:serve]-\u003e(t)\nWHERE (NOT NOT id(v) == hash('Paul Gasol')) AND id(v) == hash('Paul Gasol') AND id(t) IN [hash('Grizzlies'), hash('Lakers')]\nRETURN v.player.name AS Name, t.team.name AS Team",
      "MATCH (v)-[:serve]-\u003e(t)\nWHERE ((NOT NOT id(v) == hash('Paul Gasol')) AND id(v) == hash('Paul Gasol')) OR id(t) IN [hash('Grizzlies'), hash('Lakers')]\nRETURN v.player.name AS Name, t.team.name AS Team",
      "MATCH (v)\nWHERE NOT id(v) == hash('Paul Gasol')\nRETURN v.player.name AS Name, v.player.age AS Age",
      "MATCH (v)\nWHERE NOT id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray')]\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) IN [hash('James Harden'), v.player.name]\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray')]\n      OR v.player.age == 23\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) == hash('James Harden')\n      OR v.player.age == 23\nRETURN v.player.name AS Name",
      "MATCH (v)\nWHERE id(v) == hash('James Harden')\n      OR v.player.age != 23\nRETURN v.player.name AS Name",
      "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\n      OR v.player.age == 23\nRETURN v.player.name as name",
      "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\n      OR v.noexist.age == 23\nRETURN v.player.name as name",
      "MATCH (v:player)\nWHERE v.player.noexist == \"Tim Duncan\"\n      OR v.player.age == 23\nRETURN v.player.name as name",
      "MATCH (v:player)\nWHERE v.player.noexist == \"Tim Duncan\"\n      OR v.noexist.age == 23\nRETURN v",
      "MATCH (v:player)\nWHERE \"Tim Duncan\" == v.player.name\n      OR 23 + 1 == v.noexist.age - 3\nRETURN v.player.name as name",
      "MATCH (v)\nWHERE id(v) IN [hash('James Harden'), hash('Jonathon Simmons'), hash('Klay Thompson'), hash('Dejounte Murray')]\n      OR id(v) == hash('Yao Ming')\nRETURN v.player.name as name",
      "MATCH (v)\nWHERE (id(v) + 1) == hash('James Harden')\nRETURN v.player.name AS Name",
      "MATCH (v)-[:serve]-\u003e(t)\nWHERE id(t) == hash('Pistons')\nRETURN v.player.name AS Name",
      "CREATE TAG INDEX player_name_index ON player(name(10));",
      "MATCH (v) WHERE id(v) == -100 RETURN v;",
      "MATCH (v) WHERE id(v) IN [-100] RETURN v;"
    ]
  },
  {
    "path": "match",
    "file_name": "SeekByTag",
    "statements": [
      "MATCH (v:bachelor)\nRETURN id(v) AS vid",
      "MATCH (v:bachelor)\nRETURN id(v) AS vid, v.player.age AS age",
      "MATCH (v:team)\nRETURN id(v)",
      "MATCH (v:team)\nRETURN id(v) AS vid, v.team.name AS name",
      "MATCH (p:bachelor)-[:serve]-\u003e(t)\nRETURN t.team.name AS team"
    ]
  },
  {
    "path": "match",
    "file_name": "SeekByTag.intVid",
    "statements": [
      "MATCH (v:bachelor)\nRETURN id(v) AS vid",
      "MATCH (v:bachelor)\nRETURN id(v) AS vid, v.player.age AS age",
      "MATCH (v:team)\nRETURN id(v)",
      "MATCH (v:team)\nRETURN id(v) AS vid, v.team.name AS name",
      "MATCH (p:bachelor)-[:serve]-\u003e(t)\nRETURN t.team.name AS team"
    ]
  },
  {
    "path": "match",
    "file_name": "SelfReflectiveEdges",
    "statements": [
      "MATCH x = (n0)-[e1]-\u003e(n1)-[e2]-(n0) WHERE id(n0) == \"Hades\" and id(n1) == \"Hades\" return e1, e2",
      "MATCH x = (n0)-[e1]-\u003e(n1)\u003c-[e2]-(n0) WHERE id(n0) == \"Hades\" and id(n1) == \"Hades\" return e1, e2"
    ]
  },
  {
    "path": "match",
    "file_name": "SingleShorestPath",
    "statements": [
      "WITH [\"Tim Duncan\",\"Tony Parker\"] as list1\nMATCH shortestPath((v1:player)-[e*0]-(v2:player))\n  WHERE id(v1) in list1 AND id(v2) in list1\n  RETURN e",
      "MATCH shortestPath((v1:player{name:\"Tim Duncan\"})-[e*0]-(v2:player{name:\"Tony Parker\"}))\nRETURN e",
      "MATCH p = shortestPath( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN p",
      "MATCH p = shortestPath( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN a, e, b",
      "MATCH p = shortestPath( (a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}) )  RETURN e, p",
      "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e:like*..5]-\u003e(b:player{name:\"LaMarcus Aldridge\"}) ) RETURN  p",
      "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..5]-\u003e(b:player{name:\"LaMarcus Aldridge\"}) ) RETURN  p",
      "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..5]-\u003e(b:player{name:\"LaMarcus Aldridge\"}) )\n  WHERE length(p) \u003e 2\n  RETURN  p",
      "MATCH p = shortestPath( (a:player{name:\"Tiago Splitter\"})-[e*..1]-\u003e(b:player{name:\"Tim Duncan\"}) ) RETURN  nodes(p), relationships(p)",
      "MATCH p = shortestPath( (a:player{age:30})-[e*..5]-\u003e(b:player{name:\"LeBron James\"}) )  RETURN p",
      "MATCH p = shortestPath( (a:player{age:30})-[e*..5]-\u003e(b:team) ) WHERE id(a) != 'Blake Griffin' RETURN p",
      "MATCH p = shortestPath( (a:player{age:30})-[e*..5]-\u003e(b:team) )\n  WHERE length(p) == 1\n  RETURN p",
      "MATCH p = shortestPath( (a:player{name:\"Yao Ming\"})-[e:serve*1..3]-(b:team) ) RETURN p",
      "MATCH p = shortestPath( (a)-[e*..5]-(b) )\n  WHERE id(a) == 'Tim Duncan' and id(b) in ['Spurs', 'Tony Parker', 'Yao Ming']\n  RETURN p",
      "MATCH p = shortestPath( (a)-[e*..5]-\u003e(b) )\n  WHERE id(a) == 'Tim Duncan' and id(b) IN ['Spurs', 'Tony Parker', 'Yao Ming']\n  RETURN p",
      "MATCH p = shortestPath( (a)-[e*..5]-\u003e(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['Tony Parker', 'Yao Ming']\n  RETURN p",
      "MATCH p = shortestPath( (a)-[e:like*..4]-\u003e(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['Tony Parker', 'Yao Ming']\n  RETURN p",
      "MATCH p = shortestPath( (a)-[e:like*..4]-\u003e(b) )\n  WHERE id(b) IN ['Manu Ginobili', 'Spurs', 'Lakers'] and id(a) in ['xxx', 'zzz']\n  RETURN p",
      "MATCH (a:player{name:\"Tim Duncan\"}), (b:team{name:\"Spurs\"})\nMATCH p = shortestPath( (a)-[e:serve*..3]-(b) )\n  RETURN p",
      "MATCH (a:player{name:\"Tim Duncan\"}), (b:team{name:\"Spurs\"}), p = shortestPath( (a)-[e:serve*..3]-(b) ) RETURN p",
      "MATCH (a:player{name:\"Tim Duncan\"}), (b:team)\nMATCH p = shortestPath( (a)-[e:serve*..3]-(b) )\nRETURN b, length(p)",
      "MATCH (b:team), (a:player{age:30})\nMATCH p = shortestPath( (a)-[e*..5]-\u003e(b) )\n  WHERE length(p) == 1\n  RETURN p",
      "MATCH (b:team)\nMATCH p = shortestPath( (a:player)-[e*..5]-\u003e(b) )\n  WHERE a.player.age == 30 AND length(p) == 1\n  RETURN p",
      "MATCH (b:team)\nMATCH p = shortestPath( (a:player)-[e*..5]-\u003e(b) )\n  WHERE id(a) IN ['DeAndre Jordan', 'Kevin Durant', 'Russell Westbrook', 'Blake Griffin'] AND length(p) == 1\n  RETURN p",
      "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p",
      "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age \u003e 45 AND b.team.name == 'Spurs'\n  RETURN length(p)",
      "MATCH p = shortestPath( (a:player)-[e:like*..3]-(b:player) )\n  WHERE a.player.age \u003e  45 AND b.player.age \u003c 30\n  RETURN p",
      "MATCH (a:player)\nMATCH p = shortestPath( (a)\u003c-[e:like*..2]-(b:player{name:\"Yao Ming\"}) )\n  RETURN p",
      "MATCH (a:player)\nMATCH p = shortestPath( (a)-[e:like*..2]-\u003e(b:player{name:\"Tony Parker\"}) )\n  RETURN max(length(p)) AS maxL",
      "MATCH (a:player)\nMATCH p = shortestPath( (a)-[e:like*..2]-\u003e(b) )\n  WHERE id(b) IN ['xxx', 'zzz', 'yyy', 'Tim Duncan', 'Yao Ming']\n  RETURN p",
      "MATCH (a:player{name:\"Tim Duncan\"}), (b:team{name:\"Lakers\"})\n  OPTIONAL MATCH p = shortestPath( (a)-[:like*]-(b) )\n  RETURN\n  CASE p is NULL\n    WHEN true THEN -1\n    ELSE length(p)\n  END AS shortestPathLength",
      "MATCH p = shortestPath( (a)-[e*..5]-(b) )\n  WHERE id(a) == 'Tim Duncan'\n  RETURN p",
      "MATCH p = shortestPath( (a)-[e*..5]-(b) )\n  WHERE id(a) == 'Tim Duncan' OR id(b) in ['Spurs', 'Tony Parker', 'Yao Ming']\n  RETURN p",
      "MATCH (a:player{name:'Yao Ming'}), (b:player{name:'Yao Ming'})\nMATCH p = shortestPath((a)-[:like*0..3]-(b))\nRETURN p",
      "MATCH p = shortestPath((a)-[:like*0..3]-(b))\n  WHERE id(a) == 'Yao Ming' AND id(b) == 'Yao Ming'\nRETURN p",
      "MATCH (a:player{name:'Yao Ming'}), (b:player{name:'Yao Ming'})\nMATCH p = shortestPath((a)-[:like*1..3]-(b))\nRETURN a, b",
      "MATCH (a:player{name:'Yao Ming'})\nMATCH p = shortestPath((a)-[:like*1..3]-(b:player{name:'Yao Ming'}))\nRETURN a,b",
      "MATCH p = shortestPath((a:player{name:'Yao Ming'})-[:like*1..3]-(b:player{name:'Yao Ming'}))\nRETURN a,b",
      "MATCH p = shortestPath((a)-[:like*1..3]-(b))\n  WHERE id(a) == 'Yao Ming' AND id(b) == 'Yao Ming'\nRETURN a,b"
    ]
  },
  {
    "path": "match",
    "file_name": "StartFromAnyNode.IntVid",
    "statements": [
      "MATCH (n)-[]-(m:player{name:\"Kyle Anderson\"})-[]-(l)\nRETURN n,m,l",
      "MATCH (n)-[]-(m:player)-[]-(l)\nWHERE m.player.name==\"Kyle Anderson\"\nRETURN n,m,l",
      "MATCH p = (n)-[]-(m:player{name:\"Kyle Anderson\"})-[]-(l)\nRETURN p",
      "MATCH (n)-[e1]-(m:player{name:\"Kyle Anderson\"})-[e2]-(l)\nRETURN *",
      "MATCH (n)-[e1]-(m:player{name:\"Kyle Anderson\"})-[e2]-\u003e(l)\nRETURN *",
      "MATCH (n)-[e1]-(m:player{name:\"Kyle Anderson\"})\u003c-[e2]-(l)\nRETURN *",
      "MATCH (n)-[e1]-\u003e(m:player{name:\"Kyle Anderson\"})-[e2]-(l)\nRETURN *",
      "MATCH (n)-[e1]-\u003e(m:player{name:\"Kyle Anderson\"})-[e2]-\u003e(l)\nRETURN *",
      "MATCH (n)-[e1]-\u003e(m:player{name:\"Kyle Anderson\"})\u003c-[e2]-(l)\nRETURN *",
      "MATCH (n)\u003c-[e1]-(m:player{name:\"Kyle Anderson\"})-[e2]-(l)\nRETURN *",
      "MATCH (n)\u003c-[e1]-(m:player{name:\"Kyle Anderson\"})-[e2]-\u003e(l)\nRETURN *",
      "MATCH (n)\u003c-[e1]-(m:player{name:\"Kyle Anderson\"})\u003c-[e2]-(l)\nRETURN *",
      "MATCH p = (n)-[]-(m:player{name:\"Kyle Anderson\"})-[]-(l)-[]-(k)\nRETURN count(p) AS count",
      "MATCH p = (n)-[]-(m:player{name:\"Kyle Anderson\"})-[]-(l)-[]-(k)\nWHERE k.player.name == \"Marc Gasol\"\nRETURN n, m, l, k",
      "MATCH p = (n)-[]-(m:player{name:\"Kyle Anderson\"})-[]-(l)-[]-(k)\nWHERE k.player.name == \"Marc Gasol\"\nRETURN p",
      "MATCH p = ()-[e1]-(m:player{name:\"Kyle Anderson\"})-[e2]-()-[e3]-(k)\nWHERE k.player.name == \"Marc Gasol\"\nRETURN e1, e2, e3",
      "MATCH p = (k)-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)\nRETURN count(p) AS count",
      "MATCH p = (k)-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)\nWHERE l.team.name == \"Lakers\"\nRETURN k, n, m, l",
      "MATCH p = (k)-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)\nWHERE l.team.name == \"Lakers\"\nRETURN p",
      "MATCH ()-[e1]-()-[e2]-(:player{name:\"Kobe Bryant\"})-[e3]-(l)\nWHERE l.team.name == \"Lakers\"\nRETURN e1, e2, e3",
      "MATCH p = ()-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)-[]-(k)\nRETURN count(p) AS count",
      "MATCH p = ()-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)-[]-(k)\nWHERE k.player.name == \"Paul Gasol\"\nRETURN p",
      "MATCH (i)-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)-[]-(k)\nWHERE k.player.name == \"Paul Gasol\"\nRETURN i, n, m, l, k",
      "MATCH ()-[e1]-()-[e2]-(:player{name:\"Kobe Bryant\"})-[e3]-()-[e4]-(k)\nWHERE k.player.name == \"Paul Gasol\"\nRETURN e1, e2, e3, e4",
      "MATCH (n)-[]-(m:player{name:\"Kyle Anderson\"})\nRETURN n, m",
      "MATCH (n)-[]-(m:player{name:\"Kyle Anderson\"})\nRETURN *",
      "MATCH p = (l)-[]-(n)-[]-(m:player{name:\"Stephen Curry\"})\nRETURN p",
      "MATCH (l)-[]-(n)-[]-(m:player{name:\"Stephen Curry\"})\nRETURN l, n, m",
      "MATCH ()-[e1]-()-[e2]-(:player{name:\"Stephen Curry\"})\nRETURN e1, e2",
      "MATCH (n)-[]-(m:player{name:\"Kyle Anderson\"})-[*1..2]-(l)\nRETURN count(*) AS count",
      "MATCH (n)-[*1..2]-(m:player{name:\"Kyle Anderson\"})-[*1..2]-(l)\nWITH n as a, m as b, l as c\nRETURN count(*) AS count",
      "MATCH p = (n)-[*1..2]-(m:player{name:\"Kyle Anderson\"})-[]-(l)-[]-(k)\nRETURN count(p) AS count",
      "MATCH (n)-[]-(m)-[]-(l)\nWHERE id(m)==hash('Kyle Anderson')\nRETURN n,m,l"
    ]
  },
  {
    "path": "match",
    "file_name": "StartFromAnyNode",
    "statements": [
      "MATCH (n)-[]-(m:player{name:\"Kyle Anderson\"})-[]-(l)\nRETURN n,m,l",
      "MATCH (n)-[]-(m:player)-[]-(l)\nWHERE m.player.name==\"Kyle Anderson\"\nRETURN n,m,l",
      "MATCH p = (n)-[]-(m:player{name:\"Kyle Anderson\"})-[]-(l)\nRETURN p",
      "MATCH (n)-[e1]-(m:player{name:\"Kyle Anderson\"})-[e2]-(l)\nRETURN *",
      "MATCH (n)-[e1]-(m:player{name:\"Kyle Anderson\"})-[e2]-\u003e(l)\nRETURN *",
      "MATCH (n)-[e1]-(m:player{name:\"Kyle Anderson\"})\u003c-[e2]-(l)\nRETURN *",
      "MATCH (n)-[e1]-\u003e(m:player{name:\"Kyle Anderson\"})-[e2]-(l)\nRETURN *",
      "MATCH (n)-[e1]-\u003e(m:player{name:\"Kyle Anderson\"})-[e2]-\u003e(l)\nRETURN *",
      "MATCH (n)-[e1]-\u003e(m:player{name:\"Kyle Anderson\"})\u003c-[e2]-(l)\nRETURN *",
      "MATCH (n)\u003c-[e1]-(m:player{name:\"Kyle Anderson\"})-[e2]-(l)\nRETURN *",
      "MATCH (n)\u003c-[e1]-(m:player{name:\"Kyle Anderson\"})-[e2]-\u003e(l)\nRETURN *",
      "MATCH (n)\u003c-[e1]-(m:player{name:\"Kyle Anderson\"})\u003c-[e2]-(l)\nRETURN *",
      "MATCH p = (n)-[]-(m:player{name:\"Kyle Anderson\"})-[]-(l)-[]-(k)\nRETURN count(*) AS count",
      "MATCH p = (n)-[]-(m:player{name:\"Kyle Anderson\"})-[]-(l)-[]-(k)\nWHERE k.player.name == \"Marc Gasol\"\nRETURN n, m, l, k",
      "MATCH p = (n)-[]-(m:player{name:\"Kyle Anderson\"})-[]-(l)-[]-(k)\nWHERE k.player.name == \"Marc Gasol\"\nRETURN p",
      "MATCH p = ()-[e1]-(m:player{name:\"Kyle Anderson\"})-[e2]-()-[e3]-(k)\nWHERE k.player.name == \"Marc Gasol\"\nRETURN e1, e2, e3",
      "MATCH p = (k)-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)\nRETURN count(p) AS count",
      "MATCH p = (k)-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)\nWHERE l.team.name == \"Lakers\"\nRETURN k, n, m, l",
      "MATCH p = (k)-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)\nWHERE l.team.name == \"Lakers\"\nRETURN p",
      "MATCH ()-[e1]-()-[e2]-(:player{name:\"Kobe Bryant\"})-[e3]-(l)\nWHERE l.team.name == \"Lakers\"\nRETURN e1, e2, e3",
      "MATCH p = ()-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)-[]-(k)\nRETURN count(p) AS count",
      "MATCH p = ()-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)-[]-(k)\nWHERE k.player.name == \"Paul Gasol\"\nRETURN p",
      "MATCH (i)-[]-(n)-[]-(m:player{name:\"Kobe Bryant\"})-[]-(l)-[]-(k)\nWHERE k.player.name == \"Paul Gasol\"\nRETURN i, n, m, l, k",
      "MATCH ()-[e1]-()-[e2]-(:player{name:\"Kobe Bryant\"})-[e3]-()-[e4]-(k)\nWHERE k.player.name == \"Paul Gasol\"\nRETURN e1, e2, e3, e4",
      "MATCH (n)-[]-(m:player{name:\"Kyle Anderson\"})\nRETURN n, m",
      "MATCH (n)-[]-(m:player{name:\"Kyle Anderson\"})\nRETURN *",
      "MATCH p = (l)-[]-(n)-[]-(m:player{name:\"Stephen Curry\"})\nRETURN p",
      "MATCH (l)-[]-(n)-[]-(m:player{name:\"Stephen Curry\"})\nRETURN l, n, m",
      "MATCH ()-[e1]-()-[e2]-(:player{name:\"Stephen Curry\"})\nRETURN e1, e2",
      "MATCH (n)-[]-(m:player{name:\"Kyle Anderson\"})-[*1..2]-(l)\nRETURN count(*) AS count",
      "MATCH (n)-[*1..2]-(m:player{name:\"Kyle Anderson\"})-[*1..2]-(l)\nWITH n as a, m as b, l as c\nRETURN count(*) AS count",
      "MATCH p = (n)-[*1..2]-(m:player{name:\"Kyle Anderson\"})-[]-(l)-[]-(k)\nRETURN count(p) AS count",
      "MATCH (n)-[]-(m)-[]-(l)\nWHERE id(m)=='Kyle Anderson'\nRETURN n,m,l"
    ]
  },
  {
    "path": "match",
    "file_name": "Unwind",
    "statements": [
      "UNWIND [1, 2, 3] AS a\nRETURN a",
      "UNWIND [1, NULL, 3] AS a\nRETURN a",
      "UNWIND [1, [2, 3, NULL, 4], 5] AS a\nRETURN a",
      "UNWIND [1, [2, 3, NULL, 4], 5] AS a\nUNWIND a AS b\nRETURN b",
      "UNWIND [1, 2, 3] AS a\nUNWIND [4, 5] AS b\nRETURN b, a",
      "UNWIND [1, 2, 3] AS a\nUNWIND [5, 4] AS b\nUNWIND [8, 9] AS c\nRETURN c, b, a",
      "UNWIND [[1],[2],[2,1]] AS x\nreturn min(x) AS min, max(x) AS max",
      "UNWIND [['a'],[\"abc\"],[\"ab\",\"kajk\"]] AS x\nreturn min(x) AS min, max(x) AS max",
      "UNWIND ['a',\"abc\",\"ab\"] AS x\nreturn min(x) AS min, max(x) AS max",
      "UNWIND [true,false,false] AS x\nreturn min(x) AS min, max(x) AS max",
      "MATCH p = (x:player{name: \"Tim Duncan\"})-[:like*..2]-\u003e(y)\nUNWIND nodes(p) as n\nWITH p, size(collect(distinct n)) AS testLength\nWHERE testLength == length(p) + 1\nRETURN p",
      "match (v:player)\nwhere v.player.name in [\"Tim Duncan\"]\nunwind v.player.age as age\nreturn age;",
      "match (v:player)-[e:like]-()\nwhere v.player.name in [\"Tim Duncan\"]\nunwind e.likeness as age\nreturn age, e"
    ]
  },
  {
    "path": "match",
    "file_name": "VariableLengthPattern",
    "statements": [
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})\u003c-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3]-(v)\nRETURN e, v",
      "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN COUNT(*)",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name: \"Tim Duncan\"})-[e:serve|like*2..3{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3{start_year: 2000}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3{likeness: 90}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})\u003c-[e:serve|like*2..3{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(e)",
      "MATCH (:player{name: \"Tim Duncan\"})-[e:serve|like*2..3]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]-\u003e()\nRETURN *",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*1]-()\nRETURN e",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*1..1]-()\nRETURN e",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*2..3]-()\nWHERE e[1].likeness\u003e95 AND e[2].likeness==100\nRETURN e",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:teammate*3..4]-(v2:bachelor)\nRETURN DISTINCT v2",
      "MATCH (v:player{name: 'Tim Duncan'})-[e1:like*1..2]-(v2:player{name: 'Tony Parker'})-[e2:serve]-(v3:team{name: 'Spurs'})\nRETURN e1, e2",
      "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]-\u003e() RETURN v.player.name",
      "MATCH (v:player {name: \"Yao Ming\"})-[:serve*1..3]-\u003e() RETURN v.player.name",
      "MATCH (v:player {name: \"Yao Ming\"})-[:serve*2..3]-\u003e() RETURN v.player.name",
      "MATCH (v:player {name: \"Yao Ming\"})-[:serve*1000000000..1000000002]-\u003e() RETURN v.player.name",
      "MATCH (v)-[e:like*0..0]-(v)\nWHERE id(v) == 'Tim Duncan'\nRETURN count(*) AS cnt",
      "MATCH (v)-[e:like*0..2]-(v)\nWHERE id(v) == 'Tim Duncan'\nRETURN count(*) AS cnt",
      "MATCH (v)-[e:like*2..3]-(v)\nWHERE id(v) == 'Tim Duncan'\nRETURN count(*) AS cnt",
      "MATCH (v)-[e:like*2..3]-\u003e(v)\nWHERE id(v) == 'Tim Duncan'\nRETURN count(*) AS cnt",
      "MATCH (v)-[e:like*0..]-\u003e(v)\nWHERE id(v) == 'Tim Duncan'\nRETURN count(*) AS cnt",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*0..2]-(v2)\nWHERE size([i in e WHERE i.likeness\u003e90 | i])\u003e1\nRETURN count(*) AS cnt",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*0..2]-(v2)\nWHERE size([i in e WHERE (v)-[i]-(v2) | i])\u003e1\nRETURN count(*) AS cnt",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*0..2]-(v2)-[i]-(v3)\nWHERE size([i in e WHERE (v)-[i]-(v2) | i])\u003e1\nRETURN count(*) AS cnt",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*0..2]-(v2)-[i]-(v3)\nWHERE size([i in e WHERE (v)-[i:like]-(v2) | i])\u003e1\nRETURN count(*) AS cnt",
      "MATCH (v:player)-[e*2]-\u003e(n)\nWHERE size([n in e WHERE (v{name:'Tim Duncan'})-[n]-()])\u003e3\nRETURN v",
      "MATCH (v:player)-[e*2]-\u003e()-[n]-()\nWHERE size([n in e WHERE (v)-[n]-()])\u003e0\nRETURN count(*) AS cnt",
      "MATCH (v:player{name: 'Tim Duncan'})-[e*0..2]-(v2)\nWHERE NOT (v)-[:like*0..1]-(v2)\nRETURN count(*) AS cnt",
      "MATCH (v:player{name: 'Tim Duncan'})-[e*0..2]-(v2)\nWHERE NOT (v)-[:like*1..2]-(v2)\nRETURN count(*) AS cnt",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*0..2]-(v2)\nWHERE NOT (v)-[:like*0..1]-(v2)\nRETURN count(*) AS cnt",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*0..2]-(v2)\nWHERE NOT (v)-[:like*1..2]-(v2)\nRETURN count(*) AS cnt"
    ]
  },
  {
    "path": "match",
    "file_name": "VariableLengthPattern.intVid",
    "statements": [
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3{start_year: 2000}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})\u003c-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3]-(v)\nRETURN e, v",
      "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-(v)\nRETURN COUNT(e)",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*2..3]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name: \"Tim Duncan\"})-[e:serve|like*2..3{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3{start_year: 2000}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3{likeness: 90}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})\u003c-[e:serve|like*2..3{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve|like*2..3]-(v)\nRETURN COUNT(e)",
      "MATCH (:player{name: \"Tim Duncan\"})-[e:serve|like*2..3]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]-\u003e()\nRETURN *",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*1]-()\nRETURN e",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*1..1]-()\nRETURN e",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*2..3]-()\nWHERE e[1].likeness\u003e95 AND e[2].likeness==100\nRETURN e",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:teammate*3..4]-(v2:bachelor)\nRETURN DISTINCT v2",
      "MATCH (v:player{name: 'Tim Duncan'})-[e1:like*1..2]-(v2:player{name: 'Tony Parker'})-[e2:serve]-(v3:team{name: 'Spurs'})\nRETURN e1, e2",
      "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]-\u003e() RETURN v.player.name",
      "MATCH (v:player {name: \"Yao Ming\"})-[:serve*1..3]-\u003e() RETURN v.player.name",
      "MATCH (v:player {name: \"Yao Ming\"})-[:serve*2..3]-\u003e() RETURN v.player.name",
      "MATCH (v:player {name: \"Yao Ming\"})-[:serve*1000000000..1000000002]-\u003e() RETURN v.player.name"
    ]
  },
  {
    "path": "match",
    "file_name": "With",
    "statements": [
      "WITH [1, 2, 3] AS a, \"hello\" AS b\nRETURN a, b",
      "WITH [1, 2, 3] AS a WITH a AS a, \"hello\" AS b\nRETURN a, b",
      "WITH [1, 2, 3] AS a\nWITH a, \"hello\" AS b\nRETURN a, b",
      "WITH 1 AS a, 2 AS b\nWITH *\nRETURN *, a + b AS c",
      "WITH *, \"tom\" AS a\nRETURN *",
      "WITH collect([0, 0.0, 100]) AS n\nRETURN n",
      "WITH [1, 2, 3] AS a\nRETURN count(a)",
      "WITH {a:1, b:{c:3, d:{e:5}}} AS x\nRETURN x.b.d.e",
      "WITH {a:1, b:{c:3, d:{e:5}}} AS x\nRETURN x.b.d",
      "WITH {a:1, b:{c:3, d:{e:5}}} AS x\nRETURN x.b",
      "WITH {a:1, b:{c:3, d:{e:5}}} AS x\nRETURN x.c",
      "MATCH (v :player{name:\"Tim Duncan\"})-[]-(v2)\nWITH avg(v2.player.age) as average_age\nRETURN average_age",
      "MATCH (v :player{name:\"Tim Duncan\"})-[]-(v2)-[]-(v3)\nWITH v3.player.name as names\nRETURN count(names)",
      "MATCH (v :player{name:\"Tim Duncan\"})-[]-(v2)-[]-(v3)\nWITH v3.team.name as names\nRETURN count(names)",
      "MATCH (v :player{name:\"Tim Duncan\"})-[]-(v2)\nWITH distinct(v2.player.name) AS names\nORDER by names DESC LIMIT 5\nRETURN collect(names)",
      "MATCH (v:player)-[:like]-\u003e(v2)\nWHERE v.player.name == \"Tony Parker\" and v2.player.age == 42\nWITH *, v.player.age + 100 AS age\nRETURN *, v2.player.name",
      "MATCH (:player {name:\"Chris Paul\"})-[:serve]-\u003e(b)\nWITH collect(b) as teams\nRETURN teams",
      "MATCH (:player {name:\"Chris Paul\"})-[e:like]-\u003e(b)\nWITH avg(e.likeness) as avg, max(e.likeness) as max\nRETURN avg, max",
      "MATCH (:player {name:\"Tim Duncan\"})-[e:like]-\u003e(dst)\nWITH dst AS b\nRETURN b.player.age AS age, b",
      "MATCH (:player {name:\"Tim Duncan\"})-[e:like]-\u003e(dst)\nWITH dst AS b\nRETURN b.age AS age, b",
      "WITH \"Tony Parker\" AS a\nMATCH (v:player{name: a})\nRETURN v.player.age AS age",
      "WITH [1, 2, 3] AS a, \"hello\" AS b\nUNWIND a as c\nRETURN c",
      "UNWIND [1, 2, 3] AS a\nWITH \"hello\" AS b, a AS c\nUNWIND c as d\nRETURN b, c, d",
      "WITH {abc:123} AS m, \"hello\" AS b\nRETURN exists(m.abc), b",
      "WITH {abc:123} AS m, \"hello\" AS b\nRETURN exists(m.abc), exists(m.a), exists({label:\"hello\"}.label) as t, exists({hello:123}.a)",
      "WITH [1,2,3] AS m\nRETURN exists(m.abc)",
      "WITH null AS m\nRETURN exists(m.abc), exists((null).abc)",
      "Match p = (v)-[e]-\u003e(t) where id(v) in [100] and e.edgeProp_1_0 == true with e as e, t as t where e.edgeProp_1_0 == true return e;",
      "match p = (v)-[e]-\u003e(t) where id(v) in [100] and e.edgeProp_0_0 == true with e as e, t as t where e.edgeProp_0_0 == true return e.edgeProp_0_0;",
      "match p = (v)-[e]-\u003e(t) where id(v) in [100] and e.edgeProp_0_0 == true with e as e, t as t where e.edgeProp_0_0 == true return e.edgeProp_1_0;",
      "match p = (v0)-[e0]-\u003e(v1) where id(v0) in [\"Tim Duncan\"] unwind v0 as uv0 with * return e0;",
      "match (v0:player)--(v1:team) where v1.team.name == \"Spurs\" and v0.player.name == \"Tim Duncan\"\nmatch (v:player) where v.player.name != \"Tim Duncan\" with v0 where v0.player.age \u003e 0\nmatch (v0:player)\nwith *\nreturn count(v0)",
      "match (v:player)--(t:team)\nwhere id(v) == \"Tim Duncan\"\nunwind [1] as digit\nwith *\nmatch (t:team)\u003c--(v1)\nreturn v1.player.name",
      "match (v:player{name:\"Tim Duncan\"})-[e:like]-(v2)\nwith v2, sum(e.likeness) as likeness\nmatch (v2)-[:serve]-(v3)\nreturn *"
    ]
  },
  {
    "path": "match",
    "file_name": "ZeroStep",
    "statements": [
      "MATCH \u003cleft_node\u003e\u003cedge_dir_left\u003e\u003cedge\u003e\u003cedge_dir_right\u003e\u003cright_node\u003e\nRETURN v",
      "MATCH \u003cleft_node\u003e\u003cedge_dir_left\u003e\u003cedge\u003e\u003cedge_dir_right\u003e\u003cright_node\u003e\nRETURN e",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*0..1]-(v)\nRETURN e, v",
      "MATCH \u003cleft_node\u003e\u003cedge_dir_left\u003e\u003cedge\u003e\u003cedge_dir_right\u003e\u003cright_node\u003e\nRETURN e",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*0..2]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*0..2]-(v)-[e2 :like*0..2{likeness:90}]-(v2)\nRETURN e2, v2",
      "MATCH (v) -[*0..1]-(v2:player{name: \"Tim Duncan\"})-[*0..1]-\u003e()\nRETURN v, v2",
      "MATCH (v) -[*0..1]-(v2:player{name: \"Tim Duncan\"})-[e*1..2]-\u003e(v3)\nRETURN DISTINCT v3.player.name AS pName, v3.team.name as tName, e ORDER BY pName",
      "MATCH (v) -[e1*0..1{likeness: 90}]-(v2:player{name: \"Tony Parker\"})-[*1..2]-\u003e(v3)\nRETURN e1, v3 as Player ORDER BY Player",
      "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:like*1..]-\u003e(v2)\nRETURN v2 AS Friends;"
    ]
  },
  {
    "path": "match",
    "file_name": "ZeroStep.intVid",
    "statements": [
      "MATCH \u003cleft_node\u003e\u003cedge_dir_left\u003e\u003cedge\u003e\u003cedge_dir_right\u003e\u003cright_node\u003e\nRETURN v",
      "MATCH \u003cleft_node\u003e\u003cedge_dir_left\u003e\u003cedge\u003e\u003cedge_dir_right\u003e\u003cright_node\u003e\nRETURN e",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*0..1]-(v)\nRETURN e, v",
      "MATCH \u003cleft_node\u003e\u003cedge_dir_left\u003e\u003cedge\u003e\u003cedge_dir_right\u003e\u003cright_node\u003e\nRETURN e",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*0..2]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tim Duncan\"})-[e:serve*0..2]-(v)-[e2 :like*0..2{likeness:90}]-(v2)\nRETURN e2, v2",
      "MATCH (v) -[*0..1]-(v2:player{name: \"Tim Duncan\"})-[*0..1]-\u003e()\nRETURN v, v2",
      "MATCH (v) -[*0..1]-(v2:player{name: \"Tim Duncan\"})-[e*1..2]-\u003e(v3)\nRETURN DISTINCT v3.player.name AS pName, v3.team.name as tName, e ORDER BY pName",
      "MATCH (v) -[e1*0..1{likeness: 90}]-(v2:player{name: \"Tony Parker\"})-[*1..2]-\u003e(v3)\nRETURN e1, v3 as Player ORDER BY Player"
    ]
  },
  {
    "path": "match",
    "file_name": "ZeroStep2",
    "statements": [
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*0]-()\nRETURN e",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*0..0]-()\nRETURN e",
      "MATCH (v:player{name: 'Tim Duncan'})-[e:like*0..0]-()-[e2:like*0..0]-()\nRETURN e, e2",
      "MATCH (:player{name: \"Tim Duncan\"})-[e1:like]-\u003e()-[e2:serve*0..3]-\u003e()\u003c-[e3:serve]-(v)\nRETURN count(v)",
      "MATCH (v:player{name: \"abc\"}) -[:serve*1..3]-\u003e ()\nRETURN *",
      "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-\u003e ()\nRETURN *",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1{start_year: 2000}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*1{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0{likeness: 90}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1{likeness: 90}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0{likeness: 90}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*1{likeness: 90}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve*0..1]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:like*0..1]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{start_year: 2000}]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{start_year: 2000}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1{likeness: 90}]-\u003e(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-(v)\nRETURN e, v",
      "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like*0..1]-\u003e(v)\nRETURN e, v"
    ]
  },
  {
    "path": "mutate",
    "file_name": "ClearSpace",
    "statements": [
      "CLEAR SPACE IF EXISTS clear_space;",
      "CLEAR SPACE clear_space;",
      "CLEAR SPACE IF EXISTS clear_space_0;",
      "INSERT VERTEX\n  player(name, age)\nVALUES\n  \"Russell Westbrook\": (\"Russell Westbrook\", 30),\n  \"Chris Paul\": (\"Chris Paul\", 33),\n  \"Boris Diaw\": (\"Boris Diaw\", 36),\n  \"David West\": (\"David West\", 38),\n  \"Danny Green\": (\"Danny Green\", 31),\n  \"Tim Duncan\": (\"Tim Duncan\", 42),\n  \"James Harden\": (\"James Harden\", 29),\n  \"Tony Parker\": (\"Tony Parker\", 36),\n  \"Aron Baynes\": (\"Aron Baynes\", 32),\n  \"Ben Simmons\": (\"Ben Simmons\", 22),\n  \"Blake Griffin\": (\"Blake Griffin\", 30);",
      "show stats;",
      "CLEAR SPACE IF EXISTS clear_space2;",
      "show stats;",
      "GRANT ROLE ADMIN ON clear_space2 TO clear_space_user;"
    ]
  },
  {
    "path": "mutate",
    "file_name": "InsertDurationType",
    "statements": [
      "SHOW CREATE TAG tag_duration;",
      "SHOW CREATE EDGE edge_duration;",
      "DELETE VERTEX \"test\";\nDELETE EDGE edge_duration \"test_src\"-\u003e\"test_dst\";",
      "FETCH PROP ON tag_duration \"test\" YIELD vertex as node;",
      "FETCH PROP ON edge_duration \"test_src\"-\u003e\"test_dst\" YIELD edge as e;"
    ]
  },
  {
    "path": "mutate",
    "file_name": "InsertWithTimeType",
    "statements": [
      "SHOW CREATE TAG tag_date;",
      "SHOW CREATE EDGE edge_date;",
      "FETCH PROP ON tag_date \"test\" YIELD tag_date.f_date, tag_date.f_time, tag_date.f_datetime;",
      "FETCH PROP ON edge_date \"test_src\"-\u003e\"test_dst\" YIELD edge_date.f_date, edge_date.f_time, edge_date.f_datetime;",
      "FETCH PROP ON tag_date \"test\" YIELD tag_date.f_date, tag_date.f_time, tag_date.f_datetime;",
      "FETCH PROP ON edge_date \"test_src\"-\u003e\"test_dst\" YIELD edge_date.f_date, edge_date.f_time, edge_date.f_datetime;",
      "FETCH PROP ON tag_date \"test\" YIELD tag_date.f_date, tag_date.f_time, tag_date.f_datetime;",
      "FETCH PROP ON edge_date \"test_src\"-\u003e\"test_dst\" YIELD edge_date.f_date, edge_date.f_time, edge_date.f_datetime;",
      "FETCH PROP ON tag_date \"test\" YIELD tag_date.f_date, tag_date.f_time, tag_date.f_datetime;",
      "FETCH PROP ON edge_date \"test_src\"-\u003e\"test_dst\" YIELD edge_date.f_date, edge_date.f_time, edge_date.f_datetime;",
      "UPDATE VERTEX \"test\"\nSET\n  tag_date.f_date = Date({year: 2018, month: 3, day: 4}),\n  tag_date.f_time = Time({hour: 22, minute: 1, second: 0, millisecond: 0, microsecond: 0}),\n  tag_date.f_datetime = DateTime({year: 2018, month: 3, day: 4, hour: 22, minute: 30, second: 40, millisecond: 0, microsecond: 0})\nYIELD f_date, f_time, f_datetime;",
      "UPDATE EDGE \"test_src\"-\u003e\"test_dst\" OF edge_date\nSET\n  edge_date.f_date = Date(\"2018-03-04\"),\n  edge_date.f_time = Time(\"22:01:00\"),\n  edge_date.f_datetime = DateTime(\"2018-03-04T22:30:40\")\nYIELD f_date, f_time, f_datetime",
      "DELETE VERTEX \"test\" WITH EDGE;\nDELETE EDGE edge_date \"test_src\"-\u003e\"test_dst\";",
      "FETCH PROP ON tag_date \"test\" YIELD vertex as node;",
      "FETCH PROP ON edge_date \"test_src\"-\u003e\"test_dst\" YIELD edge as e;"
    ]
  },
  {
    "path": "optimizer",
    "file_name": "PrunePropertiesRule",
    "statements": [
      "MATCH p = (v:player{name: \"Tony Parker\"})-[e:like]-(v2)\nRETURN p",
      "MATCH (v:player{name: \"Tony Parker\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3",
      "MATCH (v:player{name: \"Tony Parker\"})-[:serve]-\u003e(t:team)\nWITH DISTINCT v, t\nRETURN t",
      "MATCH (v:player{name: \"Tony Parker\"})-[:serve]-\u003e(t:team)\nWITH DISTINCT v.player.age as age, t\nRETURN t",
      "match (v:player) return properties(v).name AS name order by name limit 2;",
      "match (v:player) return properties(v).name AS name, v.player.age AS age order by name limit 2;",
      "match (v:player) where properties(v).name ==  \"LaMarcus Aldridge\" return properties(v).age;",
      "match (v:player) where properties(v).name ==  \"LaMarcus Aldridge\" return v.player.age;",
      "match (v:player) where properties(v).name==\"LaMarcus Aldridge\" return v.player.sex,properties(v).age;",
      "match (v:player) where id(v)==\"Carmelo Anthony\" return v.player.age;",
      "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;",
      "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age,v.player.sex;",
      "match (v:player{name:\"LaMarcus Aldridge\"}) return v.player.age;",
      "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age;",
      "match (v:player{name:\"LaMarcus Aldridge\"}) return properties(v).age,v.player.sex;",
      "match (v:player) return id(v) AS id, properties(v).name AS name, v.player.age AS age order by name limit 2;",
      "match (v)-[]-\u003e(b:player) return id(v) AS id, properties(v).name AS name, v.player.age AS age order by name limit 2;",
      "match ()-[e:serve]-\u003e() return properties(e).start_year AS year order by year limit 2;",
      "match ()-[e:serve]-\u003e() return properties(e).start_year AS year,e.end_year  order by year limit 2;",
      "match ()-[e:serve]-\u003e() where e.start_year\u003e1022 return properties(e).end_year AS year order by year limit 2;",
      "match ()-[e:serve]-\u003e() where e.start_year\u003e1022 return e.end_year AS year order by year limit 2;",
      "match ()-[e:serve]-\u003e() where e.start_year\u003e1022 return e.end_year AS year, properties(e).degree order by year limit 2;",
      "match ()-[e:serve]-\u003e() where e.start_year\u003e1022 return properties(e).degree limit 2;",
      "match ()-[e:serve{degree:88}]-\u003e()  return properties(e).start_year AS year order by year limit 2;",
      "match ()-[e:serve{degree:88}]-\u003e()  return e.end_year AS year order by year limit 2;",
      "match ()-[e:serve{degree:88}]-\u003e()  return e.end_year, properties(e).start_year AS year order by year limit 2;",
      "match (src_v:player{name:\"Manu Ginobili\"})-[e]-(dst_v)\n  return properties(src_v).age,properties(e).degree,properties(dst_v).name AS name,src_v.player.sex,e.start_year,dst_v.player.age\n  order by name limit 3;",
      "match (src_v:player{name:\"Manu Ginobili\"})-[e*2]-(dst_v)\n  return properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;",
      "match (src_v:player{name:\"Manu Ginobili\"})-[e:like*2..3]-(dst_v)\n  return distinct properties(src_v).sex,properties(e[0]).degree as degree,properties(dst_v).name as name,src_v.player.age AS age, e[1].start_year,dst_v.player.age\n  order by degree, name, age limit 5;",
      "match (v1)--\u003e(v2)--\u003e(v3) where id(v1)==\"Manu Ginobili\"\n  return properties(v1).name,properties(v2).age AS age,properties(v3).name as name\n  order by age, name limit 1;",
      "match (v1)--\u003e(v2)--\u003e(v3) where id(v1)==\"Manu Ginobili\"\n  return properties(v1).name,properties(v2).age AS age,properties(v3).name as name,v1.player.sex,v2.player.sex,id(v3)\n  order by age, name limit 1;",
      "match (v1)--\u003e(v2:player)--\u003e(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name,v2.player.sex,v1.player.age\n  order by age, name limit 1;",
      "match (v1)--\u003e(v2:player)--\u003e(v3) where v2.player.name==\"Shaquille O'Neal\"\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name limit 1;",
      "match (v1)--\u003e(v2)--\u003e(v3:team{name:\"Celtics\"})\n  return properties(v1).name,properties(v2).age as age,properties(v3).name AS name\n  order by name, age limit 1;",
      "match (src_v)-[e:like|serve]-\u003e(dst_v) where  id(src_v)==\"Rajon Rondo\"\n  return properties(e).degree, e.end_year AS year\n  order by year limit 3;",
      "match (src_v)-[e:like|serve]-\u003e(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\"\n  return properties(e).degree as degree,properties(e2).degree AS degree1\n  order by degree, degree1 limit 5;",
      "match (src_v)-[e:like|serve]-\u003e(dst_v)-[e2]-(dst_v2) where  id(src_v)==\"Rajon Rondo\" return properties(e).degree1,properties(e).degree1,e2.a,dst_v.p.name,dst_v.player.sex1,properties(src_v).name2 limit 5;",
      "MATCH (v:player)-[e:like]-\u003e(t) WHERE v.player.name=='Tim Duncan'  RETURN v.player.name, v.x.y, v.player.age",
      "MATCH (v:player)-[:like]-\u003e(t) WHERE v.player.name==\"Tim Duncan\" RETURN v.player.name, properties(v), t",
      "MATCH (v:player)-[:like]-\u003e(t) WHERE v.player.name==\"Tim Duncan\" RETURN v.player.name, t.errortag.name, properties(v), t",
      "match (v0:player)-[e0]-\u003e(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return count(a)",
      "match (v0:player)-[e0]-\u003e(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return sum(a)",
      "match (v0:player)-[e0]-\u003e(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return max(a)",
      "match (v0:player)-[e0]-\u003e(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return min(a)",
      "match (v0:player)-[e0]-\u003e(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return avg(a)",
      "match (v0:player)-[e0]-\u003e(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return std(a)",
      "match (v0:player)-[e0]-\u003e(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return std(a)",
      "match (v0:player)-[e0]-\u003e(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return bit_or(a)",
      "match (v0:player)-[e0]-\u003e(v1) where id(v0) == \"Tim Duncan\" unwind e0.start_year as a return bit_and(a)",
      "MATCH (v:player)-[e*1..2]-\u003e(v2:player) WHERE id(v) =='Yao Ming'  RETURN *"
    ]
  },
  {
    "path": "optimizer",
    "file_name": "PushFilterDownAggregateRule",
    "statements": [
      "match (v0:player)-[e0:serve]-\u003e(v1)\u003c-[e1:serve]-(v2:player)\nwhere id(v0) in [\"Tim Duncan\", \"Aron Baynes\", \"Ben Simmons\"]\nwith v0, avg(v0.player.age + e0.start_year + v2.player.age + 1000) as pi0,\nendNode(e0) as pi1\nwith (v0.player.age + 1000 ) / pi1.player.age as pi0, pi1, pi1.player.age + 50 as pi2,\nv0, pi1.player.name as pi3, avg(v0.player.age * 100 + pi0) as pi4\nwhere v0.player.name == \"Ben Simmons\"\nwith (v0.player.age + 1000 ) / pi1.player.age as pi0, pi1, pi1.player.age + 50 as pi2,\nv0, pi1.player.name as pi3, avg(v0.player.age * 100 + pi0) as pi4\nwhere v0.player.name == \"Ben Simmons\"\nwith v0.player.name as pi0 where pi0 == pi0\nreturn *"
    ]
  },
  {
    "path": "optimizer",
    "file_name": "PushFilterDownTraverseRule",
    "statements": [
      "MATCH (v:player)-[e:like]-\u003e(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]-\u003e(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *",
      "MATCH (v:player)-[e:like]-\u003e(v2) WHERE none_direct_src(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]-\u003e(v2) WHERE id(v) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *"
    ]
  },
  {
    "path": "parser",
    "file_name": "Example",
    "statements": [
      "MATCH (v:player{name: \"Tim Duncan\"})\nRETURN v.player.name AS Name",
      "SHOW HOSTS",
      "SHOW SPACES",
      "YIELD 1 AS id, 2 AS id"
    ]
  },
  {
    "path": "findPath",
    "file_name": "AllPath.IntVid",
    "statements": [
      "FIND ALL PATH FROM hash(\"Tim Duncan\") TO hash(\"Tim Duncan\") OVER * UPTO 2 STEPS YIELD path as p",
      "FIND ALL PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"Manu Ginobili\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"LaMarcus Aldridge\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"Spurs\") OVER like,serve UPTO 3 STEPS YIELD path as p",
      "GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst |\nFIND ALL PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD PATH as p",
      "$a = GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"Spurs\") OVER like,serve UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 3",
      "$a = GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5",
      "FIND ALL PATH FROM hash(\"Tim Duncan\") TO hash(\"Nobody\"), hash(\"Spur\") OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"LaMarcus Aldridge\") OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like BIDIRECT UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Yao Ming\") OVER * BIDIRECT\nWHERE (like.likeness \u003e= 80 and like.likeness \u003c= 90) OR (teammate.start_year is not EMPTY and teammate.start_year \u003e 2001) UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM hash(\"Tony Parker\") TO hash(\"Yao Ming\") OVER * BIDIRECT\nWHERE  teammate.start_year \u003e 2000 OR (like.likeness is not EMPTY AND like.likeness \u003e= 80) UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM hash(\"Yao Ming\") TO hash(\"Danny Green\") OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness \u003e= 80 UPTO 3 STEPS YIELD path as p",
      "INSERT EDGE like(likeness) VALUES hash(\"Tim Duncan\")-\u003ehash(\"Tim Parker\"):(99);\nINSERT EDGE like(likeness) VALUES hash(\"Tim Parker\")-\u003ehash(\"Tony Parker\"):(90);",
      "FIND ALL PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like UPTO 2 steps YIELD path as p",
      "FIND ALL PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like BIDIRECT UPTO 2 steps YIELD path as p",
      "FIND ALL PATH WITH PROP FROM hash(\"Yao Ming\") TO hash(\"Danny Green\") OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness \u003e= 80 UPTO 3 STEPS YIELD path as p |\nYIELD startnode($-.p) as startnode",
      "FIND ALL PATH WITH PROP FROM hash(\"Yao Ming\") TO hash(\"Danny Green\") OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness \u003e= 80 UPTO 3 STEPS YIELD path as p |\nYIELD endnode($-.p) as endnode",
      "FIND ALL PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like UPTO 3 STEPS YIELD path as p |\nYIELD length($-.p) as length",
      "FIND ALL PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships",
      "FIND ALL PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like UPTO 3 STEPS YIELD path as p |\nYIELD nodes($-.p) as nodes"
    ]
  },
  {
    "path": "findPath",
    "file_name": "AllPath",
    "statements": [
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tim Duncan\" OVER * UPTO 0 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Spurs\", \"Tony Parker\" OVER * UPTO 0 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\", \"Tony Parker\" TO \"Tim Duncan\" OVER * UPTO 0 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tim Duncan\" OVER * UPTO 2 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tony Parker\",\"Spurs\" TO \"Tim Duncan\" OVER like,serve UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"noexist\", \"Tony Parker\",\"Spurs\" TO \"Tim Duncan\" OVER like,serve UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Yao Ming\",\"Manu Ginobili\" TO \"Tim Duncan\", \"Larkers\" OVER * UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Yao Ming\",\"Manu Ginobili\" TO \"Tim Duncan\", \"Larkers\", \"noexist\" OVER * UPTO 3 STEPS YIELD path as p",
      "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND ALL PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p",
      "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 3",
      "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND ALL PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"Spurs\" OVER like,serve UPTO 10 STEPS YIELD path as p\n| LIMIT 3 | YIELD count(*) AS cnt",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"LaMarcus Aldridge\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE 1 \u003e 2 UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE 1 \u003c 2 UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE (like.likeness \u003e= 80 and like.likeness \u003c= 90) OR (teammate.start_year is not EMPTY and teammate.start_year \u003e 2001) UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM \"Tony Parker\" TO \"Yao Ming\" OVER * BIDIRECT\nWHERE  teammate.start_year \u003e 2000 OR (like.likeness is not EMPTY AND like.likeness \u003e= 80) UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness \u003e= 80 UPTO 3 STEPS YIELD path as p",
      "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness \u003e= 80 AND 1 \u003e 2 UPTO 3 STEPS YIELD path as p",
      "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"-\u003e\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"-\u003e\"Tony Parker\":(90);",
      "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 2 steps YIELD path as p",
      "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 2 steps YIELD path as p",
      "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness \u003e= 80 UPTO 3 STEPS YIELD path as p |\nYIELD startnode($-.p) as startnode",
      "FIND ALL PATH WITH PROP FROM \"Yao Ming\" TO \"Danny Green\" OVER * BIDIRECT\nWHERE like.likeness is  EMPTY OR like.likeness \u003e= 80 UPTO 3 STEPS YIELD path as p |\nYIELD endnode($-.p) as endnode",
      "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD length($-.p) as length",
      "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships",
      "FIND ALL PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD nodes($-.p) as nodes"
    ]
  },
  {
    "path": "findPath",
    "file_name": "NoLoop.IntVid",
    "statements": [
      "FIND NOLOOP PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"Manu Ginobili\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"LaMarcus Aldridge\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"Spurs\") OVER like,serve UPTO 3 STEPS YIELD path as p",
      "GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst\n| FIND NOLOOP PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p",
      "$a = GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"Spurs\") OVER like,serve UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 3",
      "$a = GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5",
      "FIND NOLOOP PATH FROM hash(\"Tim Duncan\") TO hash(\"Nobody\"), hash(\"Spur\") OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"LaMarcus Aldridge\") OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like BIDIRECT UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"LaMarcus Aldridge\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like BIDIRECT WHERE like.likeness \u003e 95 UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"Spurs\") OVER like, serve WHERE serve.start_year \u003e 1990 OR like.likeness is EMPTY UPTO 3 STEPS YIELD path as p",
      "$a = GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH WITH PROP FROM $a.src TO $a.dst OVER like WHERE like.likeness \u003e 90 UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5",
      "FIND NOLOOP PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"LaMarcus Aldridge\") OVER like UPTO 3 STEPS YIELD path as p |\nYIELD startnode($-.p) as startnode",
      "$a = GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nYIELD nodes($-.p) as nodes",
      "FIND NOLOOP PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like REVERSELY UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    ]
  },
  {
    "path": "findPath",
    "file_name": "NoLoop",
    "statements": [
      "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"Manu Ginobili\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p",
      "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst\n| FIND NOLOOP PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p",
      "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 3",
      "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5",
      "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"LaMarcus Aldridge\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\",\"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like BIDIRECT WHERE like.likeness \u003e 95 UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\", \"Spurs\" OVER like, serve WHERE serve.start_year \u003e 1990 OR like.likeness is EMPTY UPTO 3 STEPS YIELD path as p",
      "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH WITH PROP FROM $a.src TO $a.dst OVER like WHERE like.likeness \u003e 90 UPTO 3 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 5",
      "FIND NOLOOP PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND NOLOOP PATH WITH PROP FROM \"Tim Duncan\" TO \"Tony Parker\",\"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p |\nYIELD startnode($-.p) as startnode",
      "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND NOLOOP PATH FROM $a.src TO $a.dst OVER like UPTO 3 STEPS YIELD path as p |\nYIELD nodes($-.p) as nodes",
      "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    ]
  },
  {
    "path": "findPath",
    "file_name": "ShortestPath.IntVid",
    "statements": [
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"LaMarcus Aldridge\") OVER like YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tiago Splitter\") TO hash(\"LaMarcus Aldridge\") OVER like YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tiago Splitter\") TO hash(\"LaMarcus Aldridge\") OVER like, teammate YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tiago Splitter\") TO hash(\"LaMarcus Aldridge\") OVER * YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tiago Splitter\") TO hash(\"Tony Parker\") OVER * UPTO 1 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tiago Splitter\") TO hash(\"Tim Duncan\") OVER * UPTO 1 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"Spurs\") OVER like,serve UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"Spurs\") OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Yao Ming\") TO hash(\"Tim Duncan\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * UPTO 2 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Marco Belinelli\"), hash(\"Yao Ming\") TO hash(\"Spurs\"), hash(\"Lakers\") OVER * UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"LaMarcus Aldridge\") OVER like UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\"), hash(\"Tiago Splitter\") TO hash(\"Tony Parker\"), hash(\"Spurs\") OVER like,serve UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Yao Ming\")  TO hash(\"Tony Parker\"), hash(\"Tracy McGrady\") OVER like,serve UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Shaquille O\\'Neal\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Shaquille O\\'Neal\"), hash(\"Nobody\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Shaquille O\\'Neal\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER like UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Marco Belinelli\") TO hash(\"Spurs\"), hash(\"Lakers\") OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"Nobody\"), hash(\"Spur\") OVER like,serve UPTO 3 STEPS YIELD path as p",
      "YIELD hash(\"Yao Ming\") AS src, hash(\"Tony Parker\") AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p",
      "YIELD hash(\"Shaquille O\\'Neal\") AS src\n| FIND SHORTEST PATH FROM $-.src TO hash(\"Manu Ginobili\") OVER * UPTO 5 STEPS YIELD path as p",
      "YIELD hash(\"Manu Ginobili\") AS dst\n| FIND SHORTEST PATH FROM hash(\"Shaquille O\\'Neal\") TO $-.dst OVER * UPTO 5 STEPS YIELD path as p",
      "GO FROM hash(\"Yao Ming\") over like YIELD like._dst AS src\n| FIND SHORTEST PATH FROM $-.src TO hash(\"Tony Parker\") OVER like, serve UPTO 5 STEPS YIELD path as p",
      "$a = GO FROM hash(\"Yao Ming\") over like YIELD like._dst AS src;\nFIND SHORTEST PATH FROM $a.src TO hash(\"Tony Parker\") OVER like, serve UPTO 5 STEPS YIELD path as p",
      "GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p",
      "$a = GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst;\nFIND SHORTEST PATH FROM $a.src TO $a.dst OVER like UPTO 5 STEPS YIELD path as p",
      "$a = GO FROM hash(\"Tim Duncan\") over like YIELD like._src AS src;\nGO FROM hash(\"Tony Parker\") OVER like YIELD like._src AS src, like._dst AS dst\n| FIND SHORTEST PATH FROM $a.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"Nobody\"), hash(\"Spur\") OVER like,serve UPTO 3 STEPS YIELD path as p | ORDER BY $-.p | LIMIT 3",
      "FIND SHORTEST PATH FROM hash(\"Shaquille O\\'Neal\"), hash(\"Nobody\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 2",
      "GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 1",
      "GO FROM hash(\"Tim Duncan\") over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"Nobody\"), hash(\"Spur\") OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\") OVER like REVERSELY YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"LaMarcus Aldridge\") OVER like REVERSELY YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"Tony Parker\"), hash(\"Spurs\") OVER like,serve REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * REVERSELY YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\") TO hash(\"Nobody\"),hash(\"Spur\") OVER like BIDIRECT UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * BIDIRECT UPTO 2 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * BIDIRECT UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Joel Embiid\")  TO hash(\"Giannis Antetokounmpo\") OVER * BIDIRECT UPTO 18 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Tim Duncan\"),  hash(\"Joel Embiid\") TO hash(\"Giannis Antetokounmpo\"), hash(\"Yao Ming\") OVER * BIDIRECT UPTO 18 STEPS YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM hash(\"Tim Duncan\") TO hash(\"LaMarcus Aldridge\") OVER like YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * REVERSELY YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * BIDIRECT UPTO 2 STEPS YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * BIDIRECT WHERE like.likeness == 90 OR like.likeness is empty UPTO 2 STEPS YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * REVERSELY WHERE like.likeness \u003e 70 YIELD path as p",
      "$a = GO FROM hash(\"Yao Ming\") over like YIELD like._dst AS src;\nFIND SHORTEST PATH WITH PROP FROM $a.src TO hash(\"Tony Parker\") OVER like, serve WHERE serve.start_year is EMPTY UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness \u003e 90 UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Shaquille O\\'Neal\"), hash(\"Nobody\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM hash(\"Shaquille O\\'Neal\"), hash(\"Nobody\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * UPTO 5 STEPS YIELD path as p |\nYIELD length($-.p) as length",
      "FIND SHORTEST PATH WITH PROP FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness \u003e 90 UPTO 3 STEPS YIELD path as p |\nYIELD nodes($-.p) as nodes",
      "FIND SHORTEST PATH WITH PROP FROM hash(\"Tony Parker\"), hash(\"Yao Ming\") TO hash(\"Manu Ginobili\"), hash(\"Spurs\"), hash(\"Lakers\") OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness \u003e 90 UPTO 3 STEPS YIELD path as p |\nYIELD distinct nodes($-.p) as nodes",
      "FIND SHORTEST PATH FROM hash(\"Tiago Splitter\") TO hash(\"Tim Duncan\") OVER * UPTO 1 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    ]
  },
  {
    "path": "findPath",
    "file_name": "ShortestPath",
    "statements": [
      "FIND SHORTEST PATH FROM \"Tim Duncan\" , \"Yao Ming\" TO \"Tony Parker\" OVER like UPTO 0 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\", \"Yao Ming\" TO \"Tony Parker\", \"Spurs\" OVER * UPTO 0 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\", \"noexist\" OVER like YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\", \"noexist\" TO \"Tony Parker\" OVER like YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\", \"noexist\" TO \"Tony Parker\", \"noexist\" OVER like YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"LaMarcus Aldridge\" OVER like YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER like YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER like, teammate YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"LaMarcus Aldridge\" OVER * YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tony Parker\" OVER * UPTO 1 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tim Duncan\" OVER * UPTO 1 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"Spurs\" OVER like,serve UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"Spurs\" OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Yao Ming\" TO \"Tim Duncan\", \"Spurs\", \"Lakers\" OVER * UPTO 2 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Marco Belinelli\", \"Yao Ming\" TO \"Spurs\", \"Lakers\" OVER * UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"LaMarcus Aldridge\" OVER like UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\", \"Tiago Splitter\" TO \"Tony Parker\",\"Spurs\" OVER like,serve UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Yao Ming\"  TO \"Tony Parker\",\"Tracy McGrady\" OVER like,serve UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\", \"Nobody\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER like UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Marco Belinelli\" TO \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like,serve UPTO 3 STEPS YIELD path as p",
      "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p",
      "YIELD \"Shaquille O\\'Neal\" AS src\n| FIND SHORTEST PATH FROM $-.src TO \"Manu Ginobili\" OVER * UPTO 5 STEPS YIELD path as p",
      "YIELD \"Manu Ginobili\" AS dst\n| FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\" TO $-.dst OVER * UPTO 5 STEPS YIELD path as p",
      "GO FROM \"Yao Ming\" over like YIELD like._dst AS src\n| FIND SHORTEST PATH FROM $-.src TO \"Tony Parker\" OVER like, serve UPTO 5 STEPS YIELD path as p",
      "$a = GO FROM \"Yao Ming\" over like YIELD like._dst AS src;\nFIND SHORTEST PATH FROM $a.src TO \"Tony Parker\" OVER like, serve UPTO 5 STEPS YIELD path as p",
      "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p",
      "$a = GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst;\nFIND SHORTEST PATH FROM $a.src TO $a.dst OVER like UPTO 5 STEPS YIELD path as p",
      "$a = GO FROM \"Tim Duncan\" over like YIELD like._src AS src;\nGO FROM \"Tony Parker\" OVER like YIELD like._src AS src, like._dst AS dst\n| FIND SHORTEST PATH FROM $a.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like,serve UPTO 3 STEPS YIELD path as p | ORDER BY $-.p | LIMIT 3",
      "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\", \"Nobody\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 2",
      "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 1",
      "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"LaMarcus Aldridge\" OVER like REVERSELY YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Tony Parker\",\"Spurs\" OVER like,serve REVERSELY UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * REVERSELY YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like BIDIRECT UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT UPTO 2 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Joel Embiid\"  TO \"Giannis Antetokounmpo\" OVER * BIDIRECT UPTO 18 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Tim Duncan\",  \"Joel Embiid\" TO \"Giannis Antetokounmpo\", \"Yao Ming\" OVER * BIDIRECT UPTO 18 STEPS YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM \"Tim Duncan\" TO \"LaMarcus Aldridge\" OVER like YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * REVERSELY  YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT UPTO 2 STEPS YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE like.likeness == 90 OR like.likeness is empty UPTO 2 STEPS YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * REVERSELY WHERE like.likeness \u003e 70 YIELD path as p",
      "$a = GO FROM \"Yao Ming\" over like YIELD like._dst AS src;\nFIND SHORTEST PATH WITH PROP FROM $a.src TO \"Tony Parker\" OVER like, serve WHERE serve.start_year is EMPTY UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness \u003e 90 UPTO 3 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\", \"Nobody\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p",
      "FIND SHORTEST PATH FROM \"Shaquille O\\'Neal\", \"Nobody\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * UPTO 5 STEPS YIELD path as p |\nYIELD length($-.p) as length",
      "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness \u003e 90 UPTO 3 STEPS YIELD path as p |\nYIELD nodes($-.p) as nodes",
      "FIND SHORTEST PATH WITH PROP FROM \"Tony Parker\", \"Yao Ming\" TO \"Manu Ginobili\", \"Spurs\", \"Lakers\" OVER * BIDIRECT WHERE teammate.start_year is not EMPTY OR like.likeness \u003e 90 UPTO 3 STEPS YIELD path as p |\nYIELD distinct nodes($-.p) as nodes",
      "FIND SHORTEST PATH FROM \"Tiago Splitter\" TO \"Tim Duncan\" OVER * UPTO 1 STEPS YIELD path as p |\nYIELD relationships($-.p) as relationships"
    ]
  },
  {
    "path": "schema",
    "file_name": "Comment",
    "statements": [
      "CREATE SPACE \u003cspace_name\u003e (vid_type=FIXED_STRING(8)) comment = '\u003cspace_comment\u003e';",
      "DESC SPACE \u003cspace_name\u003e;",
      "DROP SPACE \u003cspace_name\u003e;",
      "CREATE SPACE test_comment_not_set (vid_type=FIXED_STRING(8));",
      "DESC SPACE test_comment_not_set;",
      "DROP SPACE test_comment_not_set;",
      "CREATE SPACE test_comment_empty (vid_type=FIXED_STRING(8)) comment = '';",
      "DESC SPACE test_comment_empty;",
      "DROP SPACE test_comment_empty;",
      "DESC tag test_comment_tag;",
      "ALTER TAG test_comment_tag comment = \u003ctag_of_person_comment_modified\u003e;\nALTER TAG test_comment_tag ADD (gender string COMMENT 'The gender.');\nALTER TAG test_comment_tag CHANGE (name string NOT NULL DEFAULT \"jack\");\nALTER TAG test_comment_tag DROP (age);",
      "SHOW CREATE tag test_comment_tag;",
      "DESC tag test_comment_tag;",
      "CREATE tag index test_comment_tag_index ON test_comment_tag(name(8))\ncomment 'The tag index of person name.';",
      "SHOW CREATE TAG INDEX test_comment_tag_index;",
      "CREATE edge test_comment_edge(\n    name string COMMENT 'The name.' NULL,\n    age int DEFAULT 233 NULL)\ncomment = \u003cedge_of_person_comment\u003e;",
      "DESC edge test_comment_edge;",
      "ALTER EDGE test_comment_edge comment = \u003cedge_of_person_comment_modified\u003e;\nALTER EDGE test_comment_edge ADD (gender string COMMENT 'The gender.');\nALTER EDGE test_comment_edge CHANGE (name string NOT NULL DEFAULT \"jack\");\nALTER EDGE test_comment_edge DROP (age);",
      "SHOW CREATE edge test_comment_edge;",
      "DESC edge test_comment_edge;",
      "CREATE edge index test_comment_edge_index ON test_comment_edge(name(8))\ncomment 'The edge index of person name.';",
      "SHOW CREATE EDGE INDEX test_comment_edge_index;"
    ]
  },
  {
    "path": "schema",
    "file_name": "CreateSpaceAs",
    "statements": [
      "create tag t1 (col1 int);",
      "create tag index i1 on t1(col1);",
      "create edge e1 (col1 int);",
      "create edge index i2 on e1(col1);",
      "insert vertex t1(col1) values \"1\": (1)",
      "insert edge e1(col1) VALUES \"1\" -\u003e \"2\":(1);",
      "fetch prop on t1 \"1\" YIELD vertex as node;",
      "lookup on t1 where t1.col1 == 1 YIELD id(vertex) as id;",
      "fetch prop on e1 \"1\" -\u003e \"2\" YIELD edge as e;",
      "lookup on e1 where e1.col1 == 1 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank;",
      "show tags;",
      "show edges;",
      "show create edge e1;",
      "show tag indexes;",
      "show edge indexes;",
      "fetch prop on t1 \"1\" YIELD vertex as node;",
      "fetch prop on e1 \"1\" -\u003e \"2\" YIELD edge as e;",
      "insert vertex t1(col1) values \"1\": (2)",
      "fetch prop on t1 \"1\" YIELD vertex as node;",
      "lookup on t1 where t1.col1 == 2 YIELD id(vertex) as id;",
      "fetch prop on e1 \"1\" -\u003e \"2\" YIELD edge as e;",
      "lookup on e1 where e1.col1 == 2 YIELD src(edge) as src, dst(edge) as dst, rank(edge) as rank;",
      "CREATE SPACE IF NOT EXISTS space_origin(vid_type=int);",
      "CREATE SPACE space_clone AS space_origin;",
      "CREATE SPACE IF NOT EXISTS space_clone AS space_origin;"
    ]
  },
  {
    "path": "schema",
    "file_name": "Schema",
    "statements": [
      "CREATE TAG tag1()",
      "CREATE TAG IF NOT EXISTS tag1()",
      "DESCRIBE TAG tag1",
      "ALTER TAG tag1 ADD (id int, name string)",
      "DESCRIBE TAG tag1",
      "CREATE TAG person(name string, email string DEFAULT \"NULL\", age int, gender string, row_timestamp timestamp DEFAULT 2020)",
      "CREATE TAG person_with_default(name string, age int DEFAULT 18)",
      "DESCRIBE TAG person",
      "DESC TAG person",
      "CREATE TAG upper(name string, ACCOUNT string, age int, gender string, row_timestamp timestamp DEFAULT 100)",
      "DESCRIBE TAG upper",
      "ALTER TAG person ADD (col1 int, col2 string), CHANGE (age int), DROP (gender)",
      "DESCRIBE TAG person",
      "SHOW TAGS",
      "CREATE TAG default_tag_neg(id int DEFAULT -10, height double DEFAULT -176.0)",
      "CREATE TAG default_tag_expr(\n  id int64 DEFAULT 3/2*4-5,\n  male bool DEFAULT 3 \u003e 2,\n  height double DEFAULT abs(-176.0),\n  adult bool DEFAULT true AND false\n);",
      "DROP TAG person",
      "DROP TAG IF EXISTS not_exist_tag",
      "CREATE TAG exist_tag(id int);\nDROP TAG IF EXISTS exist_tag;",
      "CREATE EDGE edge1()",
      "CREATE EDGE IF NOT EXISTS edge1()",
      "DESCRIBE EDGE edge1",
      "ALTER EDGE edge1 ADD (id int, name string)",
      "DESCRIBE EDGE edge1",
      "CREATE EDGE buy(id int, time_ string)",
      "CREATE EDGE buy_with_default(id int, name string DEFAULT \"NULL\", time_ timestamp DEFAULT 2020)",
      "DESCRIBE EDGE buy",
      "DESC EDGE buy",
      "CREATE EDGE education(id int, time_ timestamp, school string)",
      "DESC EDGE education",
      "SHOW EDGES",
      "ALTER EDGE education ADD (col1 int, col2 string), CHANGE (school string), DROP (id, time_)",
      "DESC EDGE education",
      "CREATE EDGE default_edge_neg(id int DEFAULT -10, height double DEFAULT -176.0)",
      "CREATE EDGE default_edge_expr(\n  id int DEFAULT 3/2*4-5,\n  male bool DEFAULT 3 \u003e 2,\n  height double DEFAULT abs(-176.0),\n  adult bool DEFAULT true AND false\n);",
      "DROP EDGE buy",
      "DROP EDGE IF EXISTS not_exist_edge",
      "CREATE EDGE exist_edge(id int);\nDROP EDGE IF EXISTS exist_edge;",
      "CREATE SPACE my_space(partition_num=1, replica_factor=1, vid_type=FIXED_STRING(8));\nUSE my_space;\nCREATE TAG animal(name string, kind string);",
      "DESCRIBE TAG animal",
      "CREATE TAG person(name string, interest string)",
      "SHOW TAGS",
      "CREATE SPACE test_multi(vid_type=FIXED_STRING(8));\nUSE test_multi;\nCREATE Tag test_tag();\nSHOW TAGS;",
      "DROP SPACE test_multi",
      "USE my_space;\nCREATE TAG `tag` (`edge` string);",
      "DROP SPACE my_space",
      "CREATE SPACE tag_space(partition_num=1, vid_type=FIXED_STRING(8));\nUSE tag_space;\nCREATE TAG t(name string DEFAULT \"N/A\", age int DEFAULT -1);",
      "ALTER TAG t ADD (description string DEFAULT \"none\")",
      "FETCH PROP ON t \"1\" YIELD t.name, t.age, t.description",
      "INSERT VERTEX t(description) VALUES \"1\":(\"some one\")",
      "FETCH PROP ON t \"1\" YIELD t.name, t.age, t.description",
      "CREATE EDGE e(name string DEFAULT \"N/A\", age int DEFAULT -1)",
      "ALTER EDGE e ADD (description string DEFAULT \"none\")",
      "INSERT VERTEX t(description) VALUES \"1\":(\"some one\")",
      "FETCH PROP ON t \"1\" YIELD t.name, t.age, t.description",
      "DROP SPACE tag_space;\nCREATE SPACE issue2009(vid_type = FIXED_STRING(20));\nUSE issue2009;",
      "CREATE EDGE IF NOT EXISTS relation (\n  intimacy int DEFAULT 0,\n  isReversible bool DEFAULT false,\n  name string DEFAULT \"N/A\",\n  startTime timestamp DEFAULT 0\n)",
      "CREATE TAG tag_null_default1(name string NULL DEFAULT \"N/A\");",
      "DESC TAG tag_null_default1;",
      "CREATE TAG tag_null_default2(name string DEFAULT \"N/A\" NULL)",
      "DESC TAG tag_null_default2;",
      "CREATE TAG tag_not_null_default1(name string NOT NULL DEFAULT \"N/A\")",
      "DESC TAG tag_not_null_default1;",
      "CREATE TAG tag_not_null_default2(name string DEFAULT \"N/A\" NOT NULL)",
      "DESC TAG tag_not_null_default2;",
      "ALTER TAG tag_not_null_default1 ADD (col1 FIXED_STRING(5) DEFAULT \"Hello world!\")",
      "DESC TAG tag_not_null_default1;",
      "ALTER EDGE edge_not_null_default1 ADD (col1 FIXED_STRING(5) DEFAULT \"Hello world!\")",
      "DESC EDGE edge_not_null_default1;",
      "CREATE TAG 队伍withoutQuote( 名字 string);",
      "CREATE TAG `队伍`(`名字` string);",
      "ALTER TAG `队伍` ADD (`类别` string);",
      "DESCRIBE TAG `队伍`",
      "CREATE EDGE `服役`();",
      "ALTER EDGE `服役` ADD (`时间` timestamp);",
      "DESCRIBE EDGE `服役`",
      "CREATE TAG `队伍 s2；`(`名s字ss1` string);",
      "DESCRIBE TAG `队伍 s2；`",
      "DROP SPACE issue2009;",
      "CREATE TAG person(age int);",
      "CREATE TAG INDEX person_age_index ON person(age);",
      "INSERT VERTEX person values \"1\":(23);",
      "LOOKUP ON person YIELD properties(VERTEX) AS props;",
      "CREATE EDGE person(age int);",
      "CREATE EDGE INDEX person_age_index ON person(age);",
      "INSERT EDGE person values \"1\"-\u003e\"2\":(23);",
      "LOOKUP ON person YIELD properties(EDGE) AS props;",
      "CREATE EDGE edge1(name fixed_string(32))",
      "CREATE TAG person(name string, age int);",
      "INSERT VERTEX person values \"1\":(\"Tom\", 23);",
      "FETCH PROP ON person \"1\" yield properties(vertex) AS props;",
      "ALTER TAG person DROP (age);",
      "FETCH PROP ON person \"1\" yield properties(vertex) AS props;"
    ]
  },
  {
    "path": "set",
    "file_name": "Set.IntVid",
    "statements": [
      "GO FROM hash(\"Tim Duncan\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "GO FROM hash(\"Tim Duncan\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM hash(\"Manu Ginobili\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "(GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst AS id |\n    GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION ALL\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "GO FROM hash(\"Tim Duncan\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\n(GO FROM hash(\"Tony Parker\") OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)",
      "GO FROM hash(\"Tim Duncan\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM hash(\"Tony Parker\") OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "(GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst AS id\n UNION ALL\n GO FROM hash(\"Tony Parker\") OVER like YIELD like._dst AS id)\n| GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "GO FROM hash(\"Tim Duncan\") OVER serve YIELD $^.player.name as name, $$.team.name as player\nUNION ALL\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name as name, serve.start_year as player",
      "GO FROM hash(\"Nobody\") OVER serve YIELD $^.player.name AS player, serve.start_year AS start\nUNION ALL\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name AS player, serve.start_year AS start",
      "(GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst as id |\n    GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION\nGO FROM hash(\"Manu Ginobili\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "(GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION DISTINCT\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "(GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nMINUS\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "(GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nINTERSECT\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "(GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nMINUS\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION\nGO FROM hash(\"Tim Duncan\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nINTERSECT\nGO FROM hash(\"Manu Ginobili\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "$var = GO FROM hash(\"Tim Duncan\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*",
      "$var = (GO FROM hash(\"Tim Duncan\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name);\nYIELD $var.*",
      "$var = (GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst as id |\nGO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nMINUS\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*",
      "$var = (GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst as id |\n     GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nINTERSECT\nGO FROM hash(\"Tony Parker\") OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve.start_year, $$.team.name\nUNION\nGO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve.start_year, $$.team.name\nMINUS\nGO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve.start_year, $$.team.name\nINTERSECT\nGO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve.start_year, $$.team.name",
      "$var = GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve.start_year, $$.team.name\nUNION\nGO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve.start_year, $$.team.name\nMINUS\nGO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve.start_year, $$.team.name\nINTERSECT\nGO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD serve.start_year, $$.team.name;\nYIELD $var.*"
    ]
  },
  {
    "path": "set",
    "file_name": "Set",
    "statements": [
      "UNWIND [1,2] AS a RETURN a\nUNION ALL\nUNWIND [2] AS a RETURN a",
      "UNWIND [1,2] AS a RETURN a\nUNION\nUNWIND [2] AS a RETURN a",
      "UNWIND [1,2] AS a RETURN a\nINTERSECT\nWITH 2 AS a\nRETURN a",
      "UNWIND [1,2,3] AS a RETURN a, 100\nINTERSECT\nWITH 2 AS a\nRETURN a, 100",
      "GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Manu Ginobili\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS id |\n    GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\n(GO FROM \"Tony Parker\" OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)",
      "GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER like YIELD like._dst AS id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS id\n UNION ALL\n GO FROM \"Tony Parker\" OVER like YIELD like._dst AS id)\n| GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name as name, $$.team.name as player\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name as name, serve.start_year as player",
      "GO FROM \"Nobody\" OVER serve YIELD $^.player.name AS player, serve.start_year AS start\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name AS player, serve.start_year AS start",
      "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n    GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION\nGO FROM \"Manu Ginobili\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nUNION DISTINCT\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nMINUS\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "MATCH (v:player) RETURN v ORDER BY v LIMIT 3\nMINUS\nMATCH (v:player) RETURN v ORDER BY v LIMIT 3",
      "MATCH (v:player)\nWITH v.player.name AS v\nRETURN v ORDER BY v LIMIT 3\nMINUS\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS v\nRETURN v",
      "UNWIND [1,2,3] AS a RETURN a\nMINUS\nUNWIND [2,3,4] AS a RETURN a",
      "UNWIND [1,2,3] AS a RETURN a\nMINUS\nWITH 4 AS a\nRETURN a",
      "UNWIND [1,2,3] AS a RETURN a\nMINUS\nWITH 2 AS a\nRETURN a",
      "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nINTERSECT\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "MATCH (v:player)\nWITH v.player.name AS v\nRETURN v ORDER BY v LIMIT 3\nINTERSECT\nMATCH (v:player)\nWITH v.player.name AS v\nRETURN v ORDER BY v LIMIT 3",
      "MATCH (v:player)\nRETURN v ORDER BY v LIMIT 3\nINTERSECT\nMATCH (v:player)\nRETURN v ORDER BY v LIMIT 3",
      "MATCH (v:player)\nWITH v.player.name AS v\nRETURN v ORDER BY v LIMIT 3\nINTERSECT\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS v\nRETURN v",
      "UNWIND [1,2,3] AS a RETURN a\nINTERSECT\nUNWIND [2,3,4] AS a RETURN a",
      "(GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n   GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nMINUS\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION\nGO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nINTERSECT\nGO FROM \"Manu Ginobili\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name",
      "$var = GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION ALL\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*",
      "$var = (GO FROM \"Tim Duncan\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name\nUNION\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name);\nYIELD $var.*",
      "$var = (GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\nGO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nMINUS\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*",
      "$var = (GO FROM \"Tim Duncan\" OVER like YIELD like._dst as id |\n     GO FROM $-.id OVER serve YIELD $^.player.name, serve.start_year, $$.team.name)\nINTERSECT\nGO FROM \"Tony Parker\" OVER serve YIELD $^.player.name, serve.start_year, $$.team.name;\nYIELD $var.*",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve.start_year, $$.team.name\nUNION\nGO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve.start_year, $$.team.name\nMINUS\nGO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve.start_year, $$.team.name\nINTERSECT\nGO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve.start_year, $$.team.name",
      "$var = GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve.start_year, $$.team.name\nUNION\nGO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve.start_year, $$.team.name\nMINUS\nGO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve.start_year, $$.team.name\nINTERSECT\nGO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD serve.start_year, $$.team.name;\nYIELD $var.*"
    ]
  },
  {
    "path": "subgraph",
    "file_name": "subgraph.IntVid",
    "statements": [
      "GET SUBGRAPH WITH PROP 0 STEPS FROM hash(\"Tim Duncan\") YIELD vertices as nodes",
      "GET SUBGRAPH WITH PROP 0 STEPS FROM hash(\"Tim Duncan\"), hash(\"Spurs\") YIELD vertices as nodes",
      "GET SUBGRAPH WITH PROP 0 STEPS FROM hash(\"Tim Duncan\"), hash(\"Tony Parker\"), hash(\"Spurs\") YIELD VERTICES as nodes",
      "GO FROM hash('Tim Duncan') over serve YIELD serve._dst AS id | GET SUBGRAPH WITH PROP 0 STEPS FROM $-.id YIELD Vertices as nodes",
      "GO FROM hash('Tim Duncan') over like YIELD like._dst AS id | GET SUBGRAPH WITH PROP 0 STEPS FROM $-.id YIELD vertices as nodes",
      "$a = GO FROM hash('Tim Duncan') over serve YIELD serve._dst AS id; GET SUBGRAPH WITH PROP 0 STEPS FROM $a.id YIELD VERTICES as nodes",
      "$a = GO FROM hash('Tim Duncan') over like YIELD like._dst AS id; GET SUBGRAPH WITH PROP 0 STEPS FROM $a.id YIELD vertices as nodes",
      "GET SUBGRAPH FROM hash('Tim Duncan') OUT like YIELD vertices as v",
      "GET SUBGRAPH WITH PROP 4 STEPS FROM hash('Yao Ming') IN teammate OUT serve YIELD vertices as a, edges as b",
      "GET SUBGRAPH WITH PROP 4 STEPS FROM hash('NOBODY') IN teammate OUT serve YIELD VERTICES as a, EDGES as b",
      "GET SUBGRAPH WITH PROP 10000000000000 STEPS FROM hash('Yao Ming') IN teammate OUT serve YIELD VERTICES as nodes, EDGES as relationships",
      "GET SUBGRAPH 10000000000000 STEPS FROM hash('Yao Ming') IN teammate OUT serve YIELD vertices as nodes, edges as relationships",
      "GET SUBGRAPH 4 STEPS FROM hash('Yao Ming') IN teammate OUT serve YIELD VERTICES as nodes, EDGES as relationships",
      "GET SUBGRAPH 4 STEPS FROM hash('NOBODY') IN teammate OUT serve YIELD VERTICES as nodes, EDGES as relationships"
    ]
  },
  {
    "path": "subgraph",
    "file_name": "subgraph",
    "statements": [
      "GET SUBGRAPH WITH PROP 0 STEPS FROM \"Tim Duncan\" YIELD vertices as nodes",
      "GET SUBGRAPH WITH PROP 0 STEPS FROM \"Tim Duncan\", \"Spurs\" YIELD vertices as nodes",
      "GET SUBGRAPH WITH PROP 0 STEPS FROM \"Tim Duncan\", \"Tony Parker\", \"Spurs\" YIELD vertices as nodes",
      "GO FROM 'Tim Duncan' over serve YIELD serve._dst AS id | GET SUBGRAPH WITH PROP 0 STEPS FROM $-.id YIELD vertices as nodes",
      "GO FROM 'Tim Duncan' over like YIELD like._dst AS id | GET SUBGRAPH WITH PROP 0 STEPS FROM $-.id YIELD vertices as nodes",
      "$a = GO FROM 'Tim Duncan' over serve YIELD serve._dst AS id; GET SUBGRAPH WITH PROP 0 STEPS FROM $a.id YIELD vertices as nodes",
      "$a = GO FROM 'Tim Duncan' over like YIELD like._dst AS id; GET SUBGRAPH WITH PROP 0 STEPS FROM $a.id YIELD vertices as nodes",
      "GET SUBGRAPH FROM 'Tim Duncan' OUT like  YIELD vertices as v",
      "GET SUBGRAPH WITH PROP 4 STEPS FROM 'Yao Ming' IN teammate OUT serve YIELD VERTICES as a, EDGES as b",
      "GET SUBGRAPH WITH PROP 4 STEPS FROM 'NOBODY' IN teammate OUT serve YIELD VERTICES as nodes, EDGES as relationships",
      "GET SUBGRAPH WITH PROP 10000000000000 STEPS FROM 'Yao Ming' IN teammate OUT serve YIELD VERTICES as nodes, EDGES as relationships",
      "GET SUBGRAPH 10000000000000 STEPS FROM 'Yao Ming' IN teammate OUT serve YIELD VERTICES as nodes, EDGES as relationships",
      "GET SUBGRAPH 4 STEPS FROM 'Yao Ming' IN teammate OUT serve YIELD VERTICES as nodes, EDGES as relationships",
      "GET SUBGRAPH 4 STEPS FROM 'NOBODY' IN teammate OUT serve YIELD VERTICES as nodes, EDGES as relationships",
      "GET SUBGRAPH FROM 'Tim Duncan' BOTH serve WHERE serve.start_year \u003c 1997 YIELD vertices as v, edges as e",
      "GET SUBGRAPH FROM 'Tim Duncan' BOTH serve WHERE serve.start_year \u003e= 1997 YIELD vertices as v, edges as e",
      "GET SUBGRAPH 1 STEPS FROM \"Tom\" YIELD vertices as nodes, edges as relationships"
    ]
  },
  {
    "path": "subgraph",
    "file_name": "subgraphWithFilter",
    "statements": [
      "GET SUBGRAPH FROM 'Tim Duncan' OUT like WHERE like.likeness \u003e 90 YIELD vertices as v",
      "GET SUBGRAPH FROM 'Tim Duncan' OUT like WHERE like.likeness \u003e 90 YIELD vertices as v, edges as e",
      "GET SUBGRAPH FROM 'Tim Duncan' BOTH like WHERE like.likeness \u003e 90 YIELD vertices as v, edges as e",
      "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan', 'James Harden'  OUT serve\n  WHERE serve.start_year \u003e 2012\n  YIELD vertices as nodes, edges as relationships",
      "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan', 'James Harden'  OUT serve\n  WHERE serve.start_year \u003e 1996\n  YIELD vertices as nodes, edges as relationships",
      "GET SUBGRAPH WITH PROP FROM 'Tim Duncan' OUT like WHERE $$.player.age \u003e 36 YIELD vertices as v, edges as e",
      "GO FROM 'Tim Duncan' over serve YIELD serve._src AS id\n| GET SUBGRAPH WITH PROP FROM $-.id\n  WHERE $$.player.age \u003e 36\n  YIELD VERTICES as a, EDGES as b",
      "GO FROM 'Tim Duncan' over serve YIELD serve._src AS id\n| GET SUBGRAPH WITH PROP FROM $-.id\n  WHERE $$.player.age \u003e 36 AND like.likeness \u003e 80\n  YIELD VERTICES as a, EDGES as b",
      "GET SUBGRAPH WITH PROP 5 steps from 'Tony Parker' BOTH like\n  WHERE $$.player.age \u003e 36 AND like.likeness \u003e 80\n  YIELD VERTICES as nodes, EDGES as relationships"
    ]
  },
  {
    "path": "ttl",
    "file_name": "TTL",
    "statements": [
      "DESCRIBE TAG person;",
      "SHOW CREATE TAG person;",
      "CREATE TAG man(name string, email string,  age int, gender string, row_timestamp timestamp) ttl_duration = 100, ttl_col = \"row_timestamp\";",
      "SHOW CREATE TAG man;",
      "CREATE TAG woman(name string, email string, age int, gender string, row_timestamp timestamp) ttl_duration = 0, ttl_col = \"row_timestamp\";",
      "SHOW CREATE TAG woman;",
      "CREATE TAG only_ttl_col(name string, email string, age int, gender string, row_timestamp timestamp) ttl_col = \"row_timestamp\";",
      "SHOW CREATE TAG only_ttl_col;",
      "ALTER TAG woman ttl_duration = 50, ttl_col = \"row_timestamp\";",
      "SHOW CREATE TAG woman;",
      "ALTER TAG woman Drop (name) ttl_duration = 200;",
      "SHOW CREATE TAG woman;",
      "DROP TAG woman;",
      "CREATE TAG woman(name string, email string, age int, gender string, row_timestamp timestamp) ttl_duration = 0, ttl_col = \"row_timestamp\";",
      "ALTER TAG woman Drop (row_timestamp);",
      "SHOW CREATE TAG woman;",
      "ALTER TAG woman ttl_duration = 100, ttl_col = \"age\";",
      "SHOW CREATE TAG woman;",
      "ALTER TAG woman ttl_col = \"\";",
      "SHOW CREATE TAG woman;",
      "ALTER TAG woman CHANGE (age int64);",
      "SHOW CREATE TAG woman;",
      "CREATE EDGE work(number string, start_time timestamp);",
      "DESCRIBE EDGE work;",
      "SHOW CREATE EDGE work;",
      "CREATE EDGE work1(name string, email string, age int, gender string, row_timestamp timestamp) ttl_duration = 100, ttl_col = \"row_timestamp\";",
      "SHOW CREATE EDGE work1;",
      "DROP EDGE work1;",
      "CREATE EDGE work1(name string, email string, age int, gender string, row_timestamp timestamp) ttl_duration = 100, ttl_col = \"row_timestamp\";",
      "CREATE EDGE work2(name string, email string,  age int, gender string, start_time timestamp) ttl_duration = 0, ttl_col = \"start_time\";",
      "SHOW CREATE EDGE work2;",
      "CREATE EDGE edge_only_ttl_col(name string, email string, age int, gender string, row_timestamp timestamp) ttl_col = \"row_timestamp\";",
      "SHOW CREATE EDGE edge_only_ttl_col;",
      "ALTER EDGE work2 ttl_duration = 50, ttl_col = \"start_time\";",
      "SHOW CREATE EDGE work2;",
      "ALTER EDGE work2  Drop (name) ttl_duration = 200;",
      "SHOW CREATE EDGE work2;",
      "ALTER EDGE work2 Drop (start_time);",
      "SHOW CREATE EDGE work2;",
      "ALTER Edge work2  ttl_duration = 100, ttl_col = \"age\";",
      "SHOW CREATE EDGE work2;",
      "ALTER EDGE work2 ttl_col = \"\";",
      "SHOW CREATE EDGE work2;",
      "ALTER EDGE work2 CHANGE (age int64);",
      "SHOW CREATE EDGE work2;",
      "CREATE EDGE player(id int, name string, age int, address string, score float);",
      "SHOW CREATE EDGE player;",
      "ALTER EDGE player change(address string), drop(name);",
      "SHOW CREATE EDGE player;",
      "FETCH PROP ON person \"1\" YIELD vertex as node;",
      "FETCH PROP ON person \"1\" YIELD person.id as id",
      "FETCH PROP ON * \"1\" YIELD person.id, career.id",
      "FETCH PROP ON person \"2\" YIELD person.id",
      "FETCH PROP ON person \"2\" YIELD person.id as id",
      "FETCH PROP ON career \"2\" YIELD career.id;",
      "FETCH PROP ON * \"2\" YIELD person.id, career.id",
      "FETCH PROP ON friend \"100\"-\u003e\"1\",\"100\"-\u003e\"2\" YIELD friend.id;",
      "FETCH PROP ON friend \"100\"-\u003e\"1\",\"100\"-\u003e\"2\" YIELD friend.id AS id;",
      "FETCH PROP ON like \"100\"-\u003e\"1\",\"100\"-\u003e\"2\" YIELD like.id;",
      "FETCH PROP ON like \"100\"-\u003e\"1\",\"100\"-\u003e\"2\" YIELD like.id AS id;",
      "FETCH PROP ON person \"1\" YIELD person.age as age;",
      "FETCH PROP ON person \"1\" YIELD person.age as age;",
      "INSERT VERTEX t1(name, age) VALUES \"1\":(\"tom\", 18)",
      "ALTER TAG t1 ADD(n int default 1669726461)",
      "ALTER TAG t1 TTL_DURATION = 30, TTL_COL = \"n\";",
      "INSERT VERTEX t1(name, age) VALUES \"2\":(\"jerry\", 18)",
      "match (v) return v limit 10"
    ]
  },
  {
    "path": "ttl",
    "file_name": "TTL2",
    "statements": [
      "CREATE TAG ttl_tag(a timestamp, b int) ttl_duration=5, ttl_col=\"a\";\nCREATE EDGE ttl_edge(name string, ttl timestamp) ttl_duration=5,ttl_col=\"ttl\";\nCREATE EDGE normal_edge();",
      "CREATE TAG INDEX index_ttl_tag_b on ttl_tag(b);\nCREATE EDGE INDEX index_ttl_edge_name on ttl_edge(name(30));",
      "INSERT VERTEX ttl_tag(a,b) VALUES \"1\":(now(),10),\"2\":(now(),20);\nINSERT EDGE ttl_edge(name,ttl) VALUES \"1\"-\u003e\"2\":(\"edge_01\",now());\nINSERT EDGE normal_edge() VALUES \"1\"-\u003e\"2\":();",
      "FETCH PROP ON ttl_tag \"1\" yield ttl_tag.a as a,ttl_tag.b as b;",
      "LOOKUP ON ttl_tag where ttl_tag.b==10 yield ttl_tag.a as a,ttl_tag.b as b;",
      "FETCH PROP ON ttl_edge \"1\"-\u003e\"2\" yield ttl_edge.name as name;",
      "MATCH ()-[e:ttl_edge]-\u003e() RETURN e limit 100;",
      "LOOKUP ON ttl_edge where ttl_edge.name==\"edge_01\" yield ttl_edge.name as name;",
      "FETCH PROP ON ttl_tag \"1\" yield ttl_tag.a as a,ttl_tag.b as b;",
      "LOOKUP ON ttl_tag where ttl_tag.b==10 yield ttl_tag.a as a,ttl_tag.b as b;",
      "MATCH (v) WHERE id(v) == \"1\" RETURN v;",
      "FETCH PROP ON ttl_edge \"1\"-\u003e\"2\" yield ttl_edge.name as name;",
      "MATCH ()-[e:ttl_edge]-\u003e() RETURN e limit 100;",
      "LOOKUP ON ttl_edge where ttl_edge.name==\"edge_01\" yield ttl_edge.name as name;",
      "CREATE TAG ttl_tag01(a int, b int) ttl_duration=5, ttl_col=\"a\";",
      "CREATE TAG ttl_tag02(a timestamp,b int) ttl_duration=5,ttl_col=\"a\";",
      "CREATE EDGE ttl_edge01(a timestamp, b int) ttl_duration=9223372036854775807, ttl_col=\"a\";",
      "CREATE EDGE ttl_edge03(a timestamp, b int) ttl_col=\"a\";",
      "ALTER EDGE ttl_edge03 ttl_duration=100;",
      "CREATE EDGE ttl_edge04(a timestamp,b int);",
      "CREATE TAG ttl_tag03(a timestamp,c string);",
      "ALTER TAG ttl_tag03 ttl_duration=10, ttl_col=\"a\";",
      "CREATE TAG INDEX index_ttl_tag03 on ttl_tag03();",
      "CREATE TAG INDEX index_ttl_tag03_a on ttl_tag03(a);",
      "CREATE TAG INDEX index_ttl_tag03_c on ttl_tag03(c(10));",
      "CREATE TAG ttl_tag04(a int,b int);",
      "CREATE TAG INDEX index_ttl_tag04_a on ttl_tag04(a);",
      "CREATE TAG ttl_expire_tag01(a timestamp, b int) ttl_duration=9223372036854775807, ttl_col=\"a\";",
      "INSERT VERTEX ttl_expire_tag01(a,b) VALUES \"t-e-t-01\":(now(),10);",
      "MATCH (v:ttl_expire_tag01) RETURN v LIMIT 10;",
      "CREATE TAG ttl_expire_tag02(a int, b int) ttl_duration=9223372036854775807, ttl_col=\"a\";",
      "INSERT VERTEX ttl_expire_tag02(a,b) VALUES \"t-e-t-02\":(timestamp(),10);",
      "MATCH (v:ttl_expire_tag02) RETURN v LIMIT 10;",
      "CREATE TAG ttl_expire_tag03(a timestamp, b int) ttl_duration=8, ttl_col=\"a\";",
      "INSERT VERTEX ttl_expire_tag03(a,b) VALUES \"t-e-t-03\":(now(),10);",
      "MATCH (v:ttl_expire_tag03) RETURN v LIMIT 10;",
      "INSERT VERTEX ttl_expire_tag03(a,b) VALUES \"t-e-t-03\":(now(),20);",
      "MATCH (v:ttl_expire_tag03) RETURN v LIMIT 10;",
      "UPSERT VERTEX ON ttl_expire_tag03 \"t-e-t-03\" set a=now(),b=30;",
      "MATCH (v:ttl_expire_tag03) RETURN v LIMIT 10;",
      "MATCH (v:ttl_expire_tag03) RETURN v LIMIT 10;",
      "INSERT VERTEX ttl_expire_tag03(a,b) VALUES \"t-e-t-04\":(now(),40);",
      "DELETE TAG ttl_expire_tag03 FROM \"t-e-t-04\";",
      "MATCH (v:ttl_expire_tag03) RETURN v LIMIT 10;",
      "CREATE TAG ttl_tag06(a timestamp, b timestamp) ttl_duration=3,ttl_col=\"a\";",
      "INSERT VERTEX ttl_tag06(a,b) VALUES \"10\":(now(),now());",
      "ALTER TAG ttl_tag06 ttl_duration=6, ttl_col=\"b\";",
      "MATCH (v:ttl_tag06) return v limit 10;",
      "MATCH (v:ttl_tag06) return v limit 10;",
      "ALTER TAG ttl_tag06 drop (b);",
      "MATCH (v:ttl_tag06) return v limit 10;",
      "CREATE TAG ttl_tag07(a timestamp, b int) ttl_duration=3,ttl_col=\"a\";",
      "INSERT VERTEX ttl_tag07(a,b) VALUES \"11\":(now(),10);",
      "INSERT VERTEX ttl_tag07(a,b) VALUES \"12\":(now(),10);",
      "ALTER TAG ttl_tag07 ttl_col=\"\";",
      "INSERT VERTEX ttl_tag07(a,b) VALUES \"13\":(now(),20);",
      "MATCH (v:ttl_tag07) return v limit 10;",
      "CREATE TAG ttl_m_tag1(a timestamp, b int) ttl_duration=10, ttl_col=\"a\";\nCREATE TAG ttl_m_tag2(a timestamp, b int) ttl_duration=5, ttl_col=\"a\";\nCREATE TAG ttl_m_tag3(a timestamp, b int) ttl_duration=5, ttl_col=\"a\";",
      "INSERT VERTEX ttl_m_tag1(a,b) VALUES \"m-t-1\":(now(),10);\nINSERT VERTEX ttl_m_tag2(a,b) VALUES \"m-t-1\":(now(),10);\nINSERT VERTEX ttl_m_tag3(a,b) VALUES \"m-t-1\":(now(),10);",
      "MATCH (v) where id(v)==\"m-t-1\" return v limit 10;",
      "MATCH (v) where id(v)==\"m-t-1\" return v limit 10;",
      "CREATE TAG ttl_m_tag2();\nCREATE EDGE ttl_m_edge1(a timestamp, b int) ttl_duration=5, ttl_col=\"a\";",
      "INSERT VERTEX ttl_m_tag2() VALUES \"m-e-1\":(),\"m-e-2\":();\nINSERT EDGE ttl_m_edge1(a,b) VALUES \"m-e-1\"-\u003e\"m-e-2\"@1:(now(),10);",
      "INSERT EDGE ttl_m_edge1(a,b) VALUES \"m-e-1\"-\u003e\"m-e-2\"@2:(now(),10);\nINSERT EDGE ttl_m_edge1(a,b) VALUES \"m-e-1\"-\u003e\"m-e-2\"@3:(now(),10);",
      "MATCH ()-[e:ttl_m_edge1]-\u003e() return e limit 10;",
      "MATCH ()-[e:ttl_m_edge1]-\u003e() return e limit 10;"
    ]
  },
  {
    "path": "update",
    "file_name": "Update.IntVid",
    "statements": [
      "UPDATE VERTEX 101\nSET course.credits = $^.course.credits + 1;",
      "UPDATE VERTEX 101\nSET course.credits = $^.course.credits + 1\nWHEN $^.course.name == \"English\" AND $^.course.credits \u003e 2",
      "UPDATE VERTEX 101\nSET course.credits = $^.course.credits + 1\nWHEN $^.course.name == \"Math\" AND $^.course.credits \u003e 2",
      "UPDATE VERTEX 101\nSET course.credits = $^.course.credits + 1\nYIELD $^.course.name AS Name, $^.course.credits AS Credits",
      "UPDATE VERTEX 101\nSET course.credits = $^.course.credits + 1\nWHEN $^.course.name == \"Math\" AND $^.course.credits \u003e 2\nYIELD $^.course.name AS Name, $^.course.credits AS Credits",
      "UPDATE VERTEX 101\nSET course.credits = $^.course.credits + 1\nWHEN $^.course.name == \"nonexistent\" AND $^.course.credits \u003e 2\nYIELD $^.course.name AS Name, $^.course.credits AS Credits",
      "FETCH PROP ON select 200-\u003e101@0 YIELD select.grade, select.year",
      "UPDATE EDGE 200 -\u003e 101@0 OF select\nSET grade = select.grade + 1, select.year = 2000;",
      "FETCH PROP ON select 200-\u003e101@0 YIELD select.grade, select.year",
      "GO FROM 101 OVER select REVERSELY YIELD select.grade, select.year",
      "UPDATE EDGE 200 -\u003e 101@0 OF select\nSET grade = select.grade + 1, year = 2000\nWHEN select.grade \u003e 1024",
      "UPDATE EDGE 200 -\u003e 101@0 OF select\nSET grade = select.grade + 1, year = 2000 WHEN select.grade \u003e 4",
      "UPDATE EDGE 200 -\u003e 101@0 OF select\nSET grade = select.grade + 1, year = 2018\nYIELD select.grade AS Grade, select.year AS Year",
      "UPDATE EDGE 200 -\u003e 101@0 OF select\nSET grade = select.grade + 1, year = 2019\nWHEN select.grade \u003e 4\nYIELD select.grade AS Grade, select.year AS Year",
      "UPDATE EDGE 200 -\u003e 101@0 OF select\nSET grade = select.grade + 1, year = 2019\nWHEN select.grade \u003e 233333333333\nYIELD select.grade AS Grade, select.year AS Year",
      "UPDATE VERTEX 101\nSET course.credits = $^.course.credits + 1, course.name = \"No9\"",
      "FETCH PROP ON course 103 YIELD course.name, course.credits",
      "UPDATE VERTEX 103\nSET course.credits = $^.course.credits + 1\nWHEN $^.course.name == \"CS\" AND $^.course.credits \u003e 2\nYIELD $^.course.name AS Name, $^.course.credits AS Credits",
      "UPSERT VERTEX 115\nSET student_default.name = \"Kate\", student_default.age = 12\nWHEN $^.student_default.gender == \"two\"\nYIELD $^.student_default.name AS Name, $^.student_default.age AS Age, $^.student_default.gender AS gender",
      "UPSERT VERTEX 116\nSET student_default.name = \"Kate\",\nstudent_default.age = $^.student_default.birthday + 1,\nstudent_default.birthday = $^.student_default.birthday + 1\nWHEN $^.student_default.gender == \"two\"\nYIELD $^.student_default.name AS Name,\n$^.student_default.age AS Age,\n$^.student_default.gender AS gender,\n$^.student_default.birthday AS birthday",
      "UPSERT VERTEX 117\nSET student_default.birthday = $^.student_default.birthday + 1,\nstudent_default.name = \"Kate\",\nstudent_default.age = $^.student_default.birthday + 1\nYIELD $^.student_default.name AS Name,\n$^.student_default.age AS Age,\n$^.student_default.gender AS gender,\n$^.student_default.birthday AS birthday",
      "FETCH PROP ON select 200-\u003e101@0 YIELD select.grade, select.year",
      "UPSERT EDGE ON select 201 -\u003e 101@0\nSET grade = 3, year = 2019 WHEN select.grade \u003e 3\nYIELD select.grade AS Grade, select.year AS Year",
      "UPSERT EDGE ON select 601 -\u003e 101@0\nSET year = 2019, grade = 3 WHEN select.grade \u003e10\nYIELD select.grade AS Grade, select.year AS Year",
      "FETCH PROP ON select 601-\u003e101@0 YIELD select.grade, select.year",
      "UPSERT EDGE ON select_default 111 -\u003e 222@0\nSET grade = 3\nYIELD select_default.grade AS Grade, select_default.year AS Year",
      "UPSERT EDGE ON select_default 222 -\u003e 333@0\nSET grade = 3, year = timestamp(\"2020-01-10T10:00:00\")\nYIELD select_default.grade AS Grade, select_default.year AS Year",
      "UPSERT EDGE ON select_default 222 -\u003e 444@0\nSET grade = 3, year = select_default.year + 10\nYIELD select_default.grade AS Grade, select_default.year AS Year",
      "UPSERT VERTEX 100 SET building.name = \"No1\";",
      "FETCH PROP on building 100 YIELD building.name",
      "INSERT VERTEX building(name) VALUES 100: (\"No2\")",
      "FETCH PROP on building 100 YIELD building.name",
      "UPSERT VERTEX 101 SET building.name = \"No1\"",
      "FETCH PROP on building 101 YIELD building.name",
      "INSERT VERTEX building(name) VALUES 101: (\"No2\")",
      "FETCH PROP on building 101 YIELD building.name",
      "INSERT VERTEX building(name) VALUES 100: (\"No1\");\nALTER TAG building ADD (new_field string default \"123\");",
      "UPSERT VERTEX 100 SET building.name = \"No2\"",
      "UPSERT VERTEX 100 SET building.name = \"No3\", building.new_field = \"321\"",
      "FETCH PROP on building 100 YIELD building.name, building.new_field",
      "UPSERT VERTEX 101 SET building.name = \"No1\", building.new_field = \"No2\"",
      "FETCH PROP on building 101 YIELD building.name, building.new_field",
      "INSERT EDGE like(likeness) VALUES 1 -\u003e 100:(1.0);\nALTER EDGE like ADD (new_field string default \"123\");",
      "UPSERT EDGE 1-\u003e100 OF like SET likeness = 2.0;",
      "UPSERT EDGE 1-\u003e100 OF like SET likeness = 3.0, new_field = \"321\"",
      "FETCH PROP ON like 1-\u003e100@0 YIELD like.likeness, like.new_field",
      "UPSERT EDGE 1-\u003e101 OF like SET likeness = 1.0, new_field = \"111\"",
      "FETCH PROP ON like 1-\u003e101@0 YIELD like.likeness, like.new_field"
    ]
  },
  {
    "path": "update",
    "file_name": "Update",
    "statements": [
      "UPDATE VERTEX \"101\"\nSET course.credits = $^.course.credits + 1;",
      "UPDATE VERTEX \"101\"\nSET course.credits = $^.course.credits + 1\nWHEN $^.course.name == \"English\" AND $^.course.credits \u003e 2",
      "UPDATE VERTEX \"101\"\nSET course.credits = $^.course.credits + 1\nWHEN $^.course.name == \"Math\" AND $^.course.credits \u003e 2",
      "UPDATE VERTEX \"101\"\nSET course.credits = $^.course.credits + 1\nYIELD $^.course.name AS Name, $^.course.credits AS Credits",
      "UPDATE VERTEX \"101\"\nSET course.credits = $^.course.credits + 1\nWHEN $^.course.name == \"Math\" AND $^.course.credits \u003e 2\nYIELD $^.course.name AS Name, $^.course.credits AS Credits",
      "UPDATE VERTEX \"101\"\nSET course.credits = $^.course.credits + 1\nWHEN $^.course.name == \"nonexistent\" AND $^.course.credits \u003e 2\nYIELD $^.course.name AS Name, $^.course.credits AS Credits",
      "FETCH PROP ON select \"200\"-\u003e\"101\"@0 YIELD select.grade, select.year",
      "UPDATE EDGE \"200\"-\u003e\"101\"@0 OF select\nSET grade = select.grade + 1, select.year = 2000;",
      "FETCH PROP ON select \"200\"-\u003e\"101\"@0 YIELD select.grade, select.year",
      "GO FROM \"101\" OVER select REVERSELY YIELD select.grade, select.year",
      "UPDATE EDGE \"200\"-\u003e\"101\"@0 OF select\nSET grade = select.grade + 1, year = 2000\nWHEN select.grade \u003e 1024",
      "UPDATE EDGE \"200\"-\u003e\"101\"@0 OF select\nSET grade = select.grade + 1, year = 2000 WHEN select.grade \u003e 4",
      "UPDATE EDGE \"200\"-\u003e\"101\"@0 OF select\nSET grade = select.grade + 1, year = 2018\nYIELD select.grade AS Grade, select.year AS Year",
      "UPDATE EDGE \"200\"-\u003e\"101\"@0 OF select\nSET grade = select.grade + 1, year = 2019\nWHEN select.grade \u003e 4\nYIELD select.grade AS Grade, select.year AS Year",
      "UPDATE EDGE \"200\"-\u003e\"101\"@0 OF select\nSET grade = select.grade + 1, year = 2019\nWHEN select.grade \u003e 233333333333\nYIELD select.grade AS Grade, select.year AS Year",
      "UPDATE VERTEX \"101\"\nSET course.credits = $^.course.credits + 1, course.name = \"No9\"",
      "FETCH PROP ON course \"103\" YIELD course.name, course.credits",
      "UPDATE VERTEX \"103\"\nSET course.credits = $^.course.credits + 1\nWHEN $^.course.name == \"CS\" AND $^.course.credits \u003e 2\nYIELD $^.course.name AS Name, $^.course.credits AS Credits",
      "UPSERT VERTEX \"115\"\nSET student_default.name = \"Kate\", student_default.age = 12\nWHEN $^.student_default.gender == \"two\"\nYIELD $^.student_default.name AS Name, $^.student_default.age AS Age, $^.student_default.gender AS gender",
      "UPSERT VERTEX \"116\"\nSET student_default.name = \"Kate\",\nstudent_default.age = $^.student_default.birthday + 1,\nstudent_default.birthday = $^.student_default.birthday + 1\nWHEN $^.student_default.gender == \"two\"\nYIELD $^.student_default.name AS Name,\n$^.student_default.age AS Age,\n$^.student_default.gender AS gender,\n$^.student_default.birthday AS birthday",
      "UPSERT VERTEX \"117\"\nSET student_default.birthday = $^.student_default.birthday + 1,\nstudent_default.name = \"Kate\",\nstudent_default.age = $^.student_default.birthday + 1\nYIELD $^.student_default.name AS Name,\n$^.student_default.age AS Age,\n$^.student_default.gender AS gender,\n$^.student_default.birthday AS birthday",
      "FETCH PROP ON select \"200\"-\u003e\"101\"@0 YIELD select.grade, select.year",
      "UPSERT EDGE \"201\" -\u003e \"101\"@0 OF select\nSET grade = 3, year = 2019 WHEN select.grade \u003e 3\nYIELD select.grade AS Grade, select.year AS Year",
      "UPSERT EDGE \"601\" -\u003e \"101\"@0 OF select\nSET year = 2019, grade = 3 WHEN select.grade \u003e10\nYIELD select.grade AS Grade, select.year AS Year",
      "FETCH PROP ON select \"601\"-\u003e\"101\"@0 YIELD select.grade, select.year",
      "UPSERT EDGE \"111\" -\u003e \"222\"@0 OF select_default\nSET grade = 3\nYIELD select_default.grade AS Grade, select_default.year AS Year",
      "UPSERT EDGE \"222\" -\u003e\"333\" @0 OF select_default\nSET grade = 3, year = timestamp(\"2020-01-10T10:00:00\")\nYIELD select_default.grade AS Grade, select_default.year AS Year",
      "UPSERT EDGE \"222\" -\u003e \"444\"@0 OF select_default\nSET grade = 3, year = select_default.year + 10\nYIELD select_default.grade AS Grade, select_default.year AS Year",
      "UPSERT VERTEX \"100\" SET building.name = \"No1\";",
      "FETCH PROP ON building \"100\" YIELD building.name",
      "INSERT VERTEX building(name) VALUES \"100\": (\"No2\")",
      "FETCH PROP ON building \"100\" YIELD building.name",
      "UPSERT VERTEX \"101\" SET building.name = \"No1\"",
      "FETCH PROP ON building \"101\" YIELD building.name",
      "INSERT VERTEX building(name) VALUES \"101\": (\"No2\")",
      "FETCH PROP ON building \"101\" YIELD building.name",
      "INSERT VERTEX building(name) VALUES \"100\": (\"No1\");\nALTER TAG building ADD (new_field string default \"123\");",
      "UPSERT VERTEX \"100\" SET building.name = \"No2\"",
      "UPSERT VERTEX \"100\" SET building.name = \"No3\", building.new_field = \"321\"",
      "FETCH PROP ON building \"100\" YIELD building.name, building.new_field",
      "UPSERT VERTEX \"101\" SET building.name = \"No1\", building.new_field = \"No2\"",
      "FETCH PROP ON building \"101\" YIELD building.name, building.new_field",
      "INSERT EDGE like(likeness) VALUES \"1\" -\u003e \"100\":(1.0);\nALTER EDGE like ADD (new_field string default \"123\");",
      "UPSERT EDGE \"1\"-\u003e\"100\" OF like SET likeness = 2.0;",
      "UPSERT EDGE \"1\"-\u003e\"100\" OF like SET likeness = 3.0, new_field = \"321\"",
      "FETCH PROP ON like \"1\"-\u003e\"100\"@0 YIELD like.likeness, like.new_field",
      "UPSERT EDGE \"1\"-\u003e\"101\" OF like SET likeness = 1.0, new_field = \"111\"",
      "FETCH PROP ON like \"1\"-\u003e\"101\"@0 YIELD like.likeness, like.new_field",
      "UPDATE VERTEX ON course \"101\"\nSET credits = credits + 1;",
      "UPDATE VERTEX ON course \"101\"\nSET credits = credits + 1\nWHEN name == \"English\" AND credits \u003e 2",
      "UPDATE VERTEX ON course \"101\"\nSET credits = credits + 1\nWHEN name == \"Math\" AND credits \u003e 2",
      "UPDATE VERTEX ON course \"101\"\nSET credits = credits + 1\nYIELD name AS Name, credits AS Credits",
      "UPDATE VERTEX ON course \"101\"\nSET credits = credits + 1\nYIELD \"101\" AS courseId, credits AS Credits",
      "UPDATE VERTEX ON course \"101\"\nSET credits = credits + 1\nWHEN name == \"Math\" AND credits \u003e 2\nYIELD name AS Name, credits AS Credits",
      "UPDATE VERTEX ON course \"101\"\nSET credits = credits + 1\nWHEN name == \"nonexistent\" AND credits \u003e 2\nYIELD name AS Name, credits AS Credits",
      "FETCH PROP ON select \"200\"-\u003e\"101\"@0 YIELD select.grade, select.year",
      "UPDATE EDGE ON select \"200\"-\u003e\"101\"@0\nSET grade = grade + 1, year = 2000;",
      "FETCH PROP ON select \"200\"-\u003e\"101\"@0 YIELD select.grade, select.year",
      "GO FROM \"101\" OVER select REVERSELY YIELD select.grade, select.year",
      "UPDATE EDGE ON select \"200\"-\u003e\"101\"@0\nSET grade = grade + 1, year = 2000\nWHEN grade \u003e 1024",
      "UPDATE EDGE ON select \"200\"-\u003e\"101\"@0\nSET grade = grade + 1, year = 2000 WHEN grade \u003e 4",
      "UPDATE EDGE ON select \"200\"-\u003e\"101\"@0\nSET grade = grade + 1, year = 2018\nYIELD grade AS Grade, year AS Year",
      "UPDATE EDGE ON select \"200\"-\u003e\"101\"@0\nSET grade = select.grade + 1, year = 2019\nWHEN select.grade \u003e 4\nYIELD select.grade AS Grade, select.year AS Year",
      "UPDATE EDGE ON select \"200\"-\u003e\"101\"@0\nSET grade = grade + 1, year = 2019\nWHEN grade \u003e 233333333333\nYIELD grade AS Grade, year AS Year",
      "UPDATE VERTEX ON course \"101\"\nSET credits = credits + 1, name = \"No9\"",
      "FETCH PROP ON course \"103\" YIELD course.name, course.credits",
      "UPDATE VERTEX ON course \"103\"\nSET credits = credits + 1\nWHEN name == \"CS\" AND credits \u003e 2\nYIELD name AS Name, credits AS Credits",
      "UPSERT VERTEX ON student_default \"115\"\nSET name = \"Kate\", age = 12\nWHEN gender == \"two\"\nYIELD name AS Name, age AS Age, gender AS gender",
      "UPSERT VERTEX ON student_default \"116\"\nSET name = \"Kate\", age = birthday + 1, birthday = birthday + 1\nWHEN gender == \"two\"\nYIELD name AS Name, age AS Age, gender AS gender, birthday AS birthday",
      "UPSERT VERTEX ON student_default \"117\"\nSET birthday = birthday + 1, name = \"Kate\", age = birthday + 1\nYIELD name AS Name, age AS Age, gender AS gender, birthday AS birthday",
      "FETCH PROP ON select \"200\"-\u003e\"101\"@0 YIELD select.grade, select.year",
      "UPSERT EDGE ON select \"201\" -\u003e \"101\"@0\nSET grade = 3, year = 2019 WHEN select.grade \u003e 3\nYIELD select.grade AS Grade, select.year AS Year",
      "UPSERT EDGE ON select \"601\" -\u003e \"101\"@0\nSET year = 2019, grade = 3 WHEN grade \u003e10\nYIELD grade AS Grade, year AS Year",
      "FETCH PROP ON select \"601\"-\u003e\"101\"@0 YIELD select.grade, select.year",
      "UPSERT EDGE ON select_default \"111\" -\u003e \"222\"@0\nSET grade = 3\nYIELD grade AS Grade, year AS Year",
      "UPSERT EDGE ON select_default \"222\" -\u003e \"333\"@0\nSET grade = 3, year = timestamp(\"2020-01-10T10:00:00\")\nYIELD grade AS Grade, year AS Year",
      "UPSERT EDGE ON select_default \"222\" -\u003e \"444\"@0\nSET grade = 3, year = year + 10\nYIELD grade AS Grade, year AS Year",
      "UPSERT VERTEX ON building \"100\" SET name = \"No1\";",
      "FETCH PROP ON building \"100\" YIELD building.name",
      "INSERT VERTEX building(name) VALUES \"100\": (\"No2\")",
      "FETCH PROP ON building \"100\" YIELD building.name",
      "UPSERT VERTEX ON building \"101\" SET name = \"No1\"",
      "FETCH PROP ON building \"101\" YIELD building.name",
      "INSERT VERTEX building(name) VALUES \"101\": (\"No2\")",
      "FETCH PROP ON building \"101\" YIELD building.name",
      "INSERT VERTEX building(name) VALUES \"100\": (\"No1\");\nALTER TAG building ADD (new_field string default \"123\");",
      "UPSERT VERTEX  ON building \"100\" SET name = \"No2\"",
      "UPSERT VERTEX ON building \"100\" SET name = \"No3\", new_field = \"321\"",
      "FETCH PROP ON building \"100\" YIELD building.name, building.new_field",
      "UPSERT VERTEX  ON building \"101\" SET name = \"No1\", new_field = \"No2\"",
      "FETCH PROP ON building \"101\" YIELD building.name, building.new_field",
      "INSERT EDGE like(likeness) VALUES \"1\" -\u003e \"100\":(1.0);\nALTER EDGE like ADD (new_field string default \"123\");",
      "UPSERT EDGE ON like \"1\"-\u003e\"100\" SET likeness = 2.0;",
      "UPSERT EDGE ON like \"1\"-\u003e\"100\" SET likeness = 3.0, new_field = \"321\"",
      "FETCH PROP ON like \"1\"-\u003e\"100\"@0 YIELD like.likeness, like.new_field",
      "UPSERT EDGE ON like \"1\"-\u003e\"101\" SET likeness = 1.0, new_field = \"111\"",
      "FETCH PROP ON like \"1\"-\u003e\"101\"@0 YIELD like.likeness, like.new_field"
    ]
  },
  {
    "path": "user",
    "file_name": "User",
    "statements": [
      "DROP USER IF EXISTS user1",
      "CREATE USER user1 WITH PASSWORD \"pwd1\"",
      "DESC USER user1;",
      "DROP USER IF EXISTS user2",
      "CREATE USER IF NOT EXISTS user2",
      "CREATE USER IF NOT EXISTS user2",
      "CREATE USER IF NOT EXISTS user1 WITH PASSWORD \"pwd1\"",
      "CREATE USER u",
      "CREATE USER u123456789ABCDEF",
      "CREATE USER `用户A`",
      "CREATE USER A1;\nCREATE USER a1;",
      "CREATE USER `CREATE`;\nCREATE USER `ROLE`;",
      "CREATE USER u3 WITH PASSWORD \"012345678910111213141516\";\nCREATE USER u4 WITH PASSWORD \"0\";",
      "CREATE USER u6 WITH PASSWORD \"中文密码^*()12\";",
      "DROP USER IF EXISTS u6;",
      "DROP USER IF EXISTS u6;",
      "CREATE USER user_mlt_roles;\nGRANT ROLE USER ON nba TO user_mlt_roles;\nGRANT ROLE GUEST ON student TO user_mlt_roles;",
      "DESC USER user_mlt_roles;",
      "DROP USER user_mlt_roles;",
      "CREATE USER user_mlt_roles;",
      "GRANT ROLE ADMIN ON nba TO user_mlt_roles;\nGRANT ROLE ADMIN ON student TO user_mlt_roles;\nGRANT ROLE GUEST ON nba_int_vid TO user_mlt_roles;",
      "GRANT ROLE DBA ON nba TO user_mlt_roles;",
      "DESC USER user_mlt_roles;",
      "GRANT ROLE ADMIN ON nba TO user_mlt_roles;\nGRANT ROLE GUEST ON nba TO user_mlt_roles;\nGRANT ROLE USER ON nba TO user_mlt_roles;",
      "SHOW ROLES IN nba",
      "DESC USER user_mlt_roles;",
      "REVOKE ROLE USER ON nba FROM user_mlt_roles;",
      "DESC USER user_mlt_roles;",
      "DROP USER user_mlt_roles",
      "SHOW ROLES IN nba",
      "CREATE SPACE test_roles(partition_num=1, replica_factor=1, vid_type=int64);\nCREATE USER IF NOT EXISTS user_roles WITH PASSWORD \"pwd\";",
      "GRANT ROLE ADMIN ON test_roles TO user_roles;",
      "DROP SPACE test_roles;",
      "CREATE SPACE test_roles(partition_num=1, replica_factor=1, vid_type=int64);",
      "SHOW ROLES IN test_roles",
      "DROP SPACE test_roles",
      "DROP USER IF EXISTS user_tmp",
      "CREATE USER IF NOT EXISTS user2 WITH PASSWORD \"pwd2\"",
      "ALTER USER user2 WITH PASSWORD \"pwd1\"",
      "CHANGE PASSWORD user2 FROM \"pwd1\" TO \"pwd2\"",
      "CREATE USER IF NOT EXISTS u7",
      "ALTER USER u7 WITH PASSWORD \"pwd1\"",
      "DROP USER IF EXISTS u7",
      "CHANGE PASSWORD root FROM \"nebula\" TO \"root\"",
      "CHANGE PASSWORD root FROM \"root\" TO \"nebula\"",
      "CREATE USER IF NOT EXISTS u8",
      "CHANGE PASSWORD u8 FROM \"\" TO \"pwd2\"",
      "CREATE USER IF NOT EXISTS usertmp",
      "DROP USER usertmp",
      "DROP USER IF EXISTS usertmp",
      "DROP USER IF EXISTS usertmp",
      "CREATE USER IF NOT EXISTS user1 WITH PASSWORD \"pwd1\"",
      "CREATE USER IF NOT EXISTS user1 WITH PASSWORD \"pwd1\"",
      "CHANGE PASSWORD user1 FROM \"pwd1\" TO \"newpwd1\"",
      "CHANGE PASSWORD user1 FROM \"newpwd1\" TO \"pwd1\"",
      "CREATE SPACE IF NOT EXISTS user_tmp_space(partition_num=1, replica_factor=1, vid_type=FIXED_STRING(8))",
      "DROP USER IF EXISTS usertmp",
      "CREATE USER IF NOT EXISTS usertmp WITH PASSWORD \"usertmp\"",
      "GRANT DBA ON user_tmp_space TO usertmp",
      "CREATE USER IF NOT EXISTS usertmp_2 WITH PASSWORD \"usertmp_2\"",
      "GRANT GUEST ON user_tmp_space TO usertmp_2",
      "DROP SPACE user_tmp_space;",
      "DROP SPACE IF EXISTS user_tmp_space_2",
      "CREATE USER IF NOT EXISTS user1 WITH PASSWORD \"pwd1\"",
      "CREATE SPACE IF NOT EXISTS user_tmp_space_3(partition_num=1, replica_factor=1, vid_type=FIXED_STRING(8))",
      "CREATE USER IF NOT EXISTS user1 WITH PASSWORD \"pwd1\"",
      "GRANT ROLE DBA ON user_tmp_space_3 TO user1",
      "REVOKE ROLE DBA ON user_tmp_space_3 FROM user1",
      "DROP SPACE IF EXISTS revoke_tmp_space",
      "DROP USER IF EXISTS user_revoke_tmp",
      "DROP SPACE user_tmp_space_3;",
      "CREATE SPACE IF NOT EXISTS user_tmp_space_4(partition_num=1, replica_factor=1, vid_type=FIXED_STRING(8))",
      "CREATE USER IF NOT EXISTS user1 WITH PASSWORD \"pwd1\"",
      "GRANT ROLE ADMIN ON user_tmp_space_4 TO user1",
      "CREATE USER IF NOT EXISTS user2 WITH PASSWORD \"pwd2\"",
      "GRANT ROLE ADMIN ON user_tmp_space_4 TO user2",
      "DESC USER root",
      "DESC USER user1",
      "DESC USER user1 | YIELD $-.space as sp",
      "REVOKE ROLE ADMIN ON user_tmp_space_4 FROM user1",
      "DESC USER user1",
      "GRANT ROLE GUEST ON user_tmp_space_4 TO user1"
    ]
  },
  {
    "path": "yield",
    "file_name": "NoSpaceChosen",
    "statements": [
      "YIELD 1+1 AS sum",
      "YIELD 1+1, '1+1', (int)3.14, (string)(1+1), (string)true",
      "YIELD hash(\"Boris\")",
      "YIELD hash(123)",
      "YIELD NOT FALSE OR FALSE AND FALSE XOR FALSE",
      "YIELD 1 AS number | YIELD $-.number AS number",
      "$a = YIELD 1 AS number;\nYIELD $a.number AS number;",
      "YIELD 1 AS number UNION YIELD 2 AS number",
      "YIELD 1 AS number INTERSECT YIELD 2 AS number",
      "YIELD 1 AS number MINUS YIELD 2 AS number"
    ]
  },
  {
    "path": "yield",
    "file_name": "parameter",
    "statements": [
      "RETURN $p1 is not null AS v",
      "RETURN $p1 is null AS v",
      "RETURN abs($p1)+1 AS ival, $p2 and false AS bval, $p3+\"ef\" AS sval, round($p4)+1.1 AS fval, $p5 AS lval, $p6.a AS mval, all(item in $p7.a.b.d where item\u003c4 or ((item\u003e0) is null)) AS pval",
      "RETURN $p6 AS v",
      "MATCH (v) WHERE id(v)==$p3\nRETURN id(v) AS v",
      "MATCH (v) WHERE id(v) IN [$p3,$p8]\nRETURN id(v) AS v",
      "MATCH (v) WHERE id(v) == $p7.a.b.d[4]\nRETURN id(v) AS v",
      "MATCH (v) WHERE id(v) IN $p7.a.b.d\nRETURN id(v) AS v",
      "MATCH (v:player)-[:like]-\u003e(n) WHERE id(v)==$p3 and n.player.age\u003e$p1+29\nRETURN n.player.name AS dst LIMIT $p1+1",
      "MATCH (v:player)-[:like]-\u003e(n:player{name:$p7.a.b.c})\nRETURN n.player.name AS dst LIMIT $p7.a.b.d[0]",
      "UNWIND $p5 AS c\nWITH $p6.a AS a, $p6.b AS b, c\nRETURN a,b,c",
      "UNWIND abs($p1)+1 AS ival\nWITH ival AS ival, $p2 and false AS bval, $p3+\"ef\" AS sval, round($p4)+1.1 AS fval\nRETURN *",
      "MATCH (v:player)\nWITH v AS v WHERE v.player.name in [$p1,$p2,$p3,\"Tony Parker\",$p4,$p5,$p6]\nRETURN v.player.name AS v ORDER BY v, $p3 LIMIT $p1",
      "LOOKUP ON player where player.age\u003e$p1+40 YIELD player.name AS name",
      "GO FROM \"Tim Duncan\" OVER like yield like._dst as dst, $p3;",
      "GO FROM \"Tim Duncan\" OVER like WHERE like.likeness\u003e$p1 yield like._dst as dst;",
      "go from \"Tim Duncan\" over like yield like._dst as id\n| yield $-.id+$p1+hash(abs($p1)+$-.id) as v",
      "$var=go from \"Tim Duncan\" over like yield like._dst as id;\nyield $var.id+$p1+hash(abs($p1)+$var.id) as v",
      "$var=go from \"Tim Duncan\" over like yield like._dst as id, like.likeness as likeness;\nyield avg($var.likeness)+$p1 as v;",
      "go from \"Tim Duncan\" over like yield like._dst as id\n| yield count(distinct abs($p1)+$-.id) as v",
      "go from \"Tim Duncan\" over like yield properties($$).age as age\n| yield avg(abs(hash($-.age+$p1)+$p1)) as v",
      "go from \"Tim Duncan\" over like yield properties($$).age as age\n| yield abs($-.age+$p3) as v",
      "GET SUBGRAPH FROM 'Tim Duncan' WHERE like.likeness \u003e $p10 YIELD edges AS e",
      "FIND ALL PATH FROM 'Tim Duncan' TO 'Tony Parker' OVER like WHERE like.likeness \u003e $p10-1 YIELD path AS p",
      "FIND ALL PATH FROM 'Tim Duncan' TO 'Tony Parker' OVER like WHERE like.likeness \u003e $p5[10] YIELD path AS p",
      "insert vertex player(name, age) values \"1\":($p6.c, $p1+40)",
      "insert edge like(likeness) values \"1\"-\u003e\"2\":($p1+40)",
      "update vertex on player \"1\" set age=age+$p1 when age\u003e$p1",
      "update edge on like \"1\"-\u003e\"2\" set likeness=likeness+$p1",
      "update edge on like \"1\"-\u003e\"2\" set likeness=likeness+$p6.c when likeness\u003e300",
      "update edge on like \"1\"-\u003e\"2\" set likeness=likeness+$p6.a when likeness\u003e$p1",
      "$var=lookup on player where player.name==$p6.c and player.age in [43,35,42,45] yield id(vertex) AS VertexID;DELETE VERTEX $var.VertexID;RETURN count($var.VertexID) AS record",
      "$var=lookup on player where player.name==$p3 and player.age in [43,35,42,45] yield id(vertex) AS VertexID;DELETE VERTEX $var.VertexID;RETURN count($var.VertexID) AS record",
      "$var=lookup on player where player.name==$p7.a.b.d[4] and player.age in [43,35,42,45] yield id(vertex) AS VertexID;DELETE VERTEX $var.VertexID;RETURN count($var.VertexID) AS record"
    ]
  },
  {
    "path": "yield",
    "file_name": "return",
    "statements": [
      "RETURN 1+1 AS sum",
      "RETURN last(LIST[]) AS a, head(LIST[]) AS b",
      "RETURN 1- -1 AS sub",
      "RETURN DISTINCT 1+1, '1+1', (int)3.14, (string)(1+1), (string)true",
      "GO FROM \"Tony Parker\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst",
      "FETCH PROP ON player \"Tony Parker\" YIELD player.age as age | RETURN $-.age + 100 AS age",
      "RETURN hash(\"Boris\")",
      "RETURN hash(123)",
      "RETURN NOT FALSE OR FALSE AND FALSE XOR FALSE"
    ]
  },
  {
    "path": "yield",
    "file_name": "yield.IntVid",
    "statements": [
      "YIELD 1",
      "YIELD [1, 1.1, 1e2, 1.1e2, .3e4, 1.e4, 1234E-10, true] AS basic_value",
      "YIELD {p1: 1, p2: true, p3: \"test\"} AS r",
      "YIELD true and false",
      "YIELD datetime('2012-03-04T22:11').year",
      "YIELD datetime('2012-03-04T22:11').not_exists",
      "YIELD CASE 1 WHEN 1 THEN 2 ELSE 3 END",
      "YIELD abs(-1)",
      "YIELD [i in [1, 2, 3] where i \u003e 1 | i + 1] AS r",
      "YIELD all(n IN range(1, 5) WHERE n \u003e 2)",
      "YIELD reduce(totalNum = 10, n IN range(1, 3) | totalNum + n) AS r",
      "YIELD [1, 2, 3][2]",
      "YIELD [1, 2, 3][0..1]",
      "YIELD (INT)\"1\"",
      "YIELD -(1)",
      "YIELD 1 AS num",
      "YIELD 1+1, (int)3.14, (string)(1+1), (string)true,\"1+1\"",
      "YIELD \"Hello\", hash(\"Hello\")",
      "YIELD hash(\"Boris\")",
      "YIELD hash(123)",
      "YIELD hash(123+456)",
      "YIELD hash(123.0)",
      "YIELD hash(!false)",
      "YIELD NOT false OR false AND false XOR false",
      "YIELD (NOT false OR false) AND false XOR true",
      "YIELD 2.5 % 1.2",
      "YIELD udf_is_in(1,0,1,2), 123",
      "GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team AS team",
      "GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team WHERE 1 == 1",
      "GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team WHERE $-.start \u003e 2005",
      "GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.*",
      "GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.* WHERE $-.start \u003e 2005",
      "GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.*,hash(123) as hash WHERE $-.start \u003e 2005",
      "GO 2 STEPS FROM hash(\"Tim Duncan\") OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst",
      "GO 2 STEPS FROM hash(\"Tim Duncan\") OVER like YIELD like._dst AS dst | YIELD $-.dst AS dst",
      "GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst",
      "$var = GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team",
      "$var = GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team WHERE 1 == 1",
      "$var = GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team WHERE $var.start \u003e 2005",
      "$var = GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*",
      "$var = GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.* WHERE $var.start \u003e 2005",
      "$var = GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*, hash(123) as hash WHERE $var.start \u003e 2005",
      "$a = GO 2 STEPS FROM hash(\"Tim Duncan\") OVER like YIELD like._dst AS dst;YIELD DISTINCT $a.dst AS dst",
      "$a = GO 2 STEPS FROM hash(\"Tim Duncan\") OVER like YIELD like._dst AS dst;YIELD $a.dst AS dst",
      "$a = GO FROM hash(\"Tim Duncan\") OVER like YIELD like._dst AS dst;YIELD DISTINCT $a.dst AS dst",
      "YIELD -9223372036854775808",
      "YIELD 9223372036854775807",
      "YIELD -2*4611686018427387904",
      "YIELD COUNT(*), 1+1",
      "GO FROM hash(\"Carmelo Anthony\") OVER like YIELD $$.player.age as age, like.likeness AS like | YIELD AVG($-.age),SUM($-.like),COUNT(*),1+1",
      "GO FROM hash(\"Carmelo Anthony\") OVER like YIELD like._dst| YIELD COUNT(*)",
      "GO FROM hash(\"Carmelo Anthony\") OVER like YIELD edge as e| YIELD 1",
      "GO FROM hash(\"Nobody\") OVER like YIELD like._dst | YIELD 1",
      "$var=GO FROM hash(\"Carmelo Anthony\") OVER like YIELD $$.player.age as age, like.likeness AS like ; YIELD AVG($var.age),SUM($var.like),COUNT(*)",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team",
      "$var=GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team ; YIELD $var.team",
      "GO FROM hash(\"NON EXIST VERTEX ID\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.name as name WHERE $-.start \u003e 20000 | YIELD $-.name AS name",
      "YIELD 1,1",
      "GO FROM hash(\"Boris Diaw\") OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team",
      "GO FROM hash(\"Tim Duncan\") OVER serve YIELD serve._src as id | YIELD $-.id as id | GO FROM $-.id OVER serve YIELD $$.team.name AS name",
      "$var=GO FROM hash(\"Tim Duncan\") OVER serve YIELD serve._src as id;$var2 = YIELD $var.id as id ; GO FROM $var2.id OVER serve YIELD $$.team.name AS name",
      "YIELD 1- -1",
      "yield split('123,456,789', ',') as l| yield [e in $-.l | (int)(e)] as c;",
      "yield [e in ['123', '456', '789'] | (int)(e)] as c;"
    ]
  },
  {
    "path": "yield",
    "file_name": "yield",
    "statements": [
      "YIELD 1",
      "YIELD [1, 1.1, 1e2, 1.1e2, .3e4, 1.e4, 1234E-10, true] AS basic_value",
      "YIELD {p1: 1, p2: true, p3: \"test\"} AS r",
      "YIELD true and false",
      "YIELD datetime('2012-03-04T22:11').year",
      "YIELD datetime('2012-03-04T22:11').not_exists",
      "YIELD CASE 1 WHEN 1 THEN 2 ELSE 3 END",
      "YIELD abs(-1)",
      "YIELD [i in [1, 2, 3] where i \u003e 1 | i + 1] AS r",
      "YIELD all(n IN range(1, 5) WHERE n \u003e 2)",
      "YIELD reduce(totalNum = 10, n IN range(1, 3) | totalNum + n) AS r",
      "YIELD [1, 2, 3][2]",
      "YIELD [1, 2, 3][0..1]",
      "YIELD (int)\"1\"",
      "YIELD -(1)",
      "YIELD 1 AS num",
      "YIELD 1+1, (int)3.14, (string)(1+1), (string)true,\"1+1\"",
      "YIELD \"Hello\", hash(\"Hello\")",
      "YIELD hash(\"Boris\")",
      "YIELD hash(123)",
      "YIELD hash(123+456)",
      "YIELD hash(123.0)",
      "YIELD hash(!false)",
      "YIELD NOT false OR false AND false XOR false",
      "YIELD (NOT false OR false) AND false XOR true",
      "YIELD 2.5 % 1.2",
      "YIELD udf_is_in(1,0,1,2), 123",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team AS team",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team WHERE 1 == 1",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team WHERE $-.start \u003e 2005",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.*",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.* WHERE $-.start \u003e 2005",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.*,hash(123) as hash WHERE $-.start \u003e 2005",
      "GO 2 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst",
      "GO 2 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD $-.dst AS dst",
      "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst",
      "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team",
      "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team WHERE 1 == 1",
      "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.team WHERE $var.start \u003e 2005",
      "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*",
      "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.* WHERE $var.start \u003e 2005",
      "$var = GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team;YIELD $var.*, hash(123) as hash WHERE $var.start \u003e 2005",
      "$a = GO 2 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst;YIELD DISTINCT $a.dst AS dst",
      "$a = GO 2 STEPS FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst;YIELD $a.dst AS dst",
      "$a = GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst;YIELD DISTINCT $a.dst AS dst",
      "YIELD -9223372036854775808",
      "YIELD 9223372036854775807",
      "YIELD -2*4611686018427387904",
      "YIELD COUNT(*), 1+1",
      "GO FROM \"Carmelo Anthony\" OVER like YIELD $$.player.age as age, like.likeness AS like | YIELD AVG($-.age),SUM($-.like),COUNT(*),1+1",
      "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)",
      "GO FROM \"Carmelo Anthony\" OVER like YIELD edge as e| YIELD 1",
      "GO FROM \"Nobody\" OVER like YIELD like._dst| YIELD 1",
      "$var=GO FROM \"Carmelo Anthony\" OVER like YIELD $$.player.age as age, like.likeness AS like ; YIELD AVG($var.age),SUM($var.like),COUNT(*)",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team",
      "$var=GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team ; YIELD $var.team",
      "GO FROM \"NON EXIST VERTEX ID\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.name as name WHERE $-.start \u003e 20000 | YIELD $-.name AS name",
      "YIELD 1,1",
      "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name as name, serve.start_year as start, $$.team.name as team | YIELD $-.team",
      "GO FROM \"Tim Duncan\" OVER serve YIELD serve._src as id | YIELD $-.id as id | GO FROM $-.id OVER serve YIELD $$.team.name AS name",
      "$var=GO FROM \"Tim Duncan\" OVER serve YIELD serve._src as id;$var2 = YIELD $var.id as id ; GO FROM $var2.id OVER serve YIELD $$.team.name AS name",
      "YIELD 1- -1",
      "yield split('123,456,789', ',') as l| yield [e in $-.l | (int)(e)] as c;",
      "yield [e in ['123', '456', '789'] | (int)(e)] as c;",
      "yield [aBs(-3), tofloat(3), bit_Or(1, 2)] AS function_case_test",
      "yield counT(*), aVg(3), bit_Or(1)"
    ]
  }
]